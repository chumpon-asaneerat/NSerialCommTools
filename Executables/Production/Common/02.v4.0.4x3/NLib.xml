<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLib</name>
    </assembly>
    <members>
        <member name="T:NLib.MemoryMappedFileView">
            <summary>
            Memory Mapped File View Class.
            </summary>
        </member>
        <member name="T:NLib.MemoryMappedFileView.ViewAccess">
            <summary>
            View Access
            </summary>
        </member>
        <member name="F:NLib.MemoryMappedFileView.ViewAccess.ReadWrite">
            <summary>
            Read and Write
            </summary>
        </member>
        <member name="F:NLib.MemoryMappedFileView.ViewAccess.Read">
            <summary>
            Read Only
            </summary>
        </member>
        <member name="M:NLib.MemoryMappedFileView.#ctor(System.IntPtr,System.Int32,NLib.MemoryMappedFileView.ViewAccess)">
            <summary>
            Constructor
            </summary>
            <param name="mappedView">The mapped view pointer.</param>
            <param name="size">The buffer size.</param>
            <param name="access">The view access mode.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadBytes(System.Byte[])">
            <summary>
            ReadBytes
            </summary>
            <param name="data">The data to read in byte array.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadBytes(System.Byte[],System.Int32)">
            <summary>
            ReadBytes
            </summary>
            <param name="data">The data to read in byte array.</param>
            <param name="offset">The offset to begin read.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteBytes(System.Byte[])">
            <summary>
            WriteBytes
            </summary>
            <param name="data">The data to write in byte array.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            WriteBytes
            </summary>
            <param name="data">The data to write in byte array.</param>
            <param name="offset">The offset to begin write.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadByte(System.Int32)">
            <summary>
            ReadByte
            </summary>
            <param name="offset">The offset to begin read.</param>
            <returns>Returns byte in byte data at specificed offset.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteByte(System.Byte,System.Int32)">
            <summary>
            WriteByte
            </summary>
            <param name="data">The data to write in byte.</param>
            <param name="offset">The offset to begin write.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadInt16(System.Int32)">
            <summary>
            ReadInt16
            </summary>
            <param name="offset">The offset to begin read.</param>
            <returns>Returns byte in Int16 data at specificed offset.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteInt16(System.Int16,System.Int32)">
            <summary>
            WriteInt16
            </summary>
            <param name="data">The data to write in Int16</param>
            <param name="offset">The offset to begin write.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadInt32(System.Int32)">
            <summary>
            ReadInt32
            </summary>
            <param name="offset">The offset to begin read.</param>
            <returns>Returns byte in Int32 data at specificed offset.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteInt32(System.Int32,System.Int32)">
            <summary>
            WriteInt32
            </summary>
            <param name="data">The data to write in Int32</param>
            <param name="offset">The offset to begin write.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadInt64(System.Int32)">
            <summary>
            ReadInt64
            </summary>
            <param name="offset">The offset to begin read.</param>
            <returns>Returns byte in Int64 data at specificed offset.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteInt64(System.Int64,System.Int32)">
            <summary>
            WriteInt64
            </summary>
            <param name="data">The data to write in Int64</param>
            <param name="offset">The offset to begin write.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadStructure(System.Type)">
            <summary>
            ReadStructure
            </summary>
            <param name="structureType">The target structure type.</param>
            <returns>Returns structure that read from buffer.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteStructure(System.Object)">
            <summary>
            WriteStructure
            </summary>
            <param name="data">The data structure to wrtie.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadDeserialize">
            <summary>
            ReadDeserialize
            </summary>
            <returns>Returns deserialized object.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadDeserialize(System.Int32)">
            <summary>
            ReadDeserialize
            </summary>
            <param name="offset">The offset to begin read.</param>
            <returns>Returns deserialized object.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.ReadDeserialize(System.Int32,System.Int32)">
            <summary>
            ReadDeserialize
            </summary>
            <param name="offset">The offset to begin read.</param>
            <param name="length">The size of data to read from beginning of buffer.</param>
            <returns>Returns deserialized object.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteSerialize(System.Object)">
            <summary>
            Serializes the data and writes it to the file.
            </summary>
            <param name="data">The data to serialize.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteSerialize(System.Object,System.Int32)">
            <summary>
            Serializes the data and writes it to the file.
            </summary>
            <param name="data">The data to serialize.</param>
            <param name="offset">The position in the file to start.</param>
        </member>
        <member name="M:NLib.MemoryMappedFileView.WriteSerialize(System.Object,System.Int32,System.Int32)">
            <summary>
            Serializes the data and writes it to the file.
            </summary>
            <param name="data">The data to serialize.</param>
            <param name="offset">The position in the file to start.</param>
            <param name="length">The buffer size in bytes.</param>
        </member>
        <member name="P:NLib.MemoryMappedFileView.Size">
            <summary>
            Get Size of view.
            </summary>
        </member>
        <member name="T:NLib.MemoryMappedFile">
            <summary>
            Memory Mapped File Win32 Wrapper Class.
            </summary>
        </member>
        <member name="T:NLib.MemoryMappedFile.FileAccess">
            <summary>
            File Access Enum
            </summary>
        </member>
        <member name="F:NLib.MemoryMappedFile.FileAccess.ReadOnly">
            <summary>
            Read Only access
            </summary>
        </member>
        <member name="F:NLib.MemoryMappedFile.FileAccess.ReadWrite">
            <summary>
            Read and Write access
            </summary>
        </member>
        <member name="M:NLib.MemoryMappedFile.#ctor(System.IntPtr,System.Int32,NLib.MemoryMappedFile.FileAccess)">
            <summary>
            Constructor.
            </summary>
            <param name="fileMapping">The File Pointer.</param>
            <param name="size">The Size to mapped.</param>
            <param name="access">The Mapped File Access mode.</param>
        </member>
        <member name="M:NLib.MemoryMappedFile.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NLib.MemoryMappedFile.CreateFile(System.String,NLib.MemoryMappedFile.FileAccess,System.Int32)">
            <summary>
            Create a virtual memory mapped file located in the system page file.
            </summary>
            <param name="name">The name of the file. Prefix it with "Global\" or "Local\" to control its scope between NT services and user applications in Terminal Server scenarios.</param>
            <param name="access">Whether you need write access to the file.</param>
            <param name="size">The preferred size of the file in terms of bytes.</param>
            <returns>A MemoryMappedFile instance representing the file.</returns>
        </member>
        <member name="M:NLib.MemoryMappedFile.CreateView(System.Int32,System.Int32,NLib.MemoryMappedFileView.ViewAccess)">
            <summary>
            Create a view of the memory mapped file, allowing to read/write bytes.
            </summary>
            <param name="offset">An optional offset to the file.</param>
            <param name="size">The size of the view in terms of bytes.</param>
            <param name="access">Whether you need write access to the view.</param>
            <returns>A MemoryMappedFileView instance representing the view.</returns>
        </member>
        <member name="T:NLib.StringMappedItem">
            <summary>
            String Mapped Item. The Memory mapped file for string share between process.
            </summary>
        </member>
        <member name="M:NLib.StringMappedItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.StringMappedItem.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="mappingNane">The mapping name.</param>
        </member>
        <member name="M:NLib.StringMappedItem.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mappingNane">The mapping name.</param>
            <param name="size">The max size of mapping.</param>
        </member>
        <member name="M:NLib.StringMappedItem.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.StringMappedItem.CreateInstance">
            <summary>
            Create Instance
            </summary>
        </member>
        <member name="M:NLib.StringMappedItem.Release">
            <summary>
            Release
            </summary>
        </member>
        <member name="M:NLib.StringMappedItem.SetValue(System.String)">
            <summary>
            Set Value
            </summary>
            <param name="value">The Value</param>
        </member>
        <member name="M:NLib.StringMappedItem.GetValue">
            <summary>
            Get Value.
            </summary>
            <returns>Returns value on current mapped file.</returns>
        </member>
        <member name="M:NLib.StringMappedItem.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="P:NLib.StringMappedItem.MappingName">
            <summary>
            Gets Mapping Name.
            </summary>
        </member>
        <member name="P:NLib.StringMappedItem.Size">
            <summary>
            Gets size
            </summary>
        </member>
        <member name="P:NLib.StringMappedItem.Value">
            <summary>
            Gets or sets value.
            </summary>
        </member>
        <member name="T:NLib.ShareManager">
            <summary>
            Share Manager.
            </summary>
        </member>
        <member name="M:NLib.ShareManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:NLib.ShareManager.Item(System.String)">
            <summary>
            Gets or sets share item by key.
            </summary>
            <param name="mapName">The unique mapped item key.</param>
            <returns>Returns value on mapped item.</returns>
        </member>
        <member name="M:NLib.ShareManager.Create(System.String)">
            <summary>
            Create new share. No data write to mapped item.
            </summary>
            <param name="mapName">The unique mapped item key.</param>
        </member>
        <member name="M:NLib.ShareManager.Reset(System.String)">
            <summary>
            Reset value on mapping item.
            </summary>
            <param name="mapName">The unique mapped item key.</param>
        </member>
        <member name="T:NLib.AppInstance">
            <summary>
            Single App Instance Helper Class. Please used App Instance as static variable if Notify Icon is used
            in program to solve problem with cannot find main form handle when stay in system tray.
            </summary>
        </member>
        <member name="T:NLib.AppInstance.SW">
            <summary>
            SW
            </summary>
        </member>
        <member name="F:NLib.AppInstance.SW.SHOWNORMAL">
            <summary>
            SHOWNORMAL
            </summary>
        </member>
        <member name="F:NLib.AppInstance.SW.SHOW">
            <summary>
            SHOW
            </summary>
        </member>
        <member name="F:NLib.AppInstance.SW.RESTORE">
            <summary>
            RESTORE
            </summary>
        </member>
        <member name="M:NLib.AppInstance.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="version">The Version information</param>
            <param name="minor">The Minor information</param>
            <param name="build">The Build information</param>
            <param name="lastUpdate">The Last Update information</param>
        </member>
        <member name="M:NLib.AppInstance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.AppInstance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.AppInstance.HasMoreInstance">
            <summary>
            Get to Check is More Instance is in memory
            </summary>
        </member>
        <member name="P:NLib.AppInstance.NeedActivate">
            <summary>
            Check is application need activate. This property is true when another instance is execute.
            </summary>
        </member>
        <member name="M:NLib.AppInstance.ResetActivate">
            <summary>
            Reset Activate. Please Call when the main form is activate.
            </summary>
        </member>
        <member name="T:NLib.ApplicationManager">
            <summary>
            The Application Manager class. Provide common access variables and functions
            that used for control multithread accssing, related folders, etc.
            </summary>
        </member>
        <member name="P:NLib.ApplicationManager.Instance">
            <summary>
            Singelton Access instance of application manager.
            </summary>
        </member>
        <member name="P:NLib.ApplicationManager.InstanceDate">
            <summary>
            Gets Singelton Instance Create Date.
            </summary>
        </member>
        <member name="P:NLib.ApplicationManager.InstanceGuid">
            <summary>
            Gets Singelton Instance Guid.
            </summary>
        </member>
        <member name="M:NLib.ApplicationManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.ApplicationManager.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.ApplicationManager.Init(NLib.IApplicationController)">
            <summary>
            Init the application controller.
            </summary>
            <param name="controller">The application controller.</param>
        </member>
        <member name="M:NLib.ApplicationManager.Shutdown(System.Int32)">
            <summary>
            Shutdown and release current controller.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.ApplicationManager.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Shutdown with auto kill process and release current controller.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.ApplicationManager.Shutdown(System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Shutdown application manager and release current controller.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="autoKillInMs">The time to force process auto 
            kill in millisecond. if this parameter is less than 100 ms. 
            so no auto kill process running.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.ApplicationManager.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate 
            that this thread should be suspended to allow other waiting threads to execute. 
            Specify Infinite to block the thread indefinitely. 
            </param>
        </member>
        <member name="M:NLib.ApplicationManager.Wait(System.Int32)">
            <summary>
            Wait.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait. 
            </param>
        </member>
        <member name="M:NLib.ApplicationManager.DoEvents">
            <summary>
            Processes all Windows messages currently in the message queue.
            </summary>
        </member>
        <member name="M:NLib.ApplicationManager.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the 
            UI object's underlying window handle, with the specified list of arguments.
            </summary>
            <param name="del">
            A delegate to a method that takes parameters of the same number and type that 
            are contained in the args parameter.
            </param>
            <param name="args">
            An array of objects to pass as arguments to the specified method. 
            This parameter can be null if the method takes no arguments. 
            </param>
            <returns>
            An Object that contains the return value from the delegate being invoked, 
            or null if the delegate has no return value.
            </returns>
        </member>
        <member name="M:NLib.ApplicationManager.Preload(System.Action)">
            <summary>
            Preload routine for make sure required assembly is load init app domain.
            </summary>
            <param name="method">The Preload method.</param>
        </member>
        <member name="P:NLib.ApplicationManager.IsExit">
            <summary>
            Check is application is exit.
            </summary>
        </member>
        <member name="P:NLib.ApplicationManager.Controller">
            <summary>
            Gets current application controller.
            </summary>
        </member>
        <member name="P:NLib.ApplicationManager.Environments">
            <summary>
            Access Application Enviromnents.
            </summary>
        </member>
        <member name="P:NLib.ApplicationManager.Shares">
            <summary>
            Access Share manager.
            </summary>
        </member>
        <member name="T:NLib.RetryActions">
            <summary>
            Retry Actions class. This class run in UI Thread.
            </summary>
        </member>
        <member name="M:NLib.RetryActions.Retry``1(System.Func{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retry action.
            </summary>
            <typeparam name="T">Return Result Type.</typeparam>
            <param name="function">The function to process.</param>
            <param name="numberOfRetries">Number to retry if error occur.</param>
            <param name="msPause">Time to pause before next retry.</param>
            <param name="throwExceptions">True to throw exception.</param>
            <returns>Results Result from execute function.</returns>
        </member>
        <member name="M:NLib.RetryActions.Retry(System.Action,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retry action.
            </summary>
            <param name="action">The action to process.</param>
            <param name="numberOfRetries">Number to retry if error occur.</param>
            <param name="msPause">Time to pause before next retry.</param>
            <param name="throwExceptions">True to throw exception.</param>
            <returns>Results True if action is successfully execute without error.</returns>
        </member>
        <member name="T:NLib.Retry">
            <summary>
            The Retry class. This class run in UI Thread.
            </summary>
        </member>
        <member name="M:NLib.Retry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Retry.Times(System.UInt32)">
            <summary>
            Set number to retry.
            </summary>
            <param name="times">The Number to retry.</param>
            <returns>Returns instance of Retry class.</returns>
        </member>
        <member name="M:NLib.Retry.When``1">
            <summary>
            Checks when target excetion detected the action. The T type will used in default 
            should retry internal method.
            </summary>
            <typeparam name="T">The target exeption type.</typeparam>
            <returns>Always returns this instance to provide functional programming style.</returns>
        </member>
        <member name="M:NLib.Retry.If(System.Predicate{System.Exception})">
            <summary>
            Set delegate to handler if match exception detected the action mehod should retry. 
            The predicate delegate will replace default should retry internal method.
            This method should be set before call Do method.
            Or we can write psudo code look like 'Retry' X 'Times] 'If' exception detect so 'Do' method.
            </summary>
            <param name="predicate">The exception matching function.</param>
            <returns>Always returns this instance to provide functional programming style.</returns>
        </member>
        <member name="M:NLib.Retry.Do(System.Action)">
            <summary>
            Execute Action. (The method will run in UI Thread).
            </summary>
            <param name="method">The Action delegate.</param>
        </member>
        <member name="T:NLib.Threads.NETWorkerMonitor">
            <summary>
            NETWorkerMonitor class. Provide basic worker threads monitor.
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerMonitor.Instance">
            <summary>
            Singelton Access instance.
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerMonitor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerMonitor.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerMonitor.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerMonitor.Register(NLib.Threads.NETWorkerThread)">
            <summary>
            Register worker thread to monitor list.
            </summary>
            <param name="worker">The worker thread instance.</param>
        </member>
        <member name="M:NLib.Threads.NETWorkerMonitor.Unregister(NLib.Threads.NETWorkerThread)">
            <summary>
            Unregister worker thread from monitor list.
            </summary>
            <param name="worker">The worker thread instance.</param>
        </member>
        <member name="P:NLib.Threads.NETWorkerMonitor.Count">
            <summary>
            Gets number of worker threads in monitor list.
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerMonitor.GetWorkerThreads">
            <summary>
            Gets list of worker thread on m0nitor.
            </summary>
            <returns>Returns array of worker threads.</returns>
        </member>
        <member name="T:NLib.Threads.NETWorkerThread">
            <summary>
            NETWorkerThread class.
            This class is .NET ThreadPool's Worker Thread that provide the 
            basic functional for worker thread.
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Init">
            <summary>
            Init Variables
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.IsProcessing">
            <summary>
            Get/Set is in processing state.
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Kill">
            <summary>
            Kill Thread. Join and release mutex and wait-handle
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Run">
            <summary>
            Run. Core Code
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.GetHashCode">
            <summary>
            Get Hash Code
            </summary>
            <returns>hash code value for object.</returns>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">object to check.</param>
            <returns>true if object is equal.</returns>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.Name">
            <summary>
            Gets worker thread's name.
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.OnStarting">
            <summary>
            Occur when Start method is called
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.OnStopping">
            <summary>
            Occur when Stop method is called
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:NLib.Threads.NETWorkerThread.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.Piority">
            <summary>
            Get/Set Thread Piority
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.IsStart">
            <summary>
            Is Thread Start
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.ThreadName">
            <summary>
            Get/Set Thread Name
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.IsAlive">
            <summary>
            Check is Thread is alive.
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.ManageThreadId">
            <summary>
            Get Manage Thread ID
            </summary>
        </member>
        <member name="P:NLib.Threads.NETWorkerThread.Thread">
            <summary>
            Get Thread instance
            </summary>
        </member>
        <member name="T:NLib.Threads.NThreadState">
            <summary>
            NThread State class.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThreadState.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThreadState.#ctor(System.Int32)">
            <summary>
            Constrcutor.
            </summary>
            <param name="timeout">The timeout in millisecond. -1 for no timeout.</param>
        </member>
        <member name="M:NLib.Threads.NThreadState.Cancel">
            <summary>
            Cancel current execution code.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThreadState.Completed">
            <summary>
            Call for update that current operation is completed.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.FinishedTime">
            <summary>
            Gets the finished time.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.IsCanceled">
            <summary>
            Checks is thread is cancel.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.IsCompleted">
            <summary>
            Checks is thread is completed.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.Timeout">
            <summary>
            Gets the timeout in millisecond. -1 for no timeout.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.IsTimeout">
            <summary>
            Checks is thread is timeout.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.IsFinished">
            <summary>
            Checks is operation is finished.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.ExecuteTime">
            <summary>
            Gets the total execute time.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThreadState.UserState">
            <summary>
            Gets or sets user state.
            </summary>
        </member>
        <member name="T:NLib.Threads.NThreadExecuteHandler">
            <summary>
            NThread Execute Handler.
            </summary>
            <param name="state">The thread state variable.</param>
        </member>
        <member name="T:NLib.Threads.NThread">
            <summary>
            NThread class. This class is wrapper class that used for handle user code in another thread.
            The NThread class is provide basic thread handler and automatic detected cleanup thread
            that not shutdown properly.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThread.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThread.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The thread name.</param>
        </member>
        <member name="M:NLib.Threads.NThread.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThread.Start(System.Int32)">
            <summary>
            Start.
            </summary>
            <param name="timeout">The timeout in millisecond. -1 for no timeout.</param>
            <returns>Returns current instance.</returns>
        </member>
        <member name="M:NLib.Threads.NThread.Shutdown">
            <summary>
            Shutdown.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThread.OnInit(NLib.Threads.NThreadExecuteHandler)">
            <summary>
            Assign initialization code.
            </summary>
            <param name="action">The initialization action code.</param>
            <returns>Returns current instance.</returns>
        </member>
        <member name="M:NLib.Threads.NThread.Execute(NLib.Threads.NThreadExecuteHandler)">
            <summary>
            Assign execute code.
            </summary>
            <param name="action">The excute action code.</param>
            <returns>Returns current instance.</returns>
        </member>
        <member name="M:NLib.Threads.NThread.OnFinished(NLib.Threads.NThreadExecuteHandler)">
            <summary>
            Assign finished code.
            </summary>
            <param name="action">The finished action code.</param>
            <returns>Returns current instance.</returns>
        </member>
        <member name="P:NLib.Threads.NThread.Name">
            <summary>
            Gets or sets the thread name.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThread.IsRunning">
            <summary>
            Checks is current thread is running.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThread.State">
            <summary>
            Gets thread state.
            </summary>
        </member>
        <member name="P:NLib.Threads.NThread.ThreadCount">
            <summary>
            Gets thrad count.
            </summary>
        </member>
        <member name="M:NLib.Threads.NThread.Remove(System.String)">
            <summary>
            Remove thread by name.
            </summary>
            <param name="name">The thread name.</param>
        </member>
        <member name="M:NLib.Threads.NThread.Create(System.String)">
            <summary>
            Create new Thread.
            </summary>
            <param name="name">The thread name.</param>
            <returns>Returns instance of new thread.</returns>
        </member>
        <member name="M:NLib.Threads.NThread.FreeThreads">
            <summary>
            Shutdown all threads.
            </summary>
        </member>
        <member name="T:NLib.Data.Design.SqlScriptFileNameEditor">
            <summary>
            The Editor for Open *.sql File.
            </summary>
        </member>
        <member name="M:NLib.Data.Design.SqlScriptFileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            Initialize Dialog before process Opening
            </summary>
            <param name="openFileDialog">Open Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.OpenBAKFileNameEditor">
            <summary>
            *.Bak Open File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.OpenBAKFileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            Initialize Dialog before process Opening
            </summary>
            <param name="openFileDialog">Open Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.SaveBAKFileNameEditor">
            <summary>
            *.Bak Save File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.SaveBAKFileNameEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initialize Dialog before process Saving
            </summary>
            <param name="saveFileDialog">Save Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.OpenMDFFileNameEditor">
            <summary>
            *.MDF Open File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.OpenMDFFileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            Initialize Dialog before process Opening
            </summary>
            <param name="openFileDialog">Open Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.OpenLDFFileNameEditor">
            <summary>
            *.LDF Open File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.OpenLDFFileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            Initialize Dialog before process Opening
            </summary>
            <param name="openFileDialog">Open Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.SaveMDFFileNameEditor">
            <summary>
            *.MDF Save File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.SaveMDFFileNameEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initialize Dialog before process Saving
            </summary>
            <param name="saveFileDialog">Save Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.SaveLDFFileNameEditor">
            <summary>
            *.LDF Save File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.SaveLDFFileNameEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initialize Dialog before process Saving
            </summary>
            <param name="saveFileDialog">Save Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.NetworkConputerNameEditor">
            <summary>
            Network Conputer Name Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.NetworkConputerNameEditor.SetEditorProps(System.Object,System.Windows.Forms.ListBox)">
            <summary>
            SetEditorProps
            </summary>
            <param name="editingInstance">object instance to edit</param>
            <param name="editor">control that used as editor</param>
        </member>
        <member name="T:NLib.Data.Design.SqlServerDatabaseNameEditor">
            <summary>
            SqlServer Database Name Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.SqlServerDatabaseNameEditor.SetEditorProps(System.Object,System.Windows.Forms.ListBox)">
            <summary>
            SetEditorProps
            </summary>
            <param name="editingInstance">object instance to edit</param>
            <param name="editor">control that used as editor</param>
        </member>
        <member name="T:NLib.Data.Design.OpenExcelFileNameEditor">
            <summary>
            *.xls Open File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.OpenExcelFileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            Initialize Dialog before process Opening
            </summary>
            <param name="openFileDialog">Open Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.SaveExcelFileNameEditor">
            <summary>
            *.xls Save File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.SaveExcelFileNameEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initialize Dialog before process Saving
            </summary>
            <param name="saveFileDialog">Save Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.OpenMsAccessFileNameEditor">
            <summary>
            *.mdb Open File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.OpenMsAccessFileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            Initialize Dialog before process Opening
            </summary>
            <param name="openFileDialog">Open Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.Design.SaveMsAccessFileNameEditor">
            <summary>
            *.mdb Save File Editor
            </summary>
        </member>
        <member name="M:NLib.Data.Design.SaveMsAccessFileNameEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initialize Dialog before process Saving
            </summary>
            <param name="saveFileDialog">Save Dialog Instance</param>
        </member>
        <member name="T:NLib.Data.DataReaderAdapter">
            <summary>
            Use to Convert DataReader to DataTable
            Used by Connection Manager derived class i.e. SqlServer Manager
            </summary>
        </member>
        <member name="M:NLib.Data.DataReaderAdapter.FillFromReader(System.Data.DataTable,System.Data.IDataReader)">
            <summary>
            Fill DataTable with DataReader
            </summary>
            <param name="dataTable">Target DataTable</param>
            <param name="dataReader">Source DataReader</param>
            <returns>No of Row that Fill in DataTable</returns>
        </member>
        <member name="M:NLib.Data.DataReaderAdapter.FillFromReaderOptimize(System.Data.DataTable,System.Data.IDataReader)">
            <summary>
            Fill DataTable with DataReader Optimize version
            </summary>
            <param name="dataTable">Target DataTable</param>
            <param name="dataReader">Source DataReader</param>
            <returns>No of Row that Fill in DataTable</returns>
        </member>
        <member name="M:NLib.Data.DataReaderAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            See DbDataAdapter Document (this class will return null in all case)
            </summary>
            <param name="dataRow">target DataRow</param>
            <param name="command">command for updating</param>
            <param name="statementType">Type of Command Statement</param>
            <param name="tableMapping">Table Mapping information object</param>
            <returns>RowUpdatingEventArgs object</returns>
        </member>
        <member name="M:NLib.Data.DataReaderAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            See DbDataAdapter Document (this class will return null in all case)
            </summary>
            <param name="dataRow">target DataRow</param>
            <param name="command">command for updating</param>
            <param name="statementType">Type of Command Statement</param>
            <param name="tableMapping">Table Mapping information object</param>
            <returns>RowUpdatingEventArgs object</returns>
        </member>
        <member name="M:NLib.Data.DataReaderAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            See DbDataAdapter Document
            </summary>
            <param name="value">RowUpdatedEventArgs object</param>
        </member>
        <member name="M:NLib.Data.DataReaderAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            See DbDataAdapter Document
            </summary>
            <param name="value">RowUpdatingEventArgs object</param>
        </member>
        <member name="T:NLib.Data.ExecuteResult`1">
            <summary>
            Execute Result class
            </summary>
        </member>
        <member name="M:NLib.Data.ExecuteResult`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.ExecuteResult`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NLib.Data.ExecuteResult`1.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:NLib.Data.ExecuteResult`1.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Data.ExecuteResult`1.SetResult(`0)">
            <summary>
            Set Result
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NLib.Data.ExecuteResult`1.SetException(System.Exception)">
            <summary>
            Set Exception
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:NLib.Data.ExecuteResult`1.Result">
            <summary>
            Get Result
            </summary>
        </member>
        <member name="P:NLib.Data.ExecuteResult`1.Exception">
            <summary>
            Get Exception Object
            </summary>
        </member>
        <member name="P:NLib.Data.ExecuteResult`1.HasException">
            <summary>
            Check is exception instance is exits.
            </summary>
        </member>
        <member name="M:NLib.Data.ExecuteResult`1.op_Implicit(NLib.Data.ExecuteResult{`0})~`0">
            <summary>
            implicit convert to T
            </summary>
            <param name="value">The ExecuteResult instance.</param>
            <returns>string that represent data in T instance.</returns>
        </member>
        <member name="T:NLib.Data.StoredProcedureResult">
            <summary>
            Stored Procedure Result.
            </summary>
        </member>
        <member name="M:NLib.Data.StoredProcedureResult.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.StoredProcedureResult.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.StoredProcedureResult.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:NLib.Data.StoredProcedureResult.OutParameters">
            <summary>
            Access Out parameters value.
            </summary>
        </member>
        <member name="P:NLib.Data.StoredProcedureResult.Table">
            <summary>
            Gets DataTable that contains result.
            </summary>
        </member>
        <member name="T:NLib.Data.RecordsetReference">
            <summary>
            Recordset Reference.
            </summary>
        </member>
        <member name="M:NLib.Data.RecordsetReference.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.RecordsetReference.#ctor(System.Data.Common.DbCommand,System.Data.IDataReader)">
            <summary>
            Constructor
            </summary>
            <param name="command">The Command object.</param>
            <param name="reader">The Reader object.</param>
        </member>
        <member name="M:NLib.Data.RecordsetReference.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Data.RecordsetReference.Free">
            <summary>
            Free.
            </summary>
        </member>
        <member name="M:NLib.Data.RecordsetReference.IsAlive">
            <summary>
            Is Recordset's connection and reader is still alive.
            </summary>
            <returns>Returns true if recordset still on operation (alive).</returns>
        </member>
        <member name="T:NLib.Data.Recordset">
            <summary>
            Recordset class.
            </summary>
        </member>
        <member name="M:NLib.Data.Recordset.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.Recordset.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Data.Recordset.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NLib.Data.Recordset.Skip">
            <summary>
            Advance to Next position
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Data.Recordset.Next">
            <summary>
            Fetch Next Data Row
            </summary>
            <returns>ture if advance to next record success.</returns>
        </member>
        <member name="M:NLib.Data.Recordset.Init(System.Data.Common.DbCommand,System.Data.Common.DbDataReader)">
            <summary>
            Init.
            </summary>
            <param name="command">Command Object.</param>
            <param name="reader">DbDataReader Object.</param>
        </member>
        <member name="P:NLib.Data.Recordset.Reader">
            <summary>
            Gets Reader Instance.
            </summary>
        </member>
        <member name="P:NLib.Data.Recordset.Command">
            <summary>
            Get Command Instance.
            </summary>
        </member>
        <member name="P:NLib.Data.Recordset.BOF">
            <summary>
            Is Begin Of Record.
            </summary>
        </member>
        <member name="P:NLib.Data.Recordset.EOF">
            <summary>
            Is End Of Record.
            </summary>
        </member>
        <member name="P:NLib.Data.Recordset.Current">
            <summary>
            Gets Current Record As Object Array.
            </summary>
        </member>
        <member name="P:NLib.Data.Recordset.CurrentRow">
            <summary>
            Gets Current Record as DataRow.
            </summary>
        </member>
        <member name="M:NLib.Data.Recordset.ToDataTable">
            <summary>
            To Data Table.
            </summary>
            <returns>DataTable instance that contain all information that read from data reader.</returns>
        </member>
        <member name="T:NLib.Data.TransactionScope">
            <summary>
            TransactionScope Scope class.
            </summary>
        </member>
        <member name="M:NLib.Data.TransactionScope.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.TransactionScope.#ctor(NLib.Components.NDbConnection)">
            <summary>
            Constructor.
            </summary>
            <param name="manager">The NDbConnection instance.</param>
        </member>
        <member name="M:NLib.Data.TransactionScope.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.TransactionScope.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NLib.Data.TransactionScope.BeginTransaction">
            <summary>
            BeginTransaction.
            </summary>
            <returns>Returns instance of DbTransaction.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.Commit">
            <summary>
            Commit.
            </summary>
        </member>
        <member name="M:NLib.Data.TransactionScope.Rollback">
            <summary>
            Rollback.
            </summary>
        </member>
        <member name="M:NLib.Data.TransactionScope.HasError">
            <summary>
            Has Error.
            </summary>
            <returns>Returns true if has error.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.GetLastError">
            <summary>
            Get Last Error.
            </summary>
            <returns>Returns the last exception.</returns>
        </member>
        <member name="P:NLib.Data.TransactionScope.NeedRollback">
            <summary>
            Is oparation need rollback.
            </summary>
        </member>
        <member name="P:NLib.Data.TransactionScope.OperationCount">
            <summary>
            Get Operation count that call via Transaction Scope.
            </summary>
        </member>
        <member name="M:NLib.Data.TransactionScope.Query(System.String)">
            <summary>
            Query.
            </summary>
            <param name="queryText">The query string.</param>
            <returns>Returns ExecuteResult of data table.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.Query(System.Data.Common.DbCommand)">
            <summary>
            Query.
            </summary>
            <param name="command">The DbCommand instance.</param>
            <returns>Returns ExecuteResult of data table.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteNonQuery(System.String)">
            <summary>
            Execute NonQuery.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>Returns ExecuteResult of int.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Execute NonQuery.
            </summary>
            <param name="command">The DbCommand instance.</param>
            <returns>Returns ExecuteResult of int.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteScalar(System.String)">
            <summary>
            Execute Scalar.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>Returns ExecuteResult of objcet.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Execute Scalar.
            </summary>
            <param name="command">The DbCommand instance.</param>
            <returns>Returns ExecuteResult of objcet.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteReader(System.String)">
            <summary>
            Execute Reader.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>Returns ExecuteResult of DataTable array.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Execute Reader.
            </summary>
            <param name="command">The DbCommand instance.</param>
            <returns>Returns ExecuteResult of DataTable array.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteProcedure(System.String,System.String[],System.Object[])">
            <summary>
            Execute Procedure.
            </summary>
            <param name="procedureName">The stored procedure's name.</param>
            <param name="parameterNames">The array of parameter names.</param>
            <param name="parameterValues">The array of parameter values.</param>
            <returns>Returns ExecuteResult of StoredProcedureResult.</returns>
        </member>
        <member name="M:NLib.Data.TransactionScope.ExecuteProcedure(System.Data.Common.DbCommand,System.String[],System.Object[])">
            <summary>
            Execute Procedure.
            </summary>
            <param name="command">The DbCommand instance.</param>
            <param name="parameterNames">The array of parameter names.</param>
            <param name="parameterValues">The array of parameter values.</param>
            <returns>Returns ExecuteResult of StoredProcedureResult.</returns>
        </member>
        <member name="T:NLib.Data.GenerateResult">
            <summary>
            The Generate Result class.
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateResult.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateResult.#ctor(System.Object)">
            <summary>
            Constructor. Create with exception. The success flag is automatically set to true.
            </summary>
            <param name="value">The value after generate.</param>
        </member>
        <member name="M:NLib.Data.GenerateResult.#ctor(System.Exception)">
            <summary>
            Constructor. Create with exception. The success flag is automatically set to false.
            </summary>
            <param name="ex">The exception after generate.</param>
        </member>
        <member name="M:NLib.Data.GenerateResult.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.GenerateResult.IsSuccess">
            <summary>
            Checks Is operation success.
            </summary>
        </member>
        <member name="P:NLib.Data.GenerateResult.Value">
            <summary>
            Gets the result value.
            </summary>
        </member>
        <member name="P:NLib.Data.GenerateResult.Exception">
            <summary>
            Gets the exception value.
            </summary>
        </member>
        <member name="T:NLib.Data.GenerateMethod">
            <summary>
            Generate Method class (abstract).
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateMethod.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateMethod.GetParameters">
            <summary>
            Gets Parameter string.
            </summary>
            <returns>Returns string that represent all parameters in an object.</returns>
        </member>
        <member name="M:NLib.Data.GenerateMethod.SetParameters(System.String)">
            <summary>
            Sets Parameter string.
            </summary>
            <param name="value">The string that represent all parameters in an object.</param>
        </member>
        <member name="M:NLib.Data.GenerateMethod.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="P:NLib.Data.GenerateMethod.TableName">
            <summary>
            Gets or Sets Target Table's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.GenerateMethod.ColumnName">
            <summary>
            Gets or Sets Target Column's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.GenerateMethod.PropertyName">
            <summary>
            Gets or Sets Target Property's Name.
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateMethod.Create(System.String)">
            <summary>
            Create Generate Method By Name.
            </summary>
            <param name="generateMethodName">Generate Method's Name.</param>
            <returns>Returns Generate Method's Instance. if not found null return.</returns>
        </member>
        <member name="M:NLib.Data.GenerateMethod.GetGenerateMethodNames">
            <summary>
            Gets Generate Method Names.
            </summary>
            <returns>Returns list of all Type's FullName that inherited from GenerateMethod.</returns>
        </member>
        <member name="M:NLib.Data.GenerateMethod.GetGenerateMethods">
            <summary>
            Gets Generate Methods.
            </summary>
            <returns>Returns list of all Type that inherited from GenerateMethod in cache.</returns>
        </member>
        <member name="M:NLib.Data.GenerateMethod.GetGenerateMethods(System.Boolean)">
            <summary>
            Gets Generate Methods.
            </summary>
            <param name="refresh">refresh cache.</param>
            <returns>Returns list of all Type that inherited from GenerateMethod.</returns>
        </member>
        <member name="P:NLib.Data.GenerateMethod.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateMethod.Create">
            <summary>
            Create New Generate Method Instance.
            </summary>
            <returns>Returns new Generate Method Instance.</returns>
        </member>
        <member name="F:NLib.Data.GenerateMethod.Identity">
            <summary>
            Identity
            </summary>
        </member>
        <member name="F:NLib.Data.GenerateMethod.NextGuid">
            <summary>
            Next Guid
            </summary>
        </member>
        <member name="F:NLib.Data.GenerateMethod.SystemDate">
            <summary>
            System Date
            </summary>
        </member>
        <member name="F:NLib.Data.GenerateMethod.SelectNextMax">
            <summary>
            Select Next Max value.
            </summary>
        </member>
        <member name="F:NLib.Data.GenerateMethod.SelectCurrentMax">
            <summary>
            Select Current Max value.
            </summary>
        </member>
        <member name="F:NLib.Data.GenerateMethod.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="F:NLib.Data.GenerateMethod.Generator">
            <summary>
            Generator
            </summary>
        </member>
        <member name="T:NLib.Data.NextGuidValue">
            <summary>
            Get Next Guid Value Generate method class.
            </summary>
        </member>
        <member name="M:NLib.Data.NextGuidValue.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="P:NLib.Data.NextGuidValue.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.NextGuidValue.Create">
            <summary>
            Create Generate Method Instance.
            </summary>
            <returns>Returns new instance of Generate Method.</returns>
        </member>
        <member name="T:NLib.Data.CurrentIdentityValue">
            <summary>
            Get Identity Value Generate method class.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentIdentityValue.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="P:NLib.Data.CurrentIdentityValue.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentIdentityValue.Create">
            <summary>
            Create Generate Method Instance.
            </summary>
            <returns>Returns new instance of Generate Method.</returns>
        </member>
        <member name="T:NLib.Data.CurrentDateTimeValue">
            <summary>
            Get Current System DateTime Generate method class.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentDateTimeValue.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="P:NLib.Data.CurrentDateTimeValue.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentDateTimeValue.Create">
            <summary>
            Create Generate Method Instance.
            </summary>
            <returns>Returns new instance of Generate Method.</returns>
        </member>
        <member name="T:NLib.Data.NextMaxValue">
            <summary>
            Get Next Max Value Generate method class.
            </summary>
        </member>
        <member name="M:NLib.Data.NextMaxValue.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="P:NLib.Data.NextMaxValue.CompoundKeyNames">
            <summary>
            Gets or sets Coupound Key's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.NextMaxValue.ColumnKeyValues">
            <summary>
            Gets or sets Coupound Key's Value.
            </summary>
        </member>
        <member name="P:NLib.Data.NextMaxValue.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.NextMaxValue.Create">
            <summary>
            Create Generate Method Instance.
            </summary>
            <returns>Returns new instance of Generate Method.</returns>
        </member>
        <member name="T:NLib.Data.CurrentMaxValue">
            <summary>
            Get Current Max Value Generate method class.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentMaxValue.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="P:NLib.Data.CurrentMaxValue.CompoundKeyNames">
            <summary>
            Gets or sets Coupound Key's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.CurrentMaxValue.ColumnKeyValues">
            <summary>
            Gets or sets Coupound Key's Value.
            </summary>
        </member>
        <member name="P:NLib.Data.CurrentMaxValue.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentMaxValue.Create">
            <summary>
            Create Generate Method Instance.
            </summary>
            <returns>Returns new instance of Generate Method.</returns>
        </member>
        <member name="T:NLib.Data.CurrentSequenceValue">
            <summary>
            Get Current Sequence Value Generate method class.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentSequenceValue.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="M:NLib.Data.CurrentSequenceValue.GetParameters">
            <summary>
            Gets Parameter string.
            </summary>
            <returns>Returns the string that represent all parameters in an object.</returns>
        </member>
        <member name="M:NLib.Data.CurrentSequenceValue.SetParameters(System.String)">
            <summary>
            Sets Parameter string.
            </summary>
            <param name="value">The string that represent all parameters in an object.</param>
        </member>
        <member name="P:NLib.Data.CurrentSequenceValue.SequenceName">
            <summary>
            Gets or sets Sequence's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.CurrentSequenceValue.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentSequenceValue.Create">
            <summary>
            Create Generate Method Instance.
            </summary>
            <returns>Returns new instance of Generate Method.</returns>
        </member>
        <member name="T:NLib.Data.CurrentGeneratorValue">
            <summary>
            Get Current Generator Value Generate method class.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentGeneratorValue.Generate(NLib.Components.NDbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Generate.
            </summary>
            <param name="manager">The connection manager instance.</param>
            <param name="transaction">The database transaction instance.</param>
            <returns>Returns the GenerateResult instance.</returns>
        </member>
        <member name="M:NLib.Data.CurrentGeneratorValue.GetParameters">
            <summary>
            Gets Parameter string.
            </summary>
            <returns>Returns string that represent all parameters in an object.</returns>
        </member>
        <member name="M:NLib.Data.CurrentGeneratorValue.SetParameters(System.String)">
            <summary>
            Sets Parameter string.
            </summary>
            <param name="value">The string that represent all parameters in an object.</param>
        </member>
        <member name="P:NLib.Data.CurrentGeneratorValue.GeneratorName">
            <summary>
            Gets or sets Generator's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.CurrentGeneratorValue.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="M:NLib.Data.CurrentGeneratorValue.Create">
            <summary>
            Create Generate Method Instance.
            </summary>
            <returns>Returns new instance of Generate Method.</returns>
        </member>
        <member name="T:NLib.Data.ConfigOrders">
            <summary>
            Connection Config Property Orders constants.
            </summary>
        </member>
        <member name="F:NLib.Data.ConfigOrders.UniqueName">
            <summary>
            The Property Order for UniqueName. Value is -9.
            </summary>
        </member>
        <member name="F:NLib.Data.ConfigOrders.ConnectionString">
            <summary>
            The Property Order for ConnectionString. Value is -8.
            </summary>
        </member>
        <member name="F:NLib.Data.ConfigOrders.DataSource">
            <summary>
            The Property Order for DataSource. Value is 1.
            </summary>
        </member>
        <member name="F:NLib.Data.ConfigOrders.Header">
            <summary>
            The Property Order for Header option. Value is 2.
            </summary>
        </member>
        <member name="F:NLib.Data.ConfigOrders.Security">
            <summary>
            The Property Order for Security. Value is 5.
            </summary>
        </member>
        <member name="F:NLib.Data.ConfigOrders.Timeout">
            <summary>
            The Property Order for Timeout. Value is 998.
            </summary>
        </member>
        <member name="F:NLib.Data.ConfigOrders.Optional">
            <summary>
            The Property Order for Optional. Value is 999.
            </summary>
        </member>
        <member name="T:NLib.Data.PersistSecurityMode">
            <summary>
            Persist Security Info Mode
            </summary>
        </member>
        <member name="F:NLib.Data.PersistSecurityMode.Default">
            <summary>
            Use Default Value from Provider (not specificed in connection string)
            </summary>
        </member>
        <member name="F:NLib.Data.PersistSecurityMode.Yes">
            <summary>
            Set Persist Security Info to yes in connection string.
            This mode security-sensitive informatio will persist as part of connection.
            </summary>
        </member>
        <member name="F:NLib.Data.PersistSecurityMode.No">
            <summary>
            Set Persist Security Info to no in connection string. 
            This mode security-sensitive information, such as the password, is not returned as part
            of the connection if the connection is open or has ever been in an open state.
            Resetting the connection string resets all connection string values including the password
            </summary>
        </member>
        <member name="T:NLib.Data.AuthenticationMode">
            <summary>
            Authentication Mode
            used for define Database Server Connection Authentication.
            
            see Integrated Security -or- Trusted_Connection on connection string for more information
            </summary>
        </member>
        <member name="F:NLib.Data.AuthenticationMode.Server">
            <summary>
            Server Authentication Mode this mode will allow user connect using Database Server Account 
            such as 'sa' in sql server when used this mode Integrated Security -or- Trusted_Connection key 
            in connection string will set to false
            </summary>
        </member>
        <member name="F:NLib.Data.AuthenticationMode.Windows">
            <summary>
            Windows Authentication mode is mode that the connection will uses Windows account credentials 
            for authentication. in this mode Integrated Security -or- Trusted_Connection key in 
            connection string will set to true (or equivalent to SSPI)
            </summary>
        </member>
        <member name="T:NLib.Data.ConnectionSetting">
            <summary>
            Connection Setting class.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionSetting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionSetting.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.ConnectionSetting.Config">
            <summary>
            Get/Set Connection Config instance.
            </summary>
        </member>
        <member name="T:NLib.Data.NDbSecurityOptions">
            <summary>
            The Database Connection's Security options.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbSecurityOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbSecurityOptions.GetHashCode">
            <summary>
            Gets Hash Code.
            </summary>
            <returns>Returns hashcode of current object.</returns>
        </member>
        <member name="M:NLib.Data.NDbSecurityOptions.Equals(System.Object)">
            <summary>
            Conpare if object is equals.
            </summary>
            <param name="obj">The target objct to compare.</param>
            <returns>Returns true if object is the same.</returns>
        </member>
        <member name="M:NLib.Data.NDbSecurityOptions.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.Data.NDbSecurityOptions.Domain">
            <summary>
            Gets or sets Domain Name.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbSecurityOptions.UserName">
            <summary>
            Gets or sets User Name.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbSecurityOptions.Password">
            <summary>
            Gets or sets Password.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbSecurityOptions.PersistSecurity">
            <summary>
            Gets or sets Persist Security Info Mode.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbSecurityOptions.Authentication">
            <summary>
            Gets or sets the Authentication Mode.
            </summary>
        </member>
        <member name="T:NLib.Data.NDbTimeouts">
            <summary>
            The Database Connection and Command Timeout options.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTimeouts.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTimeouts.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.Data.NDbTimeouts.ConnectionTimeoutInSeconds">
            <summary>
            Gets or sets Connection Timeout (default = 5 s)
            </summary>
        </member>
        <member name="P:NLib.Data.NDbTimeouts.CommandTimeoutInSeconds">
            <summary>
            Gets or sets Command Timeout (default = 30 s).
            </summary>
        </member>
        <member name="T:NLib.Data.NDbOptions">
            <summary>
            The Database Optional Connection Information.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbOptions.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.Data.NDbOptions.AutoDetectBroken">
            <summary>
            Gets or sets auto detect broken connection. Default is False.
            Note that when used ExecuteReader or ExecuteDataReader
            from NDbConnection please make sure to set this proeprty to false before execute and 
            set this property back to true when execute completed to prevent access connection that in
            execution process.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbOptions.AutoDetectInterval">
            <summary>
            Get/Set Auto detect broken Interval in second. (default 30 second.)
            </summary>
        </member>
        <member name="P:NLib.Data.NDbOptions.ServerDateFormat">
            <summary>
            Gets or sets Server Date Format. When assigned if the connect config class is supports
            the date format will apply to server imediately after connected.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbOptions.UseDateCache">
            <summary>
            Gets or sets to use cache for reduce traffic when sync date with server.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbOptions.EnableMARS">
            <summary>
            Gets or sets to Enable Multiple Active Result Sets. Default is False.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbOptions.ExtendConnectionString">
            <summary>
            Gets or sets Extended Connection String.
            </summary>
        </member>
        <member name="T:NLib.Data.NParameter">
            <summary>
            The NParameter class. This class is key-value pair.
            </summary>
        </member>
        <member name="M:NLib.Data.NParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NParameter.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="key">The parameter key or name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:NLib.Data.NParameter.Equals(System.Object)">
            <summary>
            Equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Data.NParameter.GetHashCode">
            <summary>
            GetHashCode.
            </summary>
            <returns>Returns hash code.</returns>
        </member>
        <member name="M:NLib.Data.NParameter.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents and object instance.</returns>
        </member>
        <member name="P:NLib.Data.NParameter.Key">
            <summary>
            Gets or sets key.
            </summary>
        </member>
        <member name="P:NLib.Data.NParameter.Value">
            <summary>
            Gets or sets value.
            </summary>
        </member>
        <member name="T:NLib.Data.ConnectionStrings">
            <summary>
            The ConnectionStrings class. This class is provides functional to parse the connection string in to
            list of NParameter and combine list of NParameter back into single connection string.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.FindIndex(NLib.Data.NParameter)">
            <summary>
            Find index of parameter.
            </summary>
            <param name="value">The parameter instance.</param>
            <returns>Returns index of parameter. If not exists -1 would returns.</returns>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.Update(NLib.Data.NParameter)">
            <summary>
            Update Parameter.
            </summary>
            <param name="value">The parameter instance.</param>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.Update(System.String,System.String)">
            <summary>
            Update Parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.Clear">
            <summary>
            Clear all parameters.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.GetConnectionString">
            <summary>
            Gets Connection String.
            </summary>
            <returns>Returns string that represents all parameters in parameter list.</returns>
        </member>
        <member name="P:NLib.Data.ConnectionStrings.Item(System.String)">
            <summary>
            Indexer access Value by key.
            </summary>
            <param name="key">The key to search index.</param>
            <returns>
            Returns value that match key. If not exists new item is auto append with empty string otherwise 
            the exists value would returns.
            </returns>
        </member>
        <member name="P:NLib.Data.ConnectionStrings.Parameters">
            <summary>
            Access List of parameters.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionStrings.Parse(System.String)">
            <summary>
            Parse the connection string into ConnectionStrings instance.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>Returns ConnectionStrings instance.</returns>
        </member>
        <member name="T:NLib.Data.NDbConfig">
            <summary>
            NDbConfig abstract class
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.GetUniqueName">
            <summary>
            Define Each Connection Unique Name
            </summary>
            <returns>Unique Name for Connection</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.GetConnectionString">
            <summary>
            Get Connection String
            </summary>
            <returns>Connection string based on property settings</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.CreateFactory">
            <summary>
            Create database factory provider.
            </summary>
            <returns>Returns instance of database factory provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.RaiseConfigChanged">
            <summary>
            Call to raised event ConfigChanged
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.OnConfigChanged">
            <summary>
            Overrides to handles internal data when the one or more connection configuration 
            is changed. This methods is called before event is raises.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.CheckVar``1(``0,System.Action{``0})">
            <summary>
            Check the variable instance. If variable is null the new instance is auto created.
            </summary>
            <typeparam name="T">The variable type. Should be class and has default constructor.</typeparam>
            <param name="value">The variable instance.</param>
            <param name="initAction">The Action delegate for init default value of new object.</param>
            <returns>
            Returns the variable instance if the value is not null otherwise return new instance.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.GetFactory">
            <summary>
            Gets database factory provider.
            </summary>
            <returns>Returns instance of database factory provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.SetFactory(NLib.Data.NDbFactory)">
            <summary>
            Set database factory provider.
            </summary>
            <param name="value">The database factory provider instance.</param>
        </member>
        <member name="P:NLib.Data.NDbConfig.ConnectionStrings">
            <summary>
            Gets Connection String Builders.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.GetDefaultOwner">
            <summary>
            Gets the default database object owner.
            </summary>
            <returns>Returns the default database object owner.</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.SaveToFile(System.String)">
            <summary>
            Quick and dirty save current config to file.
            </summary>
            <param name="fileName">Target config file name.</param>
            <returns>Return true if save operation is success.</returns>
        </member>
        <member name="P:NLib.Data.NDbConfig.ProviderName">
            <summary>
            Gets Provider's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbConfig.UniqueName">
            <summary>
            Gets the connection unique name.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbConfig.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbConfig.DefaultOwner">
            <summary>
            Gets the default owner.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbConfig.Factory">
            <summary>
            Gets the Connection Factory.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbConfig.Security">
            <summary>
            Gets or sets Security information.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbConfig.Timeout">
            <summary>
            Gets or sets Timeout information.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbConfig.Optional">
            <summary>
            Gets or sets Optional information.
            </summary>
        </member>
        <member name="E:NLib.Data.NDbConfig.ConfigChanged">
            <summary>
            ConnectionConfigChanged event. Raised when some connection config is changed.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.Create(System.String)">
            <summary>
            Create Connection Config By Provider Name
            </summary>
            <param name="providerName">Provider Name</param>
            <returns>NDbConfig's Instance</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.GetProviderNames">
            <summary>
            Get Provider Names
            </summary>
            <returns>ConnectionConfig Provider's Names</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.GetDbProviders">
            <summary>
            Get DbProviders
            </summary>
            <returns>List of Avaliable Type that inherited from ConnectionConfig</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.GetDbProviders(System.Boolean)">
            <summary>
            Get DbProviders
            </summary>
            <param name="refresh">refresh cache</param>
            <returns>List of Avaliable Type that inherited from ConnectionConfig</returns>
        </member>
        <member name="P:NLib.Data.NDbConfig.DbProviderName">
            <summary>
            Get Db Provider Name
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.Create">
            <summary>
            Create new NDbConfig Instance
            </summary>
            <returns>Returns NDbConfig Instance.</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.Prepare">
            <summary>
            Prepare Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbConfig.SaveToFile(System.String,NLib.Data.NDbConfig)">
            <summary>
            Quick and dirty save config to file.
            </summary>
            <param name="fileName">Target config file name.</param>
            <param name="config">The config instance to save.</param>
            <returns>Return true if save operation is success.</returns>
        </member>
        <member name="M:NLib.Data.NDbConfig.LoadFromFile(System.String)">
            <summary>
            Quick and dirty load The config from File.
            </summary>
            <param name="fileName">Target config file name.</param>
            <returns>Return new instance of connection config is operation is success.</returns>
        </member>
        <member name="T:NLib.Data.NDbFactory">
            <summary>
            NDbFactory abstract class. The Data Access Factory class.
            </summary>
        </member>
        <member name="T:NLib.Data.NDbFactory.Utils">
            <summary>
            String Checking Utils
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFactory.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFactory.Config">
            <summary>
            Gets config instance.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateConnection">
            <summary>
            Get New Connection Instance
            </summary>
            <returns>
            Returns Connection instance that inherited from DbConnection class.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create Command
            </summary>
            <param name="connection">Connection instance</param>
            <param name="transaction">Transaction instance</param>
            <returns>
            Returns DbCommand instance.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateAdapter(System.Data.Common.DbCommand)">
            <summary>
            Create Data Adaptor for command (Select)
            </summary>
            <param name="command">The command object instance.</param>
            <returns>
            Returns DbDataAdapter instance that match command object.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.DerivedParameters(System.Data.Common.DbCommand)">
            <summary>
            Derived Parameters
            </summary>
            <param name="command">Stored Procedure's command object instance.</param>
            <returns>Returns true if command is successfully retrived.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.AssignParameters(System.Data.Common.DbCommand,System.String[],System.Object[])">
            <summary>
            Assign Parameters
            </summary>
            <param name="command">Stored Procedure's command object instance.</param>
            <param name="parameterNames">array of Parameter's name</param>
            <param name="parameterValues">array of Parameter's value</param>
            <returns>Returns true if successfully assigned parameters</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateParameter(System.Data.Common.DbCommand,System.String,System.Int32,System.Int32,System.Byte,System.Byte,System.Object)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <param name="size">Set the size.</param>
            <param name="precision">Set the precision.</param>
            <param name="scale">Set the scale.</param>
            <param name="value">Set the object to assign to the parameter.</param>
            <returns>Returns the instance object that inherited from DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateParameter(System.String,System.Object)">
            <summary>
            Create New instance of IDbDataParameter.
            </summary>
            <param name="parameterName">The parameter's name.</param>
            <param name="value">The parameter's value.</param>
            <returns>Returns instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetMetadata(System.Data.Common.DbConnection)">
            <summary>
            Get Metadata
            </summary>
            <param name="connection">Connection instance</param>
            <returns>List of all avaliable metadata from provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetRestrictions(System.Data.Common.DbConnection,NLib.Data.DbMetaData)">
            <summary>
            Get Restriction for specificed Metadata
            </summary>
            <param name="connection">Connection instance</param>
            <param name="value">specificed Metadata to find restriction information</param>
            <returns>List of restriction information related to specificed Metadata</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetSchema(System.Data.Common.DbConnection,NLib.Data.DbMetaData,NLib.Data.DbRestriction[])">
            <summary>
            Get Schema. This Method is used for Get Schema information for specificed Meta Data information.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="value">specificed Metadata to find information</param>
            <param name="restrictions">Restriction Array</param>
            <returns>Information about specificed metadata</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetTables(System.Data.Common.DbConnection,System.String)">
            <summary>
            Get Tables (and views)
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Tables/Views</param>
            <returns>List of all avaliable Tables/Views from provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetProcedures(System.Data.Common.DbConnection,System.String)">
            <summary>
            Get Procedures.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Stored Procedures</param>
            <returns>Returns List of Stored Procedure's name.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetProcedureInfo(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
            Gets Stored Procedure Information.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Stored Procedure</param>
            <param name="procedureName">The Stored Procedure Name.</param>
            <returns>Returns the Stored Procedure Information.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateParameter(System.Data.Common.DbCommand,System.String,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <param name="size">Set the size.</param>
            <param name="precision">Set the precision.</param>
            <param name="scale">Set the scale.</param>
            <returns>Returns the instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateParameter(System.Data.Common.DbCommand,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <param name="size">Set the size.</param>
            <param name="value">Set the object to assign to the parameter.</param>
            <returns>Returns the instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateParameter(System.Data.Common.DbCommand,System.String,System.Int32,System.Int32)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <param name="size">Set the size.</param>
            <returns>Returns the instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateParameter(System.Data.Common.DbCommand,System.String,System.Int32,System.Object)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <param name="value">Set the object to assign to the parameter.</param>
            <returns>Returns the instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.CreateParameter(System.Data.Common.DbCommand,System.String,System.Int32)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <returns>Returns the instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.Init">
            <summary>
            Init Factory. This method should call before main form is initialized.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFactory.SetConfig(NLib.Data.NDbConfig)">
            <summary>
            Set config instance.
            </summary>
            <param name="value">The config instance.</param>
        </member>
        <member name="M:NLib.Data.NDbFactory.ChangeType(System.Data.DbType)">
            <summary>
            Change Type.
            </summary>
            <param name="dbType">The DbType value.</param>
            <returns>Returns .NET type that match specificed DbType.</returns>
        </member>
        <member name="P:NLib.Data.NDbFactory.HasConnectionTimeout">
            <summary>
            Checks has connection timeout.
            </summary>
            <returns>Returns true if the derived class allow to set connection timeout.</returns>
        </member>
        <member name="P:NLib.Data.NDbFactory.ConnectionTimeout">
            <summary>
            Gets Connection Timeout.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFactory.HasCommandTimeout">
            <summary>
            Checks has command timeout.
            </summary>
            <returns>Returns true if the derived class allow to set command timeout.</returns>
        </member>
        <member name="P:NLib.Data.NDbFactory.CommandTimeout">
            <summary>
            Gets Command Timeout.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFactory.DoConnected(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            DoConnected method. This method should call after connected.
            </summary>
            <param name="connection">The connection instance.</param>
            <param name="transaction">The transaction instance.</param>
        </member>
        <member name="M:NLib.Data.NDbFactory.OnConnected(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            OnConnected method. This method will call after connected.
            </summary>
            <param name="connection">The connection instance.</param>
            <param name="transaction">The transaction instance.</param>
        </member>
        <member name="P:NLib.Data.NDbFactory.Formatter">
            <summary>
            Gets The Formatter instance.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetParameterPrefix">
            <summary>
            Get Parameter Prefix. 
            Default value depend on implements of formatter instance. 
            If no implement string.Empty returns.
            </summary>
            <returns>Returns string that represent parameter prefix.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.RequiredSPInputParameterPrefix">
            <summary>
            Checks is required parameter prefix for input parameter.
            </summary>
            <returns>Returns true if required.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.RequiredSPOutputParameterPrefix">
            <summary>
            Checks is required parameter prefix for output parameter.
            </summary>
            <returns>Returns true if required.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetDefaultReturnParameterName">
            <summary>
            Get Default Return parameter's name. 
            Default value depend on implements of formatter instance. 
            If no implement null value returns.
            </summary>
            <returns>Returns string that represent default parameter name.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetProviderDataTypes(System.Data.Common.DbConnection)">
            <summary>
            Get Provider DataTypes. This method is used for Get all DataTypes for the current data provider.
            </summary>
            <param name="connection">Connection instance.</param>
            <returns>List of Provider's datatypes</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetReservedwords(System.Data.Common.DbConnection)">
            <summary>
            Get Reserved words. This method is used for Get all reserved words for the current data provider.
            </summary>
            <param name="connection">Connection instance.</param>
            <returns>List of Provider's Reserved words</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetSchemaTable(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            Get Schema Table. This method is used to retrived Schema information about specificed
            Command i.e. column information.
            </summary>
            <param name="command">Command object that already initialized parameters</param>
            <param name="transaction">Transaction instance</param>
            <returns>Result Schema Table</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetTasks">
            <summary>
            Gets Supported Task.
            </summary>
            <returns>Returns list of all avaliable supported tasks.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.SetDateFormat(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Set Date Format.
            </summary>
            <param name="connection">The connection instance.</param>
            <param name="transaction">Transaction instance</param>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetServerDate(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get Server Date.
            </summary>
            <param name="connection">The connection instance.</param>
            <param name="transaction">Transaction instance</param>
            <returns>Result Current DateTime.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetDate(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get Date Internal based on config setting.
            </summary>
            <param name="connection">The connection instance.</param>
            <param name="transaction">Transaction instance</param>
            <returns>Result Current DateTime.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory.GetCurrentDate(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Gets Current DateTime.
            </summary>
            <param name="connection">The connection instance.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result Current DateTime.</returns>
        </member>
        <member name="T:NLib.Data.NDbFactory`6">
            <summary>
            NDbFactory (generic) class. This abstract class is provide generic version of
            NDbFactory that used as base class for all database object's factories.
            </summary>
            <typeparam name="TConnection">The DbConnection Type.</typeparam>
            <typeparam name="TTransaction">The DbTransaction Type.</typeparam>
            <typeparam name="TCommand">The DbCommand Type.</typeparam>
            <typeparam name="TParameter">The DbParameter Type.</typeparam>
            <typeparam name="TAdaptor">The DbDataAdaptor Type.</typeparam>
            <typeparam name="TBuilder">The DbCommandBuilder Type.</typeparam>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.CanCreateConnection">
            <summary>
            Overrides to handle the validation logic to check the prerequisition
            for initialize the connection intance.
            </summary>
            <returns>Returns true if the can create the connection instance.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.OnDerivedDbParameters(`2)">
            <summary>
            Overrides to customized the parameter's characteristic after 
            DerivedParameters is called. Note that the _DerivedDbParameters method
            is call static method DeriveParameters on the DbBuilder object so 
            if the DbBuilder is not contains DeriveParameters then no parameters is derived
            so the user code should handle whne the DbBuilder is not contains static method 
            DeriveParameters.
            </summary>
            <param name="command">The command instance that parameters is derived.</param>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.SetProviderDbTypeID(`3,System.Int32)">
            <summary>
            Set the provide db type id to the parameter object.
            </summary>
            <param name="parameter">The parameter object.</param>
            <param name="providerDbTypeID">The provide type id.</param>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetTableSchemaInfo(System.String)">
            <summary>
            Get Table Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetViewSchemaInfo(System.String)">
            <summary>
            Get View Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._CreateDbConnection">
            <summary>
            Get New Connection Instance (internl used).
            </summary>
            <returns>
            Returns Connection instance that inherited from DbConnection class.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._CreateDbCommand(`0,`1)">
            <summary>
            Create Command (internl used).
            </summary>
            <param name="connection">Connection instance</param>
            <param name="transaction">Transaction instance</param>
            <returns>
            Returns DbCommand instance.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._CreateDbAdapter(`2)">
            <summary>
            Create Data Adaptor for command (Select)
            </summary>
            <param name="command">The command object instance.</param>
            <returns>
            Returns DbDataAdapter instance that match command object.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._DerivedDbParameters(`2)">
            <summary>
            Derived Parameters
            </summary>
            <param name="command">Stored Procedure's command object instance.</param>
            <returns>Returns true if command is successfully retrived.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._AssignDbParameters(`2,System.String[],System.Object[])">
            <summary>
            Assign Parameters.
            </summary>
            <param name="command">Stored Procedure's command object instance.</param>
            <param name="parameterNames">array of Parameter's name</param>
            <param name="parameterValues">array of Parameter's value</param>
            <returns>Returns true if successfully assigned parameters</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._CreateDbParameter(`2,System.String,System.Int32,System.Int32,System.Byte,System.Byte,System.Object)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <param name="size">Set the size.</param>
            <param name="precision">Set the precision.</param>
            <param name="scale">Set the scale.</param>
            <param name="value">Set the object to assign to the parameter.</param>
            <returns>Returns the instance object that inherited from DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._CreateDbParameter(System.String,System.Object)">
            <summary>
            Create New instance of DbParameter.
            </summary>
            <param name="parameterName">The parameter's name.</param>
            <param name="value">The parameter's value.</param>
            <returns>Returns instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._GetDbMetadata(`0)">
            <summary>
            Get Metadata
            </summary>
            <param name="connection">Connection instance</param>
            <returns>List of all avaliable metadata from provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._GetDbRestrictions(`0,NLib.Data.DbMetaData)">
            <summary>
            Get Restriction for specificed Metadata
            </summary>
            <param name="connection">Connection instance</param>
            <param name="value">specificed Metadata to find restriction information</param>
            <returns>List of restriction information related to specificed Metadata</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._GetDbSchema(`0,NLib.Data.DbMetaData,NLib.Data.DbRestriction[])">
            <summary>
            Get Schema. This Method is used for Get Schema information for specificed Meta Data information.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="value">specificed Metadata to find information</param>
            <param name="restrictions">Restriction Array</param>
            <returns>Information about specificed metadata</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._GetDbTables(`0,System.String)">
            <summary>
            Get Tables (and views)
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Tables/Views</param>
            <returns>List of all avaliable Tables/Views from provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetProcedureSchemaInfo(System.String)">
            <summary>
            GetProcedureSchemaInfo
            </summary>
            <param name="owner">The owner.</param>
            <returns>Returns ProcedureSchemaInfo instance.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._GetProcedures(`0,System.String)">
            <summary>
            Get Procedure Names.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Stored Procedures</param>
            <returns>Returns List of Stored Procedure's name.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6._GetProcedureInfo(`0,System.String,System.String)">
            <summary>
            Gets Stored Procedure Information.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Stored Procedure</param>
            <param name="procedureName">The Stored Procedure Name.</param>
            <returns>Returns the Stored Procedure Information.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.CreateConnection">
            <summary>
            Get New Connection Instance.
            </summary>
            <returns>
            Returns Connection instance that inherited from DbConnection class.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.CreateCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create Command.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="transaction">Transaction instance</param>
            <returns>
            Returns DbCommand instance.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.CreateAdapter(System.Data.Common.DbCommand)">
            <summary>
            Create Data Adaptor for command (Select)
            </summary>
            <param name="command">The command object instance.</param>
            <returns>
            Returns DbDataAdapter instance that match command object.
            </returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.DerivedParameters(System.Data.Common.DbCommand)">
            <summary>
            Derived Parameters
            </summary>
            <param name="command">Stored Procedure's command object instance.</param>
            <returns>Returns true if command is successfully retrived.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.AssignParameters(System.Data.Common.DbCommand,System.String[],System.Object[])">
            <summary>
            Assign Parameters
            </summary>
            <param name="command">Stored Procedure's command object instance.</param>
            <param name="parameterNames">array of Parameter's name</param>
            <param name="parameterValues">array of Parameter's value</param>
            <returns>Returns true if successfully assigned parameters</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.CreateParameter(System.Data.Common.DbCommand,System.String,System.Int32,System.Int32,System.Byte,System.Byte,System.Object)">
            <summary>
            Create Parameter. 
            Used this method instead of call create parameter directly from DbCommand.
            </summary>
            <param name="command">The command object instance.</param>
            <param name="parameterName">The parameter's name.</param>
            <param name="providerDbTypeID">The Provider DataType ID</param>
            <param name="size">Set the size.</param>
            <param name="precision">Set the precision.</param>
            <param name="scale">Set the scale.</param>
            <param name="value">Set the object to assign to the parameter.</param>
            <returns>Returns the instance object that inherited from DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.CreateParameter(System.String,System.Object)">
            <summary>
            Create New instance of DbParameter.
            </summary>
            <param name="parameterName">The parameter's name.</param>
            <param name="value">The parameter's value.</param>
            <returns>Returns instance of DbParameter.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetMetadata(System.Data.Common.DbConnection)">
            <summary>
            Get Metadata
            </summary>
            <param name="connection">Connection instance</param>
            <returns>List of all avaliable metadata from provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetRestrictions(System.Data.Common.DbConnection,NLib.Data.DbMetaData)">
            <summary>
            Get Restriction for specificed Metadata
            </summary>
            <param name="connection">Connection instance</param>
            <param name="value">specificed Metadata to find restriction information</param>
            <returns>List of restriction information related to specificed Metadata</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetSchema(System.Data.Common.DbConnection,NLib.Data.DbMetaData,NLib.Data.DbRestriction[])">
            <summary>
            Get Schema. This Method is used for Get Schema information for specificed Meta Data information.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="value">specificed Metadata to find information</param>
            <param name="restrictions">Restriction Array</param>
            <returns>Information about specificed metadata</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetTables(System.Data.Common.DbConnection,System.String)">
            <summary>
            Get Tables (and views)
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Tables/Views</param>
            <returns>List of all avaliable Tables/Views from provider.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetProcedures(System.Data.Common.DbConnection,System.String)">
            <summary>
            Get Procedures.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Stored Procedures</param>
            <returns>Returns List of Stored Procedure's name.</returns>
        </member>
        <member name="M:NLib.Data.NDbFactory`6.GetProcedureInfo(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
            Gets Stored Procedure Information.
            </summary>
            <param name="connection">Connection instance</param>
            <param name="owner">Owner of Stored Procedure</param>
            <param name="procedureName">The Stored Procedure Name.</param>
            <returns>Returns the Stored Procedure Information.</returns>
        </member>
        <member name="T:NLib.Data.NDbFormatter">
            <summary>
            NDbFormatter class. Provide ability to format various value that can changed later by
            the factory class.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFormatter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFormatter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.DateTime)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.DateTime,System.Boolean)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <param name="dateOnly">Use only date part.</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.String)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Decimal)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Single)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.SByte)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Int16)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Int32)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Int64)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Byte)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.UInt16)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.UInt32)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.UInt64)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Boolean)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Guid)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.ToSqlString(System.Object)">
            <summary>
            ToSqlString.
            </summary>
            <param name="value">object to convert to string</param>
            <returns>string that can used in sql statement</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.SelectIdentity(System.String,System.String)">
            <summary>
            Select Identity.
            </summary>
            <param name="tableName">Target table's name.</param>
            <param name="columnName">Target column's name.</param>
            <returns>Returns query that used to find identity value for specificed column.</returns>
        </member>
        <member name="M:NLib.Data.NDbFormatter.SelectMax(System.String,System.String[],System.String[],System.String,System.String)">
            <summary>
            Select Max(FieldName) - should call before inserted.
            </summary>
            <param name="tableName">Target Table.</param>
            <param name="compoundKeys">Compound Keys not include target Field Name.</param>
            <param name="compoundValues">Compound Key values.</param>
            <param name="columnName">Target Column Name to get max value.</param>
            <param name="criteria">Optional Criteria.</param>
            <returns>Returns the qyert for select max.</returns>
        </member>
        <member name="P:NLib.Data.NDbFormatter.GetTestQuery">
            <summary>
            Gets or sets delegate method for get query that used in test connection process.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.GetServerDateQuery">
            <summary>
            Gets or sets delegate method for get query for get server datetime.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.GetParameterPrefix">
            <summary>
            Gets or sets delegate method for get prefix for stored procedure's parameter.
            The delegate should returns the stored procedure's parameter prefix as result.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.GetDefaultReturnParameterName">
            <summary>
            Gets or sets delegate method for get default parameter name when call stored procedure.
            The delegate should returns the default stored procedure's parameter name as result.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.FormatParameterName">
            <summary>
            Gets or sets delegate method for format parameter's name (normally add prefix befor name).
            The delegate input is parameter name (without prefix) and result is auto append prefix in front
            of the name.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.RequiredSPInputParameterPrefix">
            <summary>
            Gets or sets delegate method for check need prefix for stored procedure's input parameter.
            The delegate should returns true or false. Default is true.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.RequiredSPOutputParameterPrefix">
            <summary>
            Gets or sets delegate method for check need prefix for stored procedure's output parameter.
            The delegate should returns true or false. Default is true.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.FormatTableOrViewName">
            <summary>
            Gets or sets delegate method for format Table or View Name.
            The delegate input is owner, table name and result is 
            full format table name.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.FormatColumnName">
            <summary>
            Gets or sets delegate method for format Column's Name.
            The delegate input is owner, table name, column name and result is 
            full format column name.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.DateTimeToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.StringToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.DecimalToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.FloatToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.SByteToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.Int16ToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.Int32ToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.Int64ToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.ByteToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.UInt16ToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.UInt32ToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.UInt64ToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.BooleanToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.GuidToSqlString">
            <summary>
            Gets or sets delegate method for format value to string that can used in sql query.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.SelectIdentityQuery">
            <summary>
            Gets or sets delegate method for get query that used in test select identity.
            The delegate input is table name, column name and result is string that represent query 
            for get identity value.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbFormatter.SelectMaxQuery">
            <summary>
            Gets or sets delegate method for get query that used in test select max key.
            The delegate input is table name, list of column name, , list of column value, 
            column name (for get max value), criteria (for filter) and result is string that 
            represent query for get max value for target column.
            </summary>
        </member>
        <member name="T:NLib.Data.NDbTask">
            <summary>
            NDbTask (abstract class)
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTask.ToString">
            <summary>
            Display String for Instance see Object.ToString()
            </summary>
            <returns>see Object.ToString()</returns>
        </member>
        <member name="M:NLib.Data.NDbTask.GetTaskName">
            <summary>
            Get Task Name
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.NDbTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="M:NLib.Data.NDbTask.Create(System.String)">
            <summary>
            Create DbTask instance By Task Name.
            </summary>
            <param name="taskName">Task's Name.</param>
            <returns>Returns DbTask's Instance.</returns>
        </member>
        <member name="M:NLib.Data.NDbTask.GetTaskNames">
            <summary>
            Gets Task Names.
            </summary>
            <returns>Returns Avaliable Task's Names.</returns>
        </member>
        <member name="M:NLib.Data.NDbTask.GetTasks">
            <summary>
            Gets Tasks.
            </summary>
            <returns>Returns List of Avaliable Type that inherited from NDbTask.</returns>
        </member>
        <member name="M:NLib.Data.NDbTask.GetTasks(System.Boolean)">
            <summary>
            Gets Tasks.
            </summary>
            <param name="refresh">true for refresh cache</param>
            <returns>Returns List of Avaliable Type that inherited from NDbTask.</returns>
        </member>
        <member name="P:NLib.Data.NDbTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.NDbTaskParameter">
            <summary>
            NDbTask Parameter (abstract class).
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTaskParameter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTaskParameter.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTaskParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="T:NLib.Data.NDbTaskResult">
            <summary>
            NDbTask Result.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTaskResult.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDbTaskResult.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="result">The Result.</param>
        </member>
        <member name="M:NLib.Data.NDbTaskResult.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="result">The Result.</param>
            <param name="completed">The completed flag.</param>
        </member>
        <member name="M:NLib.Data.NDbTaskResult.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.NDbTaskResult.ResultText">
            <summary>
            Gets or sets Result.
            </summary>
        </member>
        <member name="P:NLib.Data.NDbTaskResult.Completed">
            <summary>
            Gets or sets Is Task Process completed.
            </summary>
        </member>
        <member name="T:NLib.Data.NullSupportMode">
            <summary>
            Null value support enum
            </summary>
        </member>
        <member name="F:NLib.Data.NullSupportMode.Allow">
            <summary>
            Null value is allow
            </summary>
        </member>
        <member name="F:NLib.Data.NullSupportMode.NotAllow">
            <summary>
            Null value is not allow
            </summary>
        </member>
        <member name="F:NLib.Data.NullSupportMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:NLib.Data.SearchSupportMode">
            <summary>
            Search mode support enum
            </summary>
        </member>
        <member name="F:NLib.Data.SearchSupportMode.NotSupportSearch">
            <summary>
            Not Supprt Searching
            </summary>
        </member>
        <member name="F:NLib.Data.SearchSupportMode.SupportSearchInLikeClauseOnly">
            <summary>
            Support search in Like clause only
            </summary>
        </member>
        <member name="F:NLib.Data.SearchSupportMode.SupportBasicSearch">
            <summary>
            Support search in all condition except in Like clause
            </summary>
        </member>
        <member name="F:NLib.Data.SearchSupportMode.Searchable">
            <summary>
            Full searchable
            </summary>
        </member>
        <member name="T:NLib.Data.SchemaExceptionEventHandler">
            <summary>
            Delegate for Schema Exception
            </summary>
        </member>
        <member name="T:NLib.Data.DbConnectionException">
            <summary>
            DbConnection Exception
            </summary>
        </member>
        <member name="M:NLib.Data.DbConnectionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbConnectionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:NLib.Data.DbConnectionException.CreateConnectionIsNull">
            <summary>
            Create Connection Is Null Exception
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Data.DbConnectionException.CreateConnectionIsClose">
            <summary>
            Create Connection Is Close Exception
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLib.Data.DbSchemaObject">
            <summary>
            Db Schema Object (abstract)
            </summary>
        </member>
        <member name="M:NLib.Data.DbSchemaObject.Lock">
            <summary>
            Lock
            </summary>
        </member>
        <member name="M:NLib.Data.DbSchemaObject.Unlock">
            <summary>
            Unlock
            </summary>
        </member>
        <member name="P:NLib.Data.DbSchemaObject.Locked">
            <summary>
            Is object lock
            </summary>
        </member>
        <member name="T:NLib.Data.DbMetaData">
            <summary>
            Db Meta Data
            </summary>
        </member>
        <member name="M:NLib.Data.DbMetaData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbMetaData.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="collectionName"></param>
        </member>
        <member name="M:NLib.Data.DbMetaData.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="collectionName"></param>
            <param name="noOfRestriction"></param>
            <param name="noOfIdentifierParts"></param>
        </member>
        <member name="M:NLib.Data.DbMetaData.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.DbMetaData.Information">
            <summary>
            Get Information
            </summary>
        </member>
        <member name="P:NLib.Data.DbMetaData.CollectionName">
            <summary>
            Get/Set Collection Name
            </summary>
        </member>
        <member name="P:NLib.Data.DbMetaData.NoOfRestriction">
            <summary>
            Get/Set No Of Restriction
            </summary>
        </member>
        <member name="P:NLib.Data.DbMetaData.NoOfIdentifierParts">
            <summary>
            Get/Set No Of Identifier Parts
            </summary>
        </member>
        <member name="T:NLib.Data.DbRestriction">
            <summary>
            Db Restriction
            </summary>
        </member>
        <member name="M:NLib.Data.DbRestriction.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbRestriction.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ordinal">Ordinal</param>
            <param name="restrictionName">Restriction Name</param>
            <param name="value">Restriction Value</param>
        </member>
        <member name="M:NLib.Data.DbRestriction.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.DbRestriction.Ordinal">
            <summary>
            Get/Set Ordinal
            </summary>
        </member>
        <member name="P:NLib.Data.DbRestriction.RestrictionName">
            <summary>
            Get/Set Restriction Name
            </summary>
        </member>
        <member name="P:NLib.Data.DbRestriction.Value">
            <summary>
            Get/Set Restriction Value
            </summary>
        </member>
        <member name="T:NLib.Data.DbProviderDataType">
            <summary>
            Db Provider DataType Class that contain DataType information that retrived from database's driver like ODBC and OLEDB Provider
            this class is support for structure of ODBC 2.0
            </summary>
        </member>
        <member name="M:NLib.Data.DbProviderDataType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbProviderDataType.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.TypeName">
            <summary>
            Get/Set TypeName. 
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	Provider-specific data type name.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	This property is Data source–dependent data-type name.
            	for example, "CHAR()", "VARCHAR()", "MONEY", "LONG VARBINARY", or "CHAR ( ) FOR BIT DATA".
            	Applications must use this name in CREATE TABLE and ALTER TABLE statements.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.ProviderDbType">
            <summary>
            Get/Set Provider DbType ID (-1 for unknown)
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	The indicator of the data type
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	SQL data type. This can be an ODBC SQL data type or a driver-specific SQL data type.
            	For datetime or interval data types, this column returns the concise data type 
            	(such as SQL_TYPE_TIME or SQL_INTERVAL_YEAR_TO_MONTH). 
            	For a list of valid ODBC SQL data types, see SQL Data Types in ODBC Reference Appendix D: Data Types. 
            	For information about driver-specific SQL data types, see the ODBC Reference driver’s documentation.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.ColumnSize">
            <summary>
            Get/Set Column Size (maximum). 
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	The length of a non-numeric column or parameter refers to either the maximum or the length 
            	defined for this type by the provider. For character data, this is the maximum or defined length 
            	in characters. For datetime data types, this is the length of the string representation 
            	(assuming the maximum allowed precision of the fractional seconds component). 
            	If the data type is numeric, this is the upper bound on the maximum precision of the data type. 
            	For the maximum precision of all numeric data types, 
            	see "Precision of Numeric Data Types" in OLEDB API Reference Appendix A.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	if provider return result is null 0 will be used insteed.
            	The maximum column size that the server supports for this data type. 
            	For numeric data, this is the maximum precision. For string data, 
            	this is the length in characters. For datetime data types, this is the length in characters 
            	of the string representation (assuming the maximum allowed precision of the fractional seconds 
            	component). NULL is returned for data types where column size is not applicable. 
            	For interval data types, this is the number of characters in the character representation of 
            	the interval literal (as defined by the interval leading precision; see Interval Data Type Length" 
            	in ODBC Reference Appendix D: Data Types). 
            	For more information on column size, see Column Size, Decimal Digits, Transfer Octet Length, 
            	and Display Size in ODBC Reference Appendix D: Data Types.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.CreateFormat">
            <summary>
            Get/Set Format that used for Type create or alter.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.CreateParameters">
            <summary>
            Get/Set Paramaters that used for Type create or alter.
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	The creation parameters are specified by the consumer when creating a column of this data type. 
            	For example, the SQL data type DECIMAL needs a precision and a scale. In this case, 
            	the creation parameters might be the string "precision,scale". In a text command to create a 
            	DECIMAL column with a precision of 10 and a scale of 2, the value of the 
            	TYPE_NAME column might be DECIMAL() and the complete type specification would be DECIMAL(10,2). 
            	The creation parameters appear as a comma-separated list of values, in the order they are to 
            	be supplied and with no surrounding parentheses. If a creation parameter is length, 
            	maximum length, precision, scale, seed, or increment "length", "max length", "precision", "scale", 
            	"seed", and "increment" should be used, respectively. 
            	If the creation parameters are some other value, it is provider-specific what text is used 
            	to describe the creation parameter. If the data type requires creation parameters, "()" 
            	usually appears in the type name. This indicates the position at which to insert the 
            	creation parameters. If the type name does not include "()", the creation parameters are enclosed 
            	in parentheses and appended to the data type name.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	A list of keywords, separated by commas, corresponding to each parameter that the application 
            	may specify in parentheses when using the name that is returned in the TYPE_NAME field. 
            	The keywords in the list can be any of the following: length, precision, or scale. 
            	They appear in the order that the syntax requires them to be used. 
            	For example, 
            		CREATE_PARAMS for DECIMAL would be "precision,scale"; 
            		CREATE_PARAMS for VARCHAR would equal "length." 
            		NULL is returned if there are no parameters for the data type definition; for example, INTEGER. 
            	The driver supplies the CREATE_PARAMS text in the language of the country/region where it is used.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.DataType">
            <summary>
            Get/Set .NET data type.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsAutoIncrementable">
            <summary>
            Get/Set Is Auto Incrementable.
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            		VARIANT_TRUE—Values of this type can be autoincrementing. 
            		VARIANT_FALSE—Values of this type cannot be autoincrementing.
            		Note.
            		If this value is VARIANT_TRUE, whether or not a column of this type is always autoincrementing 
            		depends on the provider's DBPROP_COL_AUTOINCREMENT column property. 
            		If the DBPROP_COL_AUTOINCREMENT property is read/write, whether or not a column of this type 
            		is autoincrementing depends on the setting of the DBPROP_COL_AUTOINCREMENT property. 
            		If DBPROP_COL_AUTOINCREMENT is a read-only property, either all or none of the columns of 
            		this type are autoincrementing.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	Whether the data type is autoincrementing: 
            		SQL_TRUE if the data type is autoincrementing.
            		SQL_FALSE if the data type is not autoincrementing.
            		NULL is returned if the attribute is not applicable to the data type or 
            		the data type is not numeric. An application can insert values into a column having 
            		this attribute, but typically cannot update the values in the column. 
            		When an insert is made into an auto-increment column, a unique value is inserted into 
            		the column at insert time. The increment is not defined, but is data source–specific. 
            		An application should not assume that an auto-increment column starts at 
            		any particular point or increments by any particular value.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsBestMatch">
            <summary>
            Get/Set Is Best Match Type. false if unknown result found.
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	VARIANT_TRUE — The data type is the best match between all data types in the data store 
            		and the OLE DB data type indicated by the value in the DATA_TYPE column. 
            	VARIANT_FALSE — The data type is not the best match.
            	
            	For each set of rows in which the value of the DATA_TYPE column is the same, 
            	the BEST_MATCH column is set to VARIANT_TRUE in only one row.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsCaseSensitive">
            <summary>
            Get/Set is character data type is case-sensitive in collations and comparisons
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	Return value should be
            		VARIANT_TRUE—The data type is a character type and is case-sensitive. 
            		VARIANT_FALSE—The data type is not a character type or is not case-sensitive.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	Whether a character data type is case-sensitive in collations and comparisons: 
            		SQL_TRUE if the data type is a character data type and is case-sensitive.
            		SQL_FALSE if the data type is not a character data type or is not case-sensitive.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsFixedLength">
            <summary>
            Get/Set Is Fixed Length data type
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	VARIANT_TRUE — Columns of this type created by the data definition language (DDL) 
            		will be of fixed length. 
            	VARIANT_FALSE — Columns of this type created by the DDL will be of variable length.
            	
            	If the field is NULL, it is not known whether the provider will map this field with a 
            	fixed-length or variable-length column.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsFixedPrecisionScale">
            <summary>
            Get/Set is data type is fixed precision-scale
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	Whether the data type has predefined fixed precision and scale
            		VARIANT_TRUE — The data type has a fixed precision and scale. 
            		VARIANT_FALSE—The data type does not have a fixed precision and scale.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	Whether the data type has predefined fixed precision and scale (which are data source–specific), 
            	such as a money data type: 
            		SQL_TRUE if it has predefined fixed precision and scale.
            		SQL_FALSE if it does not have predefined fixed precision and scale.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsLong">
            <summary>
            Get/Set Is Long (binary) Data Type
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	VARIANT_TRUE — The data type is a BLOB that contains very long data; the definition of 
            		very long data is provider-specific. 
            	VARIANT_FALSE — The data type is a BLOB that does not contain very long data or is not a BLOB.
            	
            	This value determines the setting of the DBCOLUMNFLAGS_ISLONG flag returned by 
            	GetColumnInfo in IColumnsInfo and GetParameterInfo in ICommandWithParameters. 
            	For more information, see GetColumnInfo, GetParameterInfo, 
            	and "Accessing BLOB Data" in Chapter 7: Blobs and COM Objects.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.Nullable">
            <summary>
            Get/Set Type is Null support.
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	Return value should be
            		VARIANT_TRUE — The data type is nullable. 
            		VARIANT_FALSE — The data type is not nullable.
            		NULL — It is not known whether the data type is nullable.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	Whether the data type accepts a NULL value: 
            		SQL_NO_NULLS if the data type does not accept NULL values.
            		SQL_NULLABLE if the data type accepts NULL values.
            		SQL_NULLABLE_UNKNOWN if it is not known whether the column accepts NULL values.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.Searchable">
            <summary>
            Get/Set  how the data type is used in a WHERE clause
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	If the provider supports ICommandText, this column is an integer indicating the searchability of a data type; otherwise, this column is NULL. One of the following: 
            		DB_UNSEARCHABLE — The data type cannot be used in a WHERE clause.
            		DB_LIKE_ONLY — The data type can be used in a WHERE clause only with the LIKE predicate.
            		DB_ALL_EXCEPT_LIKE — The data type can be used in a WHERE clause with all comparison operators except LIKE.
            		DB_SEARCHABLE — The data type can be used in a WHERE clause with any comparison operator.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	How the data type is used in a WHERE clause: 
            		SQL_PRED_NONE if the column cannot be used in a WHERE clause. 
            			(This is the same as the SQL_UNSEARCHABLE value in ODBC 2.x.)
            		SQL_PRED_CHAR if the column can be used in a WHERE clause, 
            			but only with the LIKE predicate. (This is the same as the SQL_LIKE_ONLY value in ODBC 2.x.)
            		SQL_PRED_BASIC if the column can be used in a WHERE clause with all the comparison operators 
            			except LIKE (comparison, quantified comparison, BETWEEN, DISTINCT, IN, MATCH, and UNIQUE). 
            			(This is the same as the SQL_ALL_EXCEPT_LIKE value in ODBC 2.x.)
            		SQL_SEARCHABLE if the column can be used in a WHERE clause with any comparison operator.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsUnsigned">
            <summary>
            Get/Set is data type is unsigned data type (for numeric data type only the other data type alway 
            set to true)
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	Whether the data type is unsigned: 
            		VARIANT_TRUE—The data type is unsigned. 
            		VARIANT_FALSE—The data type is signed.
            		NULL—Not applicable to data type.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	Whether the data type is unsigned: 
            		SQL_TRUE if the data type is unsigned.
            		SQL_FALSE if the data type is signed.
            		NULL is returned if the attribute is not applicable to the data type or 
            		the data type is not numeric.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.MinimumScale">
            <summary>
            Get/Set Minimum Scale (-1 for data type that not support scale)
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            If the type indicator is DBTYPE_VARNUMERIC, DBTYPE_DECIMAL, or DBTYPE_NUMERIC, this is the 
            minimum number of digits allowed to the right of the decimal point. Otherwise, this is NULL.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            The minimum scale of the data type on the data source. If a data type has a fixed scale, 
            the MINIMUM_SCALE and MAXIMUM_SCALE columns both contain this value. For example, 
            an SQL_TYPE_TIMESTAMP column might have a fixed scale for fractional seconds. 
            NULL is returned where scale is not applicable. For more information, see Column Size, Decimal Digits, 
            Transfer Octet Length, and Display Size in Appendix D: Data Types.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.MaximumScale">
            <summary>
            Get/Set Maximum Scale (-1 for data type that not support scale)
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            If the type indicator is DBTYPE_VARNUMERIC, DBTYPE_DECIMAL, or DBTYPE_NUMERIC, this is the 
            maximum number of digits allowed to the right of the decimal point. Otherwise, this is NULL.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            The maximum scale of the data type on the data source. 
            NULL is returned where scale is not applicable. If the maximum scale is not defined separately 
            on the data source, but is instead defined to be the same as the maximum precision, 
            this column contains the same value as the COLUMN_SIZE column. For more information, 
            see Column Size, Decimal Digits, Transfer Octet Length, and Display Size in Appendix D: Data Types.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsSupportScale">
            <summary>
            Get whether that data type is support scale
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsConcurrencyType">
            <summary>
            Get/Set is data type is Concurrency Type.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.IsLiteralSupported">
            <summary>
            Get/Set is data type is Support Literal.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.LiteralPrefix">
            <summary>
            Get/Set Literal Prefix that used for datatype.
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	Character or characters used to prefix a literal of this type in a text command.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	Character or characters used to prefix a literal; 
            	for example, a single quotation mark (') for character data types or 0x for binary data types; 
            	NULL is returned for data types where a literal prefix is not applicable.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="P:NLib.Data.DbProviderDataType.LiteralSuffix">
            <summary>
            Get/Set Literal Suffix that used for datatype.
            <list type="table">
            	<item>
            		<term>OLEDB Note.</term>
            		<description>
            		<para>
            	Character or characters used to suffix a literal of this type in a text command.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>ODBC Note.</term>
            		<description>
            		<para>
            	Character or characters used to terminate a literal; for example, a single quotation mark (') 
            	for character data types; NULL is returned for data types where a literal suffix is not applicable.
            		</para>
            		</description>
            	</item>
            </list>
            </summary>
        </member>
        <member name="T:NLib.Data.DbReservedword">
            <summary>
            Db Reserved word Class
            </summary>
        </member>
        <member name="M:NLib.Data.DbReservedword.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbReservedword.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.DbReservedword.Reservedword">
            <summary>
            Get/Set Reserved word String
            </summary>
        </member>
        <member name="T:NLib.Data.DbTable">
            <summary>
            Db Table
            </summary>
        </member>
        <member name="M:NLib.Data.DbTable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbTable.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tableName">Table Name</param>
            <param name="providerTableType">Provider TableType</param>
        </member>
        <member name="M:NLib.Data.DbTable.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.DbTable.TableName">
            <summary>
            Get/Set Table Name
            </summary>
        </member>
        <member name="P:NLib.Data.DbTable.ProviderTableType">
            <summary>
            Get/Set Provider TableType
            </summary>
        </member>
        <member name="T:NLib.Data.DbColumn">
            <summary>
            DbColumn Class. wrapper the result from GetSchemaTable()
            </summary>
        </member>
        <member name="M:NLib.Data.DbColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbColumn.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.ColumnName">
            <summary>
            Get/Set Column name
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.BaseServerName">
            <summary>
            Get/Set Base ServerName
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.BaseCatalogName">
            <summary>
            Get/Set Base Catalog name. NULL if the provider does not support catalogs.
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.BaseSchemaName">
            <summary>
            Get/Set Base Unqualified schema name. NULL if the provider does not support schemas.
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.BaseTableName">
            <summary>
            Get/Set Base Table Name
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.BaseColumnName">
            <summary>
            Get/Set Base Column name
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.Ordinal">
            <summary>
            Get/Set order of the column
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.ColumnSize">
            <summary>
            Get/Set Column Size
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.NumericPrecision">
            <summary>
            Get/Set Numeric Precision.
            If the column's data type is of a numeric data type other than VARNUMERIC, 
            this is the maximum precision of the column. The precision of columns with a data 
            type of DBTYPE_DECIMAL or DBTYPE_NUMERIC depends on the definition of the column. 
            For the precision of all other numeric data types.
            If the column's data type is not numeric or is VARNUMERIC, this is NULL
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.NumericScale">
            <summary>
            Get/Set Numeric Scale.
            If the column's type indicator is DBTYPE_DECIMAL, DBTYPE_NUMERIC, or DBTYPE_VARNUMERIC, 
            this is the number of digits to the right of the decimal point. Otherwise, this is NULL.
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsUnique">
            <summary>
            Get/Set column is unique
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsKey">
            <summary>
            Get/Set column is Key
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.AllowDbNull">
            <summary>
            Get/Set column can contain null value
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsAliased">
            <summary>
            Get/Set column is aliased
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsExpression">
            <summary>
            Get/Set column is expression
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsIdentity">
            <summary>
            Get/Set column is identity column
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsAutoIncrement">
            <summary>
            Get/Set column is auto increment
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsRowVersion">
            <summary>
            Get/Set column is row version
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsHidden">
            <summary>
            Get/Set column is hidden column
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsLong">
            <summary>
            Get/Set column is long datatype
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.IsReadOnly">
            <summary>
            Get/Set column is readonly
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.ProviderTypeID">
            <summary>
            Get/Set column Provider's Type id
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.DataType">
            <summary>
            Get/Set column DataType (.NET type)
            </summary>
        </member>
        <member name="P:NLib.Data.DbColumn.DataTypeName">
            <summary>
            Get/Set column DataType (.NET type) FullName
            </summary>
        </member>
        <member name="T:NLib.Data.SchemaInfoConvertor`1">
            <summary>
            Schema Info Convertor delegate.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="row">The DataRow that contains metadata attribute.</param>
            <param name="info">The schema info that own the convertor.</param>
            <param name="factory">The caller connection factory.</param>
            <returns>Returns new instance of object that convert from DataRow.</returns>
        </member>
        <member name="T:NLib.Data.SchemaInfo`1">
            <summary>
            Schema Info
            </summary>
            <typeparam name="T">The target object type.</typeparam>
        </member>
        <member name="M:NLib.Data.SchemaInfo`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.SchemaInfo`1.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.SchemaInfo`1.MetaData">
            <summary>
            Gets or sets meta data.
            </summary>
        </member>
        <member name="P:NLib.Data.SchemaInfo`1.Restrictions">
            <summary>
            Gets or sets restriction for the collection.
            </summary>
        </member>
        <member name="P:NLib.Data.SchemaInfo`1.Convert">
            <summary>
            Gets or sets convert callback function to convert from DataRow to target object.
            </summary>
        </member>
        <member name="T:NLib.Data.ProcedureSchemaInfo">
            <summary>
            ProcedureSchemaInfo.
            </summary>
        </member>
        <member name="P:NLib.Data.ProcedureSchemaInfo.Restrictions">
            <summary>
            Gets or sets the Restrictions for Procedures Metadata collection.
            </summary>
        </member>
        <member name="P:NLib.Data.ProcedureSchemaInfo.ProcedureNameColumn">
            <summary>
            Gets or sets the Column's Name in result table that used for identify the
            procedure's name.
            </summary>
        </member>
        <member name="T:NLib.Data.DbProcedureParameterInfo">
            <summary>
            DbProcedureParameterInfo.
            </summary>
        </member>
        <member name="M:NLib.Data.DbProcedureParameterInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.DbProcedureParameterInfo.#ctor(System.String,System.Type,System.Data.ParameterDirection)">
            <summary>
            Constructor.
            </summary>
            <param name="parameterName">Parameter Name.</param>
            <param name="dataType">Parameter Type.</param>
            <param name="direction">Parameter Direction.</param>
        </member>
        <member name="M:NLib.Data.DbProcedureParameterInfo.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureParameterInfo.ParameterName">
            <summary>
            Get/Set Parameter Name
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureParameterInfo.Direction">
            <summary>
            Get/Set Parameter Direction.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureParameterInfo.DataType">
            <summary>
            Get/Set Data Type
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureParameterInfo.DataTypeName">
            <summary>
            Get/Set column DataType (.NET type) FullName
            </summary>
        </member>
        <member name="T:NLib.Data.DbProcedureResultInfo">
            <summary>
            DbProcedureResultInfo.
            </summary>
        </member>
        <member name="M:NLib.Data.DbProcedureResultInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.DbProcedureResultInfo.#ctor(System.String,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="columnName">The Column Name.</param>
            <param name="dataType">The column DataType.</param>
        </member>
        <member name="M:NLib.Data.DbProcedureResultInfo.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureResultInfo.ColumnName">
            <summary>
            Get/Set Column Name
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureResultInfo.DataType">
            <summary>
            Get/Set Data Type
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureResultInfo.DataTypeName">
            <summary>
            Get/Set column DataType (.NET type) FullName
            </summary>
        </member>
        <member name="T:NLib.Data.DbProcedureInfo">
            <summary>
            DbProcedureInfo.
            </summary>
        </member>
        <member name="M:NLib.Data.DbProcedureInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.DbProcedureInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="procedureName">Stored Procedure Name</param>
        </member>
        <member name="M:NLib.Data.DbProcedureInfo.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureInfo.ProcedureName">
            <summary>
            Get/Set Procedure Name
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureInfo.Parameters">
            <summary>
            Gets the parameter list.
            </summary>
        </member>
        <member name="P:NLib.Data.DbProcedureInfo.Results">
            <summary>
            Gets the result list.
            </summary>
        </member>
        <member name="T:NLib.Data.GeneralDbConfig">
            <summary>
            The General Database Config class. Used to wrap around connection string.
            </summary>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.GetUniqueName">
            <summary>
            Define Each Connection Unique Name
            </summary>
            <returns>Unique Name for Connection</returns>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.SetUniqueName(System.String)">
            <summary>
            Set Unique Name.
            </summary>
            <param name="value">The new connection name.</param>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.GetConnectionString">
            <summary>
            Get Connection String.
            </summary>
            <returns>Connection string based on property settings</returns>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.SetConnectionString(System.String)">
            <summary>
            Set Connection String.
            </summary>
            <param name="value">The new connection string.</param>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.CreateFactory">
            <summary>
            Create database factory provider.
            </summary>
            <returns>Returns instance of database factory provider.</returns>
        </member>
        <member name="P:NLib.Data.GeneralDbConfig.UniqueName">
            <summary>
            Gets or sets the connection unique name.
            </summary>
        </member>
        <member name="P:NLib.Data.GeneralDbConfig.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:NLib.Data.GeneralDbConfig.Factory">
            <summary>
            Gets or sets the Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.GetDefaultConnectionName">
            <summary>
            Get Default Connection Name.
            </summary>
            <returns>Returns Unique Default Connection Name.</returns>
        </member>
        <member name="P:NLib.Data.GeneralDbConfig.DbProviderName">
            <summary>
            Get Connection Provider Name.
            </summary>
        </member>
        <member name="M:NLib.Data.GeneralDbConfig.Create">
            <summary>
            Create new NDbConfig Instance.
            </summary>
            <returns>Returns NDbConfig Instance.</returns>
        </member>
        <member name="T:NLib.Data.OracleVersion">
            <summary>
            Oracle's Version
            </summary>
        </member>
        <member name="F:NLib.Data.OracleVersion.Oracle7x">
            <summary>
            Oracle 7.xx
            </summary>
        </member>
        <member name="F:NLib.Data.OracleVersion.Oracle8i">
            <summary>
            Oracle 8i
            </summary>
        </member>
        <member name="F:NLib.Data.OracleVersion.Oracle9i">
            <summary>
            Oracle 9i
            </summary>
        </member>
        <member name="F:NLib.Data.OracleVersion.Oracle10g">
            <summary>
            Oracle 10g
            </summary>
        </member>
        <member name="F:NLib.Data.OracleVersion.Oracle11g">
            <summary>
            Oracle 11g
            </summary>    
        </member>
        <member name="F:NLib.Data.OracleVersion.Oracle12">
            <summary>
            Oracle 12
            </summary>    
        </member>
        <member name="F:NLib.Data.OracleVersion.OracleXE">
            <summary>
            Oracle XE
            </summary>    
        </member>
        <member name="F:NLib.Data.OracleVersion.OracleLite">
            <summary>
            Oracle Lite
            </summary>    
        </member>
        <member name="T:NLib.Data.OracleProtocol">
            <summary>
            The oracle protocol.
            </summary>
        </member>
        <member name="F:NLib.Data.OracleProtocol.ipc">
            <summary>
            IPC. This Protocol type required Key that recommend to used Oracle SID (aka service name).
            </summary>
        </member>
        <member name="F:NLib.Data.OracleProtocol.nmp">
            <summary>
            Named pipes. This Protocol type required Host Name and Pipe name.
            </summary>
        </member>
        <member name="F:NLib.Data.OracleProtocol.sdp">
            <summary>
            SDP. This Protocol type required Host Name and Port Number.
            </summary>
        </member>
        <member name="F:NLib.Data.OracleProtocol.tcp">
            <summary>
            TCP/IP. This Protocol type required Host Name and Port Number.
            </summary>
        </member>
        <member name="F:NLib.Data.OracleProtocol.tcps">
            <summary>
            TCP/IP with SSL. This Protocol type required Host Name and Port Number.
            </summary>
        </member>
        <member name="T:NLib.Data.OracleServerOptions">
            <summary>
            The OracleServerOptions class.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleServerOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleServerOptions.GetHashCode">
            <summary>
            Gets Hash Code.
            </summary>
            <returns>Returns hashcode of current object.</returns>
        </member>
        <member name="M:NLib.Data.OracleServerOptions.Equals(System.Object)">
            <summary>
            Conpare if object is equals.
            </summary>
            <param name="obj">The target objct to compare.</param>
            <returns>Returns true if object is the same.</returns>
        </member>
        <member name="M:NLib.Data.OracleServerOptions.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.Data.OracleServerOptions.HostName">
            <summary>
            Gets or sets Oracle Server Name or Host Name (or IP).
            </summary>
        </member>
        <member name="P:NLib.Data.OracleServerOptions.ServiceName">
            <summary>
            Gets or sets Oracle service name or Oracle SID.
            </summary>
        </member>
        <member name="P:NLib.Data.OracleServerOptions.PortNumber">
            <summary>
            Gets or sets Port Number. Default is 1521.
            </summary>
        </member>
        <member name="P:NLib.Data.OracleServerOptions.Protocol">
            <summary>
            Gets or sets the Oracle Protocol. Default is tcp.
            </summary>
        </member>
        <member name="P:NLib.Data.OracleServerOptions.Version">
            <summary>
            Gets or sets the Oracle Version.
            </summary>
        </member>
        <member name="P:NLib.Data.OracleServerOptions.PipeName">
            <summary>
            Gets or sets Pipe name.
            </summary>
        </member>
        <member name="T:NLib.Data.OracleConfig">
            <summary>
            Oracle Direct Connection Config class. This class will used System.Data.OracleClient to
            connect to database and support automatic assigned TNS without used of oracle client installed.
            This class can used with Oracle 10g and above.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleConfig.GetUniqueName">
            <summary>
            Define Each Connection Unique Name.
            </summary>
            <returns>Unique Name for Connection</returns>
        </member>
        <member name="M:NLib.Data.OracleConfig.GetConnectionString">
            <summary>
            Get Connection String.
            </summary>
            <returns>Connection string based on property settings</returns>
        </member>
        <member name="M:NLib.Data.OracleConfig.CreateFactory">
            <summary>
            Create database factory provider.
            </summary>
            <returns>Returns instance of database factory provider.</returns>
        </member>
        <member name="M:NLib.Data.OracleConfig.GetDefaultOwner">
            <summary>
            Gets the default database object owner.
            </summary>
            <returns>Returns the default database object owner.</returns>
        </member>
        <member name="P:NLib.Data.OracleConfig.DataSource">
            <summary>
            Gets or sets Oracle Connection Options.
            </summary>
        </member>
        <member name="P:NLib.Data.OracleConfig.DbProviderName">
            <summary>
            Get Connection Provider Name.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleConfig.Create">
            <summary>
            Create new NDbConfig Instance.
            </summary>
            <returns>Returns NDbConfig Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerVersion">
            <summary>
            Specificed SqlServer Version
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerVersion.SqlServer7">
            <summary>
            SqlServer 7
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerVersion.SqlServer2K">
            <summary>
            SqlServer 2000
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerVersion.MSDE7">
            <summary>
            Microsoft Database Engine 7
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerVersion.MSDE2K">
            <summary>
            Microsoft Database Engine 2000
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerVersion.SqlServer2005">
            <summary>
            SqlServer 2005.
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerVersion.SqlServer2008">
            <summary>
            SqlServer 2008.
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerVersion.SqlServer2012">
            <summary>
            SqlServer 2012.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerOptions">
            <summary>
            The SqlServerOptions class.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerOptions.GetHashCode">
            <summary>
            Gets Hash Code.
            </summary>
            <returns>Returns hashcode of current object.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerOptions.Equals(System.Object)">
            <summary>
            Conpare if object is equals.
            </summary>
            <param name="obj">The target objct to compare.</param>
            <returns>Returns true if object is the same.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerOptions.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerOptions.ServerName">
            <summary>
            Gets or sets the Server host name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerOptions.ServiceName">
            <summary>
            Gets or sets Sql Server instance name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerOptions.DatabaseName">
            <summary>
            Gets or sets the database name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerOptions.Version">
            <summary>
            Gets or sets the Sql Server Version.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerConfig">
            <summary>
            Microsoft Sql Server Connection Config class.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerConfig.GetUniqueName">
            <summary>
            Define Each Connection Unique Name.
            </summary>
            <returns>Unique Name for Connection</returns>
        </member>
        <member name="M:NLib.Data.SqlServerConfig.GetConnectionString">
            <summary>
            Get Connection String.
            </summary>
            <returns>Connection string based on property settings</returns>
        </member>
        <member name="M:NLib.Data.SqlServerConfig.CreateFactory">
            <summary>
            Create database factory provider.
            </summary>
            <returns>Returns instance of database factory provider.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerConfig.DataSource">
            <summary>
            Gets or sets Sql Server Connection Options.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerConfig.DbProviderName">
            <summary>
            Get Connection Provider Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerConfig.Create">
            <summary>
            Create new NDbConfig Instance.
            </summary>
            <returns>Returns NDbConfig Instance.</returns>
        </member>
        <member name="T:NLib.Data.OdbcConfig">
            <summary>
            Odbc based Connection Config class (abstract).
            </summary>
        </member>
        <member name="M:NLib.Data.OdbcConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.OdbcConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:NLib.Data.ExcelDriver">
            <summary>
            Excel Driver.
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelDriver.Jet">
            <summary>
            Used Jet
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelDriver.ACE">
            <summary>
            Used ACE
            </summary>
        </member>
        <member name="T:NLib.Data.ExcelVersion">
            <summary>
            Excel Driver Version
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.Excel95">
            <summary>
            Excel 95 version compatible
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.Excel97">
            <summary>
            Excel 97 version compatible
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.Excel2K">
            <summary>
            Excel 2K version compatible
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.ExcelXP">
            <summary>
            Excel XP (2002) version compatible
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.Excel2003">
            <summary>
            Excel 2003 version compatible
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.Excel2007">
            <summary>
            Excel 2007 version compatible
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.Excel2010">
            <summary>
            Excel 2010 version compatible
            </summary>
        </member>
        <member name="F:NLib.Data.ExcelVersion.Excel2012">
            <summary>
            Excel 2012 version compatible
            </summary>
        </member>
        <member name="T:NLib.Data.IMex">
            <summary>
            Enum for Inter Mixed Parameter for Excel Driver
            </summary>
        </member>
        <member name="F:NLib.Data.IMex.Default">
            <summary>
            not include in connection string
            </summary>
        </member>
        <member name="F:NLib.Data.IMex.ExportMode">
            <summary>
            set ExportMode
            </summary>
        </member>
        <member name="F:NLib.Data.IMex.ImportMode">
            <summary>
            set ImportMixedType=Text in registry (force mixed data to Text)
            </summary>
        </member>
        <member name="F:NLib.Data.IMex.LinkedMode">
            <summary>
            full update capabilities
            </summary>
        </member>
        <member name="T:NLib.Data.ExcelOptions">
            <summary>
            The ExcelOptions class.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelOptions.GetHashCode">
            <summary>
            Gets Hash Code.
            </summary>
            <returns>Returns hashcode of current object.</returns>
        </member>
        <member name="M:NLib.Data.ExcelOptions.Equals(System.Object)">
            <summary>
            Conpare if object is equals.
            </summary>
            <param name="obj">The target objct to compare.</param>
            <returns>Returns true if object is the same.</returns>
        </member>
        <member name="M:NLib.Data.ExcelOptions.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.Data.ExcelOptions.FileName">
            <summary>
            Gets or sets the Excel File Name.
            </summary>
        </member>
        <member name="P:NLib.Data.ExcelOptions.IMexMode">
            <summary>
            Gets or sets the IMEX Mode (need to see MAXROWSCAN Extended Properties documents).
            </summary>
        </member>
        <member name="P:NLib.Data.ExcelOptions.HeaderInFirstRow">
            <summary>
            Gets or sets Excel Header Options.
            </summary>
        </member>
        <member name="P:NLib.Data.ExcelOptions.Version">
            <summary>
            Gets or sets the excel version.
            </summary>
        </member>
        <member name="P:NLib.Data.ExcelOptions.Driver">
            <summary>
            Gets or sets the excel driver.
            </summary>
        </member>
        <member name="T:NLib.Data.ExcelConfig">
            <summary>
            Microsoft Excel Connection Config class.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelConfig.GetUniqueName">
            <summary>
            Define Each Connection Unique Name.
            </summary>
            <returns>Unique Name for Connection</returns>
        </member>
        <member name="M:NLib.Data.ExcelConfig.GetConnectionString">
            <summary>
            Get Connection String.
            </summary>
            <returns>Connection string based on property settings</returns>
        </member>
        <member name="M:NLib.Data.ExcelConfig.CreateFactory">
            <summary>
            Create database factory provider.
            </summary>
            <returns>Returns instance of database factory provider.</returns>
        </member>
        <member name="P:NLib.Data.ExcelConfig.DataSource">
            <summary>
            Gets or sets Excel Connection Options.
            </summary>
        </member>
        <member name="P:NLib.Data.ExcelConfig.DbProviderName">
            <summary>
            Get Connection Provider Name.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelConfig.Create">
            <summary>
            Create new NDbConfig Instance.
            </summary>
            <returns>Returns NDbConfig Instance.</returns>
        </member>
        <member name="T:NLib.Data.MsAccessDriver">
            <summary>
            Ms Access Driver.
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessDriver.Jet">
            <summary>
            Used Jet
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessDriver.ACE">
            <summary>
            Used ACE
            </summary>
        </member>
        <member name="T:NLib.Data.MsAccessVersion">
            <summary>
            Specificed MS Access Version Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.Access95">
            <summary>
            MsAccess 95 Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.Access97">
            <summary>
            MsAccess 97 Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.Access2K">
            <summary>
            MsAccess 2K Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.AccessXP">
            <summary>
            MsAccess XP Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.Access2003">
            <summary>
            MsAccess 2003 Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.Access2007">
            <summary>
            MsAccess 2007 Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.Access2010">
            <summary>
            MsAccess 2010 Compatible
            </summary>
        </member>
        <member name="F:NLib.Data.MsAccessVersion.Access2013">
            <summary>
            MsAccess 2013 Compatible
            </summary>
        </member>
        <member name="T:NLib.Data.MsAccessOptions">
            <summary>
            The MsAccessOptions class.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessOptions.GetHashCode">
            <summary>
            Gets Hash Code.
            </summary>
            <returns>Returns hashcode of current object.</returns>
        </member>
        <member name="M:NLib.Data.MsAccessOptions.Equals(System.Object)">
            <summary>
            Conpare if object is equals.
            </summary>
            <param name="obj">The target objct to compare.</param>
            <returns>Returns true if object is the same.</returns>
        </member>
        <member name="M:NLib.Data.MsAccessOptions.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessOptions.FileName">
            <summary>
            Gets or sets the ms access file name.
            </summary>
        </member>
        <member name="P:NLib.Data.MsAccessOptions.Version">
            <summary>
            Gets or sets the ms access version.
            </summary>
        </member>
        <member name="P:NLib.Data.MsAccessOptions.Driver">
            <summary>
            Gets or sets the ms access driver.
            Note. Make sure that with Jet the database file should be mdb only.
            </summary>
        </member>
        <member name="T:NLib.Data.MsAccessConfig">
            <summary>
            Microsoft Access Connection Config class.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessConfig.GetUniqueName">
            <summary>
            Define Each Connection Unique Name.
            </summary>
            <returns>Unique Name for Connection</returns>
        </member>
        <member name="M:NLib.Data.MsAccessConfig.GetConnectionString">
            <summary>
            Get Connection String.
            </summary>
            <returns>Connection string based on property settings</returns>
        </member>
        <member name="M:NLib.Data.MsAccessConfig.CreateFactory">
            <summary>
            Create database factory provider.
            </summary>
            <returns>Returns instance of database factory provider.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessConfig.DataSource">
            <summary>
            Gets or sets Ms Access Database Connection Options.
            </summary>
        </member>
        <member name="P:NLib.Data.MsAccessConfig.DbProviderName">
            <summary>
            Get Connection Provider Name.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessConfig.Create">
            <summary>
            Create new NDbConfig Instance.
            </summary>
            <returns>Returns NDbConfig Instance.</returns>
        </member>
        <member name="T:NLib.Data.OleDbConfig">
            <summary>
            OleDb based Connection Config class (abstract).
            </summary>
        </member>
        <member name="M:NLib.Data.OleDbConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.OleDbConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:NLib.Data.OracleConnectionFactory">
            <summary>
            Oracle Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.CanCreateConnection">
            <summary>
            Overrides to handle the validation logic to check the prerequisition
            for initialize the connection intance.
            </summary>
            <returns>Returns true if the can create the connection instance.</returns>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.OnDerivedDbParameters(System.Data.OracleClient.OracleCommand)">
            <summary>
            Overrides to customized the parameter's characteristic after 
            DerivedParameters is called. Note that the _DerivedDbParameters method
            is call static method DeriveParameters on the DbBuilder object so 
            if the DbBuilder is not contains DeriveParameters then no parameters is derived
            so the user code should handle whne the DbBuilder is not contains static method 
            DeriveParameters.
            </summary>
            <param name="command">The command instance that parameters is derived.</param>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.SetProviderDbTypeID(System.Data.OracleClient.OracleParameter,System.Int32)">
            <summary>
            Set the provide db type id to the parameter object.
            </summary>
            <param name="parameter">The parameter object.</param>
            <param name="providerDbTypeID">The provide type id.</param>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.GetTableSchemaInfo(System.String)">
            <summary>
            Get Table Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.GetViewSchemaInfo(System.String)">
            <summary>
            Get View Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.GetProcedureSchemaInfo(System.String)">
            <summary>
            GetProcedureSchemaInfo
            </summary>
            <param name="owner">The owner.</param>
            <returns>Returns ProcedureSchemaInfo instance.</returns>
        </member>
        <member name="M:NLib.Data.OracleConnectionFactory.GetTasks">
            <summary>
            Gets Supported Task.
            </summary>
            <returns>Returns list of all avaliable supported tasks.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerConnectionFactory">
            <summary>
            SqlServer Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerConnectionFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="M:NLib.Data.SqlServerConnectionFactory.SetProviderDbTypeID(System.Data.SqlClient.SqlParameter,System.Int32)">
            <summary>
            Set the provide db type id to the parameter object.
            </summary>
            <param name="parameter">The parameter object.</param>
            <param name="providerDbTypeID">The provide type id.</param>
        </member>
        <member name="M:NLib.Data.SqlServerConnectionFactory.GetTableSchemaInfo(System.String)">
            <summary>
            Get Table Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerConnectionFactory.GetProcedureSchemaInfo(System.String)">
            <summary>
            GetProcedureSchemaInfo
            </summary>
            <param name="owner">The owner.</param>
            <returns>Returns ProcedureSchemaInfo instance.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerConnectionFactory.GetTasks">
            <summary>
            Gets Supported Task.
            </summary>
            <returns>Returns list of all avaliable supported tasks.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerConnectionFactory.SetDateFormat(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Set Date Format.
            </summary>
            <param name="connection">The connection instance.</param>
            <param name="transaction">Transaction instance</param>
        </member>
        <member name="T:NLib.Data.SqlServerCreateDatabaseParameter">
            <summary>
            SqlServer Create Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerCreateDatabaseParameter.DatabaseName">
            <summary>
            Gets or Sets Database Name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerCreateDatabaseParameter.PhysicalMDF">
            <summary>
            Gets or Sets Physical Master Data File.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerCreateDatabaseParameter.PhysicalLDF">
            <summary>
            Gets or Sets Physical Log Data File.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerCreateDatabaseParameter.DatabaseScript">
            <summary>
            Gets or Sets Database Script.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerCreateDatabaseParameter.Account">
            <summary>
            Gets or Sets Account's Name to grant full access. Required if use SQLEXPRESS.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerCreateDatabaseTask">
            <summary>
            SqlServer Create Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerCreateDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerCreateDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerDeleteDatabaseParameter">
            <summary>
            SqlServer Delete Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerDeleteDatabaseParameter.DatabaseName">
            <summary>
            Gets or sets Database Name.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerDeleteDatabaseTask">
            <summary>
            SqlServer Delete Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerDeleteDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDeleteDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerBackupDatabaseParameter">
            <summary>
            SqlServer Backup Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerBackupDatabaseParameter.DatabaseName">
            <summary>
            Gets or sets Database Name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerBackupDatabaseParameter.BackupFileName">
            <summary>
            Gets or sets Backup File Name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerBackupDatabaseParameter.Account">
            <summary>
            Gets or sets Account's Name to grant full access. Required if use SQLEXPRESS.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerBackupDatabaseTask">
            <summary>
            SqlServer Backup Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerBackupDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerBackupDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerRestoreDatabaseParameter">
            <summary>
            SqlServer Restore Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerRestoreDatabaseParameter.DatabaseName">
            <summary>
            Gets or sets Database Name to Restore.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerRestoreDatabaseParameter.BackupFileName">
            <summary>
            Gets or sets Backup File Name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerRestoreDatabaseParameter.Account">
            <summary>
            Gets or sets Account's Name to grant full access. Required if use SQLEXPRESS.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerRestoreDatabaseTask">
            <summary>
            SqlServer Restore Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerRestoreDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerRestoreDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerAttachDatabaseParameter">
            <summary>
            SqlServer Attach Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerAttachDatabaseParameter.DatabaseName">
            <summary>
            Gets or sets Database Name.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerAttachDatabaseParameter.PhysicalMDF">
            <summary>
            Gets or sets Physical Master Data File.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerAttachDatabaseParameter.PhysicalLDF">
            <summary>
            Gets or sets Physical Log Data File.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerAttachDatabaseTask">
            <summary>
            SqlServer Attach Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerAttachDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerAttachDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerDetachDatabaseParameter">
            <summary>
            SqlServer Detach Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerDetachDatabaseParameter.DatabaseName">
            <summary>
            Gets or sets Database Name to Detach.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerDetachDatabaseTask">
            <summary>
            SqlServer Detach Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerDetachDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerDetachDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerShrinkDatabaseParameter">
            <summary>
            SqlServer Shrink Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerShrinkDatabaseParameter.DatabaseName">
            <summary>
            Gets or sets Database Name to Shrink.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerShrinkDatabaseParameter.ShrinkToSize">
            <summary>
            Gets or sets Shrink Size.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerShrinkDatabaseTask">
            <summary>
            SqlServer Shrink Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerShrinkDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerShrinkDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.SqlServerRecoveryMode">
            <summary>
            The SqlServer Recover Mode.
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerRecoveryMode.Simple">
            <summary>
            Simple.
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerRecoveryMode.BulkLog">
            <summary>
            Bulk Log.
            </summary>
        </member>
        <member name="F:NLib.Data.SqlServerRecoveryMode.Full">
            <summary>
            Full.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerSetRecoveryModeParameter">
            <summary>
            SqlServer Set Recovery Mode Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerSetRecoveryModeParameter.DatabaseName">
            <summary>
            Gets or sets Database Name to Change Recovery Mode.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerSetRecoveryModeParameter.Mode">
            <summary>
            Gets or sets Recovery Mode.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerSetRecoveryModeTask">
            <summary>
            SqlServer Set Recovery Mode Task.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.SqlServerSetRecoveryModeTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerSetRecoveryModeTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>Returns DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.InformixConnectionFactory">
            <summary>
            Informix Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.InformixConnectionFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="T:NLib.Data.OdbcConnectionFactory">
            <summary>
            Odbc Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.OdbcConnectionFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="M:NLib.Data.OdbcConnectionFactory.SetProviderDbTypeID(System.Data.Odbc.OdbcParameter,System.Int32)">
            <summary>
            Set the provide db type id to the parameter object.
            </summary>
            <param name="parameter">The parameter object.</param>
            <param name="providerDbTypeID">The provide type id.</param>
        </member>
        <member name="M:NLib.Data.OdbcConnectionFactory.GetTableSchemaInfo(System.String)">
            <summary>
            Get Table Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.OdbcConnectionFactory.GetViewSchemaInfo(System.String)">
            <summary>
            Get View Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.OdbcConnectionFactory.GetProcedureSchemaInfo(System.String)">
            <summary>
            GetProcedureSchemaInfo
            </summary>
            <param name="owner">The owner.</param>
            <returns>Returns ProcedureSchemaInfo instance.</returns>
        </member>
        <member name="T:NLib.Data.ExcelConnectionFactory">
            <summary>
            Excel Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelConnectionFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="M:NLib.Data.ExcelConnectionFactory.GetTasks">
            <summary>
            Gets Supported Task.
            </summary>
            <returns>Returns list of all avaliable supported tasks.</returns>
        </member>
        <member name="T:NLib.Data.ExcelCreateDatabaseParameter">
            <summary>
            Excel Create Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.ExcelCreateDatabaseParameter.FileName">
            <summary>
            Gets or sets File Name.
            </summary>
        </member>
        <member name="T:NLib.Data.ExcelCreateDatabaseTask">
            <summary>
            Excel Create Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.ExcelCreateDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelCreateDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.ExcelDeleteDatabaseParameter">
            <summary>
            Excel Delete Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.ExcelDeleteDatabaseParameter.FileName">
            <summary>
            Gets or sets File Name.
            </summary>
        </member>
        <member name="T:NLib.Data.ExcelDeleteDatabaseTask">
            <summary>
            Excel Delete Database Task
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.ExcelDeleteDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelDeleteDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.MsAccessConnectionFactory">
            <summary>
            Ms Access Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessConnectionFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="M:NLib.Data.MsAccessConnectionFactory.GetTasks">
            <summary>
            Gets Supported Task.
            </summary>
            <returns>Returns list of all avaliable supported tasks.</returns>
        </member>
        <member name="T:NLib.Data.MsAccessCreateDatabaseParameter">
            <summary>
            MsAccess Create Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessCreateDatabaseParameter.FileName">
            <summary>
            Gets or sets File Name.
            </summary>
        </member>
        <member name="T:NLib.Data.MsAccessCreateDatabaseTask">
            <summary>
            MsAccess Create Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessCreateDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCreateDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.MsAccessDeleteDatabaseParameter">
            <summary>
            MsAccess Delete Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessDeleteDatabaseParameter.FileName">
            <summary>
            Gets or sets File Name.
            </summary>
        </member>
        <member name="T:NLib.Data.MsAccessDeleteDatabaseTask">
            <summary>
            MsAccess Delete Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessDeleteDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessDeleteDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.MsAccessCompactDatabaseParameter">
            <summary>
            MsAccess Compact Database Parameter.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseParameter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseParameter.IsValid">
            <summary>
            Checks Is Parameter Valid.
            </summary>
            <returns>Returns true if parameter is valid.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessCompactDatabaseParameter.FileName">
            <summary>
            Gets or sets File Name.
            </summary>
        </member>
        <member name="T:NLib.Data.MsAccessCompactDatabaseTask">
            <summary>
            MsAccess Compact Database Task.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseTask.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseTask.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseTask.GetParameter(NLib.Components.NDbConnection)">
            <summary>
            Gets Task Parameter.
            </summary>
            <param name="manager">The DbConnection that used for Get parameter for task.</param>
            <returns>Returns NDbTask Parameter that used for execute Task.</returns>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseTask.Execute(NLib.Components.NDbConnection,NLib.Data.NDbTaskParameter)">
            <summary>
            Execute Task.
            </summary>
            <param name="manager">The DbConnection that used for execute Task.</param>
            <param name="parameter">Task Parameter that used for execute Task.</param>
            <returns>Returns NDbTask Result instance after task is execute.</returns>
        </member>
        <member name="P:NLib.Data.MsAccessCompactDatabaseTask.TaskName">
            <summary>
            Gets Task Name.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessCompactDatabaseTask.Create">
            <summary>
            Create DbTask Instance.
            </summary>
            <returns>DbTask Instance.</returns>
        </member>
        <member name="T:NLib.Data.OleDbConnectionFactory">
            <summary>
            OleDb Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Data.OleDbConnectionFactory.InitFormatter(NLib.Data.NDbFormatter)">
            <summary>
            Init formatter.
            </summary>
            <param name="formatter">The formatter instance.</param>
        </member>
        <member name="M:NLib.Data.OleDbConnectionFactory.SetProviderDbTypeID(System.Data.OleDb.OleDbParameter,System.Int32)">
            <summary>
            Set the provide db type id to the parameter object.
            </summary>
            <param name="parameter">The parameter object.</param>
            <param name="providerDbTypeID">The provide type id.</param>
        </member>
        <member name="M:NLib.Data.OleDbConnectionFactory.GetTableSchemaInfo(System.String)">
            <summary>
            Get Table Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.OleDbConnectionFactory.GetViewSchemaInfo(System.String)">
            <summary>
            Get View Schema Info.
            </summary>
            <param name="owner">The owner name.</param>
            <returns>Returns the Table SchemaInfo instance for DbTable.</returns>
        </member>
        <member name="M:NLib.Data.OleDbConnectionFactory.GetProcedureSchemaInfo(System.String)">
            <summary>
            GetProcedureSchemaInfo
            </summary>
            <param name="owner">The owner.</param>
            <returns>Returns ProcedureSchemaInfo instance.</returns>
        </member>
        <member name="T:NLib.Data.DataAccessException">
            <summary>
            Data Access Exception Class.
            </summary>
        </member>
        <member name="M:NLib.Data.DataAccessException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:NLib.Data.ExecuteExceptionEventHandler">
            <summary>
            Execute Exception Event Handler.
            </summary>
            <param name="sender">Sender instance.</param>
            <param name="e">Exception instance.</param>
        </member>
        <member name="T:NLib.Data.ExecuteExceptionEventArgs">
            <summary>
            Execute Exception EventArgs.
            </summary>
        </member>
        <member name="M:NLib.Data.ExecuteExceptionEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExecuteExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="ex">Exception instance.</param>
        </member>
        <member name="M:NLib.Data.ExecuteExceptionEventArgs.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.ExecuteExceptionEventArgs.Exception">
            <summary>
            Gets Exception instance.
            </summary>
        </member>
        <member name="T:NLib.Data.ConnectionRef">
            <summary>
            The Connection Ref class.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionRef.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionRef.#ctor(System.String,System.Data.Common.DbConnection)">
            <summary>
            Constructor.
            </summary>
            <param name="uniqueName">Unique Connection Name.</param>
            <param name="connection">Connection Instance.</param>
        </member>
        <member name="M:NLib.Data.ConnectionRef.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionRef.AddRef">
            <summary>
            Add Reference.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionRef.ReleaseRef">
            <summary>
            Release Reference.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionRef.Free">
            <summary>
            Free and dispose.
            </summary>
        </member>
        <member name="P:NLib.Data.ConnectionRef.UniqueName">
            <summary>
            Get Unique Name
            </summary>
        </member>
        <member name="P:NLib.Data.ConnectionRef.DbConnection">
            <summary>
            Get Connection Instance
            </summary>
        </member>
        <member name="P:NLib.Data.ConnectionRef.ReferenceCount">
            <summary>
            Get Reference Count
            </summary>
        </member>
        <member name="T:NLib.Data.ConnectionPools">
            <summary>
            The Connection Pools. Provide cache machanishm to share connections.
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionPools.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionPools.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Data.ConnectionPools.Instance">
            <summary>
            Singelton Access
            </summary>
        </member>
        <member name="M:NLib.Data.ConnectionPools.IsExists(System.String)">
            <summary>
            Is Exists.
            </summary>
            <param name="connectionUniqueName">Unique Name to check.</param>
            <returns>Returns true if name is already exists.</returns>        
        </member>
        <member name="P:NLib.Data.ConnectionPools.Item(System.String)">
            <summary>
            Indexer access.
            </summary>
            <param name="connectionUniqueName">Unique Name to check.</param>
            <returns>Returns ConnectionRef instance that match Unique Name.</returns>
        </member>
        <member name="M:NLib.Data.ConnectionPools.Add(System.String,System.Data.Common.DbConnection)">
            <summary>
            Add New ConnectionRef.
            </summary>
            <param name="connectionUniqueName">Unique Name to check.</param>
            <param name="connection">DbConnection instance.</param>
            <returns>Returns ConnectionRef instance that match Unique Name.</returns>
        </member>
        <member name="M:NLib.Data.ConnectionPools.Remove(System.String)">
            <summary>
            Remove connection reference.
            </summary>
            <param name="connectionUniqueName">Unique Name to check.</param>
        </member>
        <member name="M:NLib.Data.ConnectionPools.GetNextUId">
            <summary>
            Get next Unique id.
            </summary>
            <returns>Returns Next unique id.</returns>
        </member>
        <member name="T:NLib.Data.MapSourceAttribute">
            <summary>
            Map Source attribute.
            </summary>
        </member>
        <member name="M:NLib.Data.MapSourceAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceName">The specificed Source Name (Table Name or Class Name).</param>
        </member>
        <member name="P:NLib.Data.MapSourceAttribute.SourceName">
            <summary>
            Gets Source's Name.
            </summary>
        </member>
        <member name="P:NLib.Data.MapSourceAttribute.ReadOnly">
            <summary>
            Gets Is readonly.
            </summary>
        </member>
        <member name="T:NLib.Data.MapMemberAttribute">
            <summary>
            Map Member attribute.
            </summary>
        </member>
        <member name="M:NLib.Data.MapMemberAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="memberName">The specificed Column Name or Property Name.</param>
        </member>
        <member name="P:NLib.Data.MapMemberAttribute.MemberName">
            <summary>
            Gets Member's Name
            </summary>
        </member>
        <member name="T:NLib.Data.AutoGenerateAttribute">
            <summary>
            Auto Generate Attribute. Use this attribute to marked the column is auto generate value by database
            used when column is auto assign value via Trigger, Sequence or Generator.
            </summary>
        </member>
        <member name="M:NLib.Data.AutoGenerateAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:NLib.Data.MethodCall">
            <summary>
            MethodCall Enum
            </summary>
        </member>
        <member name="F:NLib.Data.MethodCall.BeforeInsert">
            <summary>
            Call before insert.
            </summary>
        </member>
        <member name="F:NLib.Data.MethodCall.AfterInsert">
            <summary>
            Call after insert.
            </summary>
        </member>
        <member name="F:NLib.Data.MethodCall.BeforeUpdate">
            <summary>
            Call before update.
            </summary>
        </member>
        <member name="F:NLib.Data.MethodCall.AfterUpdate">
            <summary>
            Call after update.
            </summary>
        </member>
        <member name="T:NLib.Data.GenerateMethodAttribute">
            <summary>
            GenerateMethod attribute. Used for markd that the specificed need to retrived data from user
            Generate Method before insertion occur.
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateMethodAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.GenerateMethodAttribute.#ctor(NLib.Data.MethodCall,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="call">Set when to call method.</param>
            <param name="generateMethodName">The Generate Method Name.</param>
        </member>
        <member name="M:NLib.Data.GenerateMethodAttribute.#ctor(NLib.Data.MethodCall,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="call">Set when to call method.</param>
            <param name="generateMethodName">The Generate Method Name.</param>
            <param name="parameters">The Generate Method parameter string.</param>
        </member>
        <member name="P:NLib.Data.GenerateMethodAttribute.Call">
            <summary>
            Gets when method is need.
            </summary>
        </member>
        <member name="P:NLib.Data.GenerateMethodAttribute.GenerateMethodName">
            <summary>
            Gets Generate Method Name.
            </summary>
        </member>
        <member name="P:NLib.Data.GenerateMethodAttribute.Parameters">
            <summary>
            Gets Generate Method parameter(s) string.
            </summary>
        </member>
        <member name="T:NLib.Data.DbObjectPropertyMap">
            <summary>
            The DbObjectPropertyMap class.
            </summary>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMap.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMap.Equals(System.Object)">
            <summary>
            Equals.
            </summary>
            <param name="obj">An object to compare.</param>
            <returns>Returns true if obj is equals to current object.</returns>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMap.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>Returns hash code of object.</returns>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMap.ToString">
            <summary>
            To String.
            </summary>
            <returns>Returns string that represents an object instance.</returns>
        </member>
        <member name="P:NLib.Data.DbObjectPropertyMap.DbName">
            <summary>
            Gets or sets Database's Object Name.
            </summary>
        </member>
        <member name="P:NLib.Data.DbObjectPropertyMap.PropertyName">
            <summary>
            Gets or sets Class's property Name.
            </summary>
        </member>
        <member name="T:NLib.Data.DbObjectPropertyMapManager">
            <summary>
            The DbObjectPropertyMapManager class.
            </summary>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMapManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMapManager.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMapManager.FindByDbName(System.String)">
            <summary>
            Find Class's property name that mapped to specificed database's object name.
            </summary>
            <param name="dbName">The database's object name.</param>
            <returns>Returns null if not found otherwise returns DbObjectPropertyMap instance.</returns>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMapManager.FindByProperty(System.String)">
            <summary>
            Find Database's object name that mapped to specificed class's property name.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>Returns null if not found otherwise returns DbObjectPropertyMap instance.</returns>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMapManager.Add(System.String,System.String)">
            <summary>
            Add data to items collection.
            </summary>
            <param name="dbName">The database's object name.</param>
            <param name="propertyName">The property name.</param>
            <returns>Returns index of added instance.</returns>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMapManager.Update(System.String,System.String)">
            <summary>
            Update item in items collection. If item not exists the new instance is added.
            </summary>
            <param name="dbName">The database's object name.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:NLib.Data.DbObjectPropertyMapManager.IndexOf(System.String)">
            <summary>
            Find Index by database object's name.
            </summary>
            <param name="dbName">The database's object name.</param>
            <returns>Returns index of item in collection that match database object's name.</returns>
        </member>
        <member name="P:NLib.Data.DbObjectPropertyMapManager.Items">
            <summary>
            Gets or sets DbObjectPropertyMap List.
            </summary>
        </member>
        <member name="T:NLib.Data.DomainGenerateOption">
            <summary>
            The DomainGenerateOption class.
            </summary>
        </member>
        <member name="M:NLib.Data.DomainGenerateOption.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Data.DomainGenerateOption.DomainNamespace">
            <summary>
            Gets or sets the domain sub namespace.
            </summary>
        </member>
        <member name="P:NLib.Data.DomainGenerateOption.DatabaseManagerNamespace">
            <summary>
            Gets or sets the database manager sub namespace.
            </summary>
        </member>
        <member name="P:NLib.Data.DomainGenerateOption.GenerateDatabaseManager">
            <summary>
            Gets or sets is generate database manager.
            </summary>
        </member>
        <member name="T:NLib.Data.ModelGenerateOption">
            <summary>
            The ModelGenerateOption class.
            </summary>
        </member>
        <member name="M:NLib.Data.ModelGenerateOption.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Data.ModelGenerateOption.ModelNamespace">
            <summary>
            Gets or sets the model sub namespace.
            </summary>
        </member>
        <member name="P:NLib.Data.ModelGenerateOption.ExtensionMethodsNamespace">
            <summary>
            Gets or sets the extension methods sub namespace.
            </summary>
        </member>
        <member name="P:NLib.Data.ModelGenerateOption.GenerateExtensionMethods">
            <summary>
            Gets or sets is generate extension methods.
            </summary>
        </member>
        <member name="T:NLib.Data.ServiceModelGenerateOption">
            <summary>
            The ServiceModelGenerateOption class.
            </summary>
        </member>
        <member name="M:NLib.Data.ServiceModelGenerateOption.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Data.ServiceModelGenerateOption.ServiceModelNamespace">
            <summary>
            Gets or sets the model sub namespace.
            </summary>
        </member>
        <member name="P:NLib.Data.ServiceModelGenerateOption.ExtensionMethodsNamespace">
            <summary>
            Gets or sets the extension methods sub namespace.
            </summary>
        </member>
        <member name="P:NLib.Data.ServiceModelGenerateOption.GenerateExtensionMethods">
            <summary>
            Gets or sets is generate extension methods.
            </summary>
        </member>
        <member name="T:NLib.Data.CSharpCodeGenerateOptions">
            <summary>
            The CSharpCodeGenerateOptions class.
            </summary>
        </member>
        <member name="M:NLib.Data.CSharpCodeGenerateOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Data.CSharpCodeGenerateOptions.DomainOption">
            <summary>
            Gets or sets domain code generate  option.
            </summary>
        </member>
        <member name="P:NLib.Data.CSharpCodeGenerateOptions.ModelOption">
            <summary>
            Gets or sets model code generate  option.
            </summary>
        </member>
        <member name="P:NLib.Data.CSharpCodeGenerateOptions.ServiceModelOption">
            <summary>
            Gets or sets service model code generate option.
            </summary>
        </member>
        <member name="T:NLib.Data.NDatabaseProjectDocument">
            <summary>
            The NDatabaseProjectDocument class.
            </summary>
        </member>
        <member name="M:NLib.Data.NDatabaseProjectDocument.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDatabaseProjectDocument.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:NLib.Data.NDatabaseProjectDocument`1">
            <summary>
            The NDatabaseProjectDocument (generic) class.
            </summary>
            <typeparam name="T">The NDbConfig Type.</typeparam>
        </member>
        <member name="M:NLib.Data.NDatabaseProjectDocument`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.NDatabaseProjectDocument`1.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.NDatabaseProjectDocument`1.ConnectionConfig">
            <summary>
            Gets or sets Connection Config.
            </summary>
        </member>
        <member name="P:NLib.Data.NDatabaseProjectDocument`1.Mappings">
            <summary>
            Gets or sets Mapping Manager.
            </summary>
        </member>
        <member name="P:NLib.Data.NDatabaseProjectDocument`1.GenerateOptions">
            <summary>
            Gets or sets Generate Options.
            </summary>
        </member>
        <member name="T:NLib.Data.SqlServerProject">
            <summary>
            The SqlServerProject class.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerProject.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerProject.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.SqlServerProject.NDocumentTypeName">
            <summary>
            Gets NDocument Type Name.
            </summary>
        </member>
        <member name="M:NLib.Data.SqlServerProject.Create">
            <summary>
            Create new NDocument Instance.
            </summary>
            <returns>Returns NDocument Instance.</returns>
        </member>
        <member name="T:NLib.Data.OracleProject">
            <summary>
            The OracleProject class.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleProject.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleProject.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.OracleProject.NDocumentTypeName">
            <summary>
            Gets NDocument Type Name.
            </summary>
        </member>
        <member name="M:NLib.Data.OracleProject.Create">
            <summary>
            Create new NDocument Instance.
            </summary>
            <returns>Returns NDocument Instance.</returns>
        </member>
        <member name="T:NLib.Data.MsAccessProject">
            <summary>
            The MsAccessProject class.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessProject.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessProject.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.MsAccessProject.NDocumentTypeName">
            <summary>
            Gets NDocument Type Name.
            </summary>
        </member>
        <member name="M:NLib.Data.MsAccessProject.Create">
            <summary>
            Create new NDocument Instance.
            </summary>
            <returns>Returns NDocument Instance.</returns>
        </member>
        <member name="T:NLib.Data.ExcelProject">
            <summary>
            The ExcelProject class.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelProject.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelProject.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Data.ExcelProject.NDocumentTypeName">
            <summary>
            Gets NDocument Type Name.
            </summary>
        </member>
        <member name="M:NLib.Data.ExcelProject.Create">
            <summary>
            Create new NDocument Instance.
            </summary>
            <returns>Returns NDocument Instance.</returns>
        </member>
        <member name="T:NLib.Components.NDbConnection">
            <summary>
            The NDbConnection aka. Connection Manager.
            </summary>
        </member>
        <member name="T:NLib.Components.NDbConnection.Utils">
            <summary>
            Get String Utils
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection._onExecuting">
            <summary>
            Gets or sets On Executing flag.
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.CheckActiveWindow">
            <summary>
            For WPF to find active windows.
            </summary>
            <returns>Returns WPF active window instance.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ChangeActiveFormCursor(System.Windows.Forms.Cursor)">
            <summary>
            Change Active Form Cursor.
            </summary>
            <param name="cursor">The cursor instance.</param>
        </member>
        <member name="M:NLib.Components.NDbConnection.ChangeActiveWindowCursor(System.Windows.Input.Cursor)">
            <summary>
            Change Active Window Cursor.
            </summary>
            <param name="cursor">The cursor instance.</param>
        </member>
        <member name="M:NLib.Components.NDbConnection.ShowBusyCursor">
            <summary>
            Show Busy cursor
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.ShowNormalCursor">
            <summary>
            Show Normal cursor.
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection.EnableDetailDebug">
            <summary>
            Gets or sets to show detail debug. Default is false.
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection.AutoChangeCursor">
            <summary>
            Gets or sets auto change cursor when executing database command.
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.RaiseEvent(System.Delegate,System.Object[])">
            <summary>
            Raise Event with automatically synchronized thread if required.
            </summary>
            <param name="del">delegate reference or event instance</param>
            <param name="args">argument to send as parameter</param>
        </member>
        <member name="M:NLib.Components.NDbConnection.ConnectToDatabase">
            <summary>
            Split connection code to method to make it easy to call it Asynchronous
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.DoConnecting">
            <summary>
            DoConnecting
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.DoConnected">
            <summary>
            DoConnected
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.DoConnectFailed">
            <summary>
            DoConnectFailed
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.DoDisonnecting">
            <summary>
            DoDisonnecting
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.DoDisconnected">
            <summary>
            DoDisconnected
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.DoBroken">
            <summary>
            DoBroken
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.DoAlive">
            <summary>
            DoAlive
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.RaiseErr(System.String)">
            <summary>
            Raise OnException event.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="M:NLib.Components.NDbConnection.RaiseErr(System.Exception)">
            <summary>
            Raise OnException event.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="P:NLib.Components.NDbConnection.Factory">
            <summary>
            Access Connection Factory.
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.OnConnecting">
            <summary>
            OnConnecting
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.OnConnected">
            <summary>
            OnConnected
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.OnConnectFailed">
            <summary>
            OnConnectFailed
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.OnDisconnecting">
            <summary>
            OnDisconnecting
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.OnDisconnected">
            <summary>
            OnDisconnected
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.IsConnectionInUsed">
            <summary>
            Overrides to provide information about other resource is still
            used the connection to prevent auto detected borken check routune activate.
            Note. If inherited class is not override this method the result always be false
            if no record set is still active. When inherited make sure to call base class to 
            get the result before do another logic and combine result to make sure no
            record set is still alive.
            </summary>
            <returns>Returns true if other resource is still used the connection.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.RunTestQuery(System.String)">
            <summary>
            Run Test Query. Overrides to execute the test query. When inherited make sure to call base class to 
            get the result before do another logic and combine result to make sure no
            record set is still alive.
            </summary>
            <param name="testQuery">The test query.</param>
            <returns>Returns true if test query is successfully executed.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.Connect">
            <summary>
            Connect to database.
            </summary>
            <returns>Return true if connect process is success.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.Disconnect">
            <summary>
            Disconnect from database. When call this method the connection config would not changed
            so when call connect again the exists connection config will used to connect to database.
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection.Config">
            <summary>
            Gets or sets Connection Configuration.
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection.DbConnection">
            <summary>
            Gets DbConnection insatnce.
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection.IsConnected">
            <summary>
            Check Is database connected.
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection.IsConnecting">
            <summary>
            Checks is in connecting process.
            </summary>
        </member>
        <member name="P:NLib.Components.NDbConnection.SharedConnection">
            <summary>
            Gets or sets is shared connection.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.OnException">
            <summary>
            OnException Event. 
            Occur when Exception is occur.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.Connecting">
            <summary>
            Connecting Event. Occur when Connect method is called.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.Connected">
            <summary>
            Connected Event. 
            Occur when Connect process is success.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.ConnectFailed">
            <summary>
            ConnectFailed Event. 
            Occur when Connect process is failed.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.Disconnecting">
            <summary>
            Disconnecting Event. 
            Occur when Disconnect method is called.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.Disconnected">
            <summary>
            Disconnected Event. 
            Occur when Disconnect process is completed.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.ConnectionBroken">
            <summary>
            ConnectionBroken Event. 
            Occur when Connection is broken.
            </summary>
        </member>
        <member name="E:NLib.Components.NDbConnection.ConnectionAlive">
            <summary>
            ConnectionAlive Event. 
            Occur when Connection check process occur and still alive.
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.Query(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Query.
            </summary>
            <param name="queryText">command text.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result DataTable that return from database.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.Query(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            Query.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result DataTable that return from database.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteNonQuery(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Execute Non Query.
            </summary>
            <param name="commandText">command text.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result that return after execute command.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            Execute Non Query
            </summary>
            <param name="command">Command object that already initialized parameters</param>
            <param name="transaction">Transaction instance</param>
            <returns>Result that return after execute command</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteScalar(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Execute Scalar.
            </summary>
            <param name="commandText">command text.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result that return after execute command.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            Execute Scalar.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result that return after execute command.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteReader(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Execute Reader.
            </summary>
            <param name="commandText">command text.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Array of DataTable instance that used to retrived returned data from database.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Execute Reader.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <returns>Array of DataTable instance that used to retrived returned data from database.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            Execute Reader.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Array of DataTable instance that used to retrived returned data from database.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteProcedure(System.String,System.String[],System.Object[],System.Data.Common.DbTransaction)">
            <summary>
            Execute Procedure.
            </summary>
            <param name="procedureName">Procedure's Name.</param>
            <param name="parameterNames">list of procedure's parameter name.</param>
            <param name="parameterValues">list of procedure's parameter value.</param>
            <param name="transaction">The transaction instance.</param>
            <returns>Returns stored procedure result.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteProcedure(System.Data.Common.DbCommand,System.String[],System.Object[],System.Data.Common.DbTransaction)">
            <summary>
            Execute Procedure.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <param name="parameterNames">list of procedure's parameter name.</param>
            <param name="parameterValues">list of procedure's parameter value.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Returns stored procedure result.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteDataReader(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Execute Data Reader.
            </summary>
            <param name="commandText">command text.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Array of Recordset instance that used to retrived returned data from database.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.ExecuteDataReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            Execute Data Reader.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Array of DataReaderResult instance that used to retrived returned data from database.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetSystemDateTime(System.Data.Common.DbTransaction)">
            <summary>
            Get System Date Time.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>Current DateTime from database server if connected otherwise return DateTime.Now.</returns>
        </member>
        <member name="P:NLib.Components.NDbConnection.IsExecuting">
            <summary>
            Checks is on executing.
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetMetaDataCollection">
            <summary>
            Get Meta Data Collection.
            </summary>
            <returns>List of avaliable metadata information.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetProviderDataTypes">
            <summary>
            Get Provider DataTypes. This method is used for Get all DataTypes for the current data provider.
            </summary>
            <returns>List of Provider datatypes.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetProviderTypeByID(System.Int32)">
            <summary>
            Get Provider Type By ID.
            </summary>
            <param name="providerTypeID">The Provider Type ID.</param>
            <returns>Return match DbProviderDataType instance if found otherwise return null.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetReservedWords">
            <summary>
            Get Reserved Words. This method is used for Get all reserved words for the current data provider.
            </summary>
            <returns>List of Reserved words.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetRestrictions(NLib.Data.DbMetaData)">
            <summary>
            Get Restrictions for specificed Metadata.
            </summary>
            <param name="value">MetaData object to find information.</param>
            <returns>List of Restriction that need to get information.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetSchema(NLib.Data.DbMetaData)">
            <summary>
            Get Schema. This Method is used for Get Schema information for specificed Meta Data information.
            </summary>
            <param name="value">specificed Metadata to find information.</param>
            <returns>Information about specificed metadata.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetSchema(NLib.Data.DbMetaData,NLib.Data.DbRestriction[])">
            <summary>
            Get Schema. This Method is used for Get Schema information for specificed Meta Data information.
            </summary>
            <param name="value">specificed Metadata to find information.</param>
            <param name="restrictions">Restriction Array.</param>
            <returns>Information about specificed metadata.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetSchemaTable(System.String)">
            <summary>
            Get Schema Table. This method is used to retrived Schema information about specificed
            Query i.e. column information.
            </summary>
            <param name="queryText">command text.</param>
            <returns>Result Schema Table.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetSchemaTable(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Get Schema Table. This method is used to retrived Schema information about specificed
            Query i.e. column information.
            </summary>
            <param name="queryText">command text.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result Schema Table.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetSchemaTable(System.Data.Common.DbCommand)">
            <summary>
            Get Schema Table. This method is used to retrived Schema information about specificed
            Command i.e. column information.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <returns>Result Schema Table.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetSchemaTable(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            Get Schema Table. This method is used to retrived Schema information about specificed
            Command i.e. column information.
            </summary>
            <param name="command">Command object that already initialized parameters.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Result Schema Table.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetTables">
            <summary>
            Get Tables (and views).
            </summary>
            <returns>List of all avaliable Tables/Views from provider.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetTables(System.String)">
            <summary>
            Get Tables (and views).
            </summary>
            <param name="owner">Owner of Tables/Views.</param>
            <returns>List of all avaliable Tables/Views from provider.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetProcedures">
            <summary>
            Get Procedures.
            </summary>
            <returns>Returns List of Stored Procedure's name.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetProcedures(System.String)">
            <summary>
            Get Procedures.
            </summary>
            <param name="owner">Owner of Stored Procedures.</param>
            <returns>Returns List of Stored Procedure's name.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetProcedureInfo(System.String)">
            <summary>
            Gets Stored Procedure info.
            </summary>
            <param name="procedureName">Stored Procedure Name.</param>
            <returns>Returns Stored procedure information.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetProcedureInfo(System.String,System.String)">
            <summary>
            Gets Stored Procedure info.
            </summary>
            <param name="owner">Owner of Stored Procedure.</param>
            <param name="procedureName">Stored Procedure Name.</param>
            <returns>Returns Stored procedure information.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetTableColumns(System.String)">
            <summary>
            Get Columns by table's name.
            </summary>
            <param name="tableName">The table or view name.</param>
            <returns>Returns list of columns.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetTableColumns(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Get Columns by table's name.
            </summary>
            <param name="tableName">The table or view name.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Returns list of columns.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetQueryColumns(System.String)">
            <summary>
            Get Columns by specificed query.
            </summary>
            <param name="queryText">The query text.</param>
            <returns>Returns list of columns.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.GetQueryColumns(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Get Columns by specificed query
            </summary>
            <param name="queryText">The query text.</param>
            <param name="transaction">Transaction instance.</param>
            <returns>Returns list of columns.</returns>
        </member>
        <member name="M:NLib.Components.NDbConnection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Components.NDbConnection.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:NLib.Components.Devices.SerialPorts.TerminalStatusChangedEventHandler">
            <summary>
            TerminalStatusChangedEventHandler delegate
            </summary>
        </member>
        <member name="T:NLib.Components.Devices.SerialPorts.TerminalRxCharEventHandler">
            <summary>
            TerminalRxCharEventHandler delegate
            </summary>
        </member>
        <member name="T:NLib.Components.Devices.SerialPorts.TerminalExceptionEventHandler">
            <summary>
            TerminalExceptionEventHandler delegate
            </summary>
        </member>
        <member name="T:NLib.Components.Devices.SerialPorts.TerminalMessageEventHandler">
            <summary>
            TerminalMessageEventHandler delegate
            </summary>
        </member>
        <member name="T:NLib.Components.Devices.SerialPorts.SerialPortAccess">
            <summary>
            Serial Port Access Component
            </summary>
            <example>
      The following example demonstrates how to used The SerialPortAccess class.
      To begin create new Form and Add 2 SerialPortAccess components, 2 TextBoxes, 2 Buttons and 2 ListBoxes
      <code lang="C#">
        using System;
        using System.Collections.Generic;
        using System.ComponentModel;
        using System.Data;
        using System.Drawing;
        using System.Text;
        using System.Windows.Forms;

        private void Form45_Load(object sender, EventArgs e)
        {
        serial1.ApplyDefaultSetting("COM5:");
        serial2.ApplyDefaultSetting("COM6:");
        serial1.Open();
        serial2.Open();
        }

        private void Form45_FormClosing(object sender, FormClosingEventArgs e)
        {
        serial1.Close();
        serial2.Close();
        }

        private void button1_Click(object sender, EventArgs e)
        {
        if (serial1.Online) serial1.Send(textBox1.Text);
        }

        private void button2_Click(object sender, EventArgs e)
        {
        if (serial2.Online) serial2.Send(textBox2.Text);
        }

        private void serial1_OnTerminalRx(string ch, bool newline)
        {
        if (ch.Trim().EndsWith("CR&gt;") || ch.Trim().EndsWith("LF&gt;"))
        {
        if (recvData1.Length &gt; 0) listBox1.Items.Add(recvData1);

        recvData1 = string.Empty;
        }
        else recvData1 += ch.Trim();
        }

        private void serial2_OnTerminalRx(string ch, bool newline)
        {
        if (ch.Trim().EndsWith("CR&gt;") || ch.Trim().EndsWith("LF&gt;"))
        {
        if (recvData2.Length &gt; 0) listBox2.Items.Add(recvData2);

        recvData2 = string.Empty;
        }
        else recvData2 += ch.Trim();
        }
      </code>
    </example>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Open">
            <summary>
            Opens the com port and configures it with the required settings
            </summary>
            <returns>false if the port could not be opened</returns>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Close">
            <summary>
            Closes the com port.
            </summary>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Flush">
            <summary>
            Block until all bytes in the queue have been transmitted.
            </summary>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.GetQueueStatus">
            <summary>
            Get the status of the queues
            </summary>
            <returns>Queue status object</returns>
        </member>
        <member name="P:NLib.Components.Devices.SerialPorts.SerialPortAccess.Immediate">
            <summary>
            Get/Set Immediate Mode.
            </summary>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.IsCongested">
            <summary>
            Test if the line is congested (data being queued for send faster than it is being dequeued)
            This detects if baud rate is too slow or if handshaking is not allowing enough transmission
            time. It should be called at reasonably long fixed intervals. If data has been sent during
            the interval, congestion is reported if the queue was never empty during the interval.
            </summary>
            <returns>True if congested</returns>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.IsPortAvailable(System.String)">
            <summary>
            Check Port is avaliable
            </summary>
            <param name="portname">name of port</param>
            <returns>Port Status</returns>
        </member>
        <member name="P:NLib.Components.Devices.SerialPorts.SerialPortAccess.Online">
            <summary>
            True if online.
            </summary>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Send(System.String,System.Boolean)">
            <summary>
            Send
            </summary>
            <param name="dataToSend">Data to Send in string</param>
            <param name="includeNewLine">Include new line character at and of byte.</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Send(System.String)">
            <summary>
            Send
            </summary>
            <param name="dataToSend">Data to Send in string</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Send(System.Byte[])">
            <summary>
            Send
            </summary>
            <param name="buffers">Data to Send in byte array</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.Send(System.Byte[],System.Boolean)">
            <summary>
            Send
            </summary>
            <param name="buffers">Data to Send in byte array</param>
            <param name="includeNewLine">Include new line character at and of byte.</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.SendChar(System.Byte)">
            <summary>
            Send Character to port
            </summary>
            <param name="c">Byte to send.</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.SendCtrl(System.String)">
            <summary>
            Send control's string to port
            </summary>
            <param name="s">Control string to send.</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.SendFile(System.IO.FileStream)">
            <summary>
            Send FileStream to port
            </summary>
            <param name="fs">The FileStream object.</param>
        </member>
        <member name="P:NLib.Components.Devices.SerialPorts.SerialPortAccess.Settings">
            <summary>
            Gets Port Settings instance.
            </summary>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.ApplyDefaultSetting(System.String)">
            <summary>
            Apply Default Setting. The default setting is assign the serial port
            with baudrate -> 9600, parity -> none, data bits -> 8, stop bits -> one
            or (9600, 8, n, 1) and this method will also set Immediate property to true and set
            autoReport setting to false.
            Note when call this method if the port is online
            it's will automatically close.
            </summary>
            <param name="portName">The serial port name. like COM1:</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.LoadSetting(System.String)">
            <summary>
            Load Setting
            </summary>
            <param name="configfile">The config file name.</param>
        </member>
        <member name="M:NLib.Components.Devices.SerialPorts.SerialPortAccess.SaveSetting(System.String)">
            <summary>
            Save Setting
            </summary>
            <param name="configfile">The config file name.</param>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalSettingChanged">
            <summary>
            OnTerminalSettingChanged event.
            </summary>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalOpenning">
            <summary>
            OnTerminalOpenning event.
            </summary>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalClosing">
            <summary>
            OnTerminalClosing event.
            </summary>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalBreak">
            <summary>
            OnTerminalBreak event.
            </summary>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalRx">
            <summary>
            OnTerminalRx event.
            </summary>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalStatusChanged">
            <summary>
            OnTerminalStatusChanged event.
            </summary>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalMessage">
            <summary>
            OnTerminalMessage event.
            </summary>
        </member>
        <member name="E:NLib.Components.Devices.SerialPorts.SerialPortAccess.OnTerminalException">
            <summary>
            OnTerminalException event.
            </summary>
        </member>
        <member name="T:NLib.Components.Scada.DdeClientComponent">
            <summary>
            DDE Client abstract class.
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.DdeClientComponent.ServiceName">
            <summary>
            Get Service's Name.
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.DdeClientComponent.TopicName">
            <summary>
            Get Topic's Name.
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.DdeClientComponent.IsConnected">
            <summary>
            Check is connected or not.
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.Connect">
            <summary>
            Connect to DDE Server.
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.Disconnect">
            <summary>
            Disconnect from DDE Server.
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.GetData``1(System.String)">
            <summary>
            Get Data (Generic version.)
            </summary>
            <typeparam name="T">The target data type.</typeparam>
            <param name="itemName">The item's name to get data.</param>
            <returns>Return data that read from DDE server. If error occur the default value
            of speficied type is return.</returns>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.GetData``1(System.String,``0)">
            <summary>
            Get Data (Generic version.)
            </summary>
            <typeparam name="T">The target data type.</typeparam>
            <param name="itemName">The item's name to get data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Return data that read from DDE server. If error occur the default value
            of speficied type is return.</returns>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.GetData(System.String)">
            <summary>
            Get Data
            </summary>
            <param name="itemName">The item's name to get data.</param>
            <returns>Return data in string that read from DDE server.</returns>
        </member>
        <member name="M:NLib.Components.Scada.DdeClientComponent.GetData(System.String,System.Int32,System.Boolean@)">
            <summary>
            Get Data
            </summary>
            <param name="itemName">The item's name to get data.</param>
            <param name="timeout">The timeout interval.</param>
            <param name="isTimeout">The reference variable to notify timeoout flag.</param>
            <returns>Return data in string that read from DDE server.</returns>
        </member>
        <member name="T:NLib.Components.Scada.ExcelDdeClient">
            <summary>
            Excel Dde Client
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.ExcelDdeClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.ExcelDdeClient.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.ExcelDdeClient.ServiceName">
            <summary>
            Get Service's Name.
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.ExcelDdeClient.TopicName">
            <summary>
            Get Topic's Name.
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.ExcelDdeClient.SheetName">
            <summary>
            Get/Set Sheet Name to read/write data.
            </summary>
        </member>
        <member name="T:NLib.Components.Scada.InTouchDdeClient">
            <summary>
            InTouch Dde Client.
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.InTouchDdeClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Components.Scada.InTouchDdeClient.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.InTouchDdeClient.ServiceName">
            <summary>
            Get Service's Name.
            </summary>
        </member>
        <member name="P:NLib.Components.Scada.InTouchDdeClient.TopicName">
            <summary>
            Get Topic's Name.
            </summary>
        </member>
        <member name="T:NLib.Components.PingManager">
            <summary>
            Ping Manager component. This component is wrapper component that provide
            ping (in multithread) service.
            </summary>
        </member>
        <member name="M:NLib.Components.PingManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Components.PingManager.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Components.PingManager.RaiseEvent(System.Delegate,System.Object[])">
            <summary>
            Raise event.
            </summary>
            <param name="del">The delegate.</param>
            <param name="args">Tee delegate args.</param>
        </member>
        <member name="M:NLib.Components.PingManager.Start">
            <summary>
            Start service.
            </summary>
        </member>
        <member name="M:NLib.Components.PingManager.Start(System.Boolean)">
            <summary>
            Start service.
            </summary>
            <param name="autoRestart">Auto restart if already started.</param>
        </member>
        <member name="M:NLib.Components.PingManager.Stop">
            <summary>
            Stop service.
            </summary>
        </member>
        <member name="M:NLib.Components.PingManager.Add(System.String)">
            <summary>
            Add Host. Note. that host name will convert internally to lowercase. So
            when event is raise the hostname information is the lowercase too.
            </summary>
            <param name="hostName">The host name to add in ping list.</param>
        </member>
        <member name="M:NLib.Components.PingManager.AddRange(System.String[])">
            <summary>
            Add Host name's array. Note. that host name will convert internally to lowercase. So
            when event is raise the hostname information is the lowercase too.
            </summary>
            <param name="hostNames">The Host Name arrays</param>
        </member>
        <member name="M:NLib.Components.PingManager.Remove(System.String)">
            <summary>
            Remove Host
            </summary>
            <param name="hostName">The host name to remove.</param>
        </member>
        <member name="M:NLib.Components.PingManager.Clear">
            <summary>
            Clear all hosts
            </summary>
        </member>
        <member name="M:NLib.Components.PingManager.GetHosts">
            <summary>
            Get Host List
            </summary>
            <returns>Return array of host name in ping list.</returns>
        </member>
        <member name="P:NLib.Components.PingManager.Interval">
            <summary>
            Get/Set Ping Interval in millisecond. min value 500 ms. default 30000 ms.
            </summary>
        </member>
        <member name="E:NLib.Components.PingManager.OnReply">
            <summary>
            OnReply Event. occur when ping is replied or timeout after ping is called.
            </summary>
        </member>
        <member name="E:NLib.Components.PingManager.HostListChanged">
            <summary>
            HostListChanged Event. Occur when host list is add/remove or clear.
            </summary>
        </member>
        <member name="E:NLib.Components.PingManager.PingProcessStart">
            <summary>
            PingProcessStart Event. Occur when ping interval is reach and process is start.
            </summary>
        </member>
        <member name="E:NLib.Components.PingManager.PingProcessFinished">
            <summary>
            PingProcessFinished Event. Occur when ping process is finished.
            </summary>
        </member>
        <member name="T:NLib.Design.PropertyOrderPair">
            <summary>
            PropertyOrderPair used for compare property order.
            </summary>
        </member>
        <member name="M:NLib.Design.PropertyOrderPair.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Property Name</param>
            <param name="order">Property Order</param>
        </member>
        <member name="M:NLib.Design.PropertyOrderPair.CompareTo(System.Object)">
            <summary>
            IComparable CompareTo Implement
            </summary>
            <param name="obj">object to compare with current object</param>
            <returns>see IComparable.CompareTo Document</returns>
        </member>
        <member name="P:NLib.Design.PropertyOrderPair.Name">
            <summary>
            Get Property Name
            </summary>
        </member>
        <member name="T:NLib.Design.PropertyOrderAttribute">
            <summary>
            Property Order Attribute Class for Custom Sort Property in Property Grid
            </summary>
        </member>
        <member name="M:NLib.Design.PropertyOrderAttribute.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="order">Property's Order. default value is 1</param>
        </member>
        <member name="P:NLib.Design.PropertyOrderAttribute.Order">
            <summary>
            Get Property Order. default value is 1
            </summary>
        </member>
        <member name="T:NLib.Design.PropertySorterSupportTypeConverter">
            <summary>
            Property Sorter Support Type Converter abstract Class for Custom Sort Property in Property Grid
            </summary>
        </member>
        <member name="M:NLib.Design.PropertySorterSupportTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            see TypeConverter.GetPropertiesSupported Document
            </summary>
            <param name="context">see TypeConverter Document</param>
            <returns>see TypeConverter Document</returns>
        </member>
        <member name="M:NLib.Design.PropertySorterSupportTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            see TypeConverter.GetProperties Document
            </summary>
            <param name="context">see TypeConverter Document</param>
            <param name="value">see TypeConverter Document</param>
            <param name="attributes">see TypeConverter Document</param>
            <returns>see TypeConverter Document</returns>
        </member>
        <member name="T:NLib.Design.PropertySorterSupportExpandableTypeConverter">
            <summary>
            Property Sorter Support Expandable Type Converter abstract Class for Custom Sort Property in Property Grid
            </summary>
        </member>
        <member name="M:NLib.Design.PropertySorterSupportExpandableTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            see ExpandableObjectConverter.GetPropertiesSupported Document
            </summary>
            <param name="context">see ExpandableObjectConverter Document</param>
            <returns>see ExpandableObjectConverter Document</returns>
        </member>
        <member name="M:NLib.Design.PropertySorterSupportExpandableTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            see ExpandableObjectConverter.GetProperties Document
            </summary>
            <param name="context">see ExpandableObjectConverter Document</param>
            <param name="value">see ExpandableObjectConverter Document</param>
            <param name="attributes">see ExpandableObjectConverter Document</param>
            <returns>see ExpandableObjectConverter Document</returns>
        </member>
        <member name="T:NLib.Design.AbstractTypeConverter">
            <summary>
            Abstract Type Converter class
            </summary>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertTo. By default implementation only handle when 
            destinationType is System.String or 
            System.ComponentModel.Design.Serialization.InstanceDescriptor
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="destinationType">Destination Type in this case is System.String or
            System.ComponentModel.Design.Serialization.InstanceDescriptor</param>
            <returns>True if condition is match. in this case when destination type is
            System.String or System.ComponentModel.Design.Serialization.InstanceDescriptor
            this method will return true</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertTo
            
            Note.
            For destination type is System.String
            ------------------------------------------
            Handle convert to String. this used when property grid need to
            display custom information about selected object that current edit
            for example when edit object in collection editor sometime
            we need to display user friendly information rather than
            show object type (by default if not implement this method)
            we need to check and format the display information here.
            beware when implement this method please make sure that format
            that used to display on convert to string is match with format
            that implement in ConvertFrom Method
            
            For destination type is InstanceDescriptor
            ------------------------------------------
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="culture">culture information in some proeprty this
            parameter is need to check</param>
            <param name="value">value to convert</param>
            <param name="destinationType">target type to transform</param>
            <returns>object instance that has same type as destination type</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertFrom. By default this class is handle only source type is System.String
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="sourceType">Type of Source component</param>
            <returns>True if condition is match in this case if source type is System.String
            it's will return true otherwise return base.CanConvertFrom(...)</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertFrom
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="culture">culture information in some proeprty this
            parameter is need to check</param>
            <param name="value">value to convert</param>
            <returns>object instance that convert from value parameter</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.CanConvertToDisplayString(System.Globalization.CultureInfo,System.Object)">
            <summary>
            CanConvertToDisplayString override when the interited class is implement
            ConvertToDisplayString method. see ConvertTo for more information
            </summary>
            <param name="culture">culture information</param>
            <param name="value">object to check</param>
            <returns>true if ConvertToDisplayString method is impment for target
            object by default return true</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.ConvertToDisplayString(System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertToDisplayString  override when the interited class need to format display
            string for target object for user friendly information about target object.
            see ConvertTo for more information
            </summary>
            <param name="culture">culture information</param>
            <param name="value">target object to format display on proeprty grid</param>
            <returns>format string for target object by default will return value.ToString()</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.CanConvertFormDisplayString(System.Globalization.CultureInfo,System.String)">
            <summary>
            CanConvertFormDisplayString override this method when ConvertFormDisplayString
            is implement(override)
            </summary>
            <param name="culture">culture information</param>
            <param name="value">string to check</param>
            <returns>true if object is match and ConvertFormDisplayString is implement.
            by default will return false.</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.ConvertFormDisplayString(System.Globalization.CultureInfo,System.String)">
            <summary>
            ConvertFormDisplayString override to create new instance from format string
            note that the format in ConvertFromDisplayString and ConvertToDisplayString
            should match see ConvertToDisplayString for more information
            </summary>
            <param name="culture">culture information</param>
            <param name="value">string to convert</param>
            <returns>new object instance that convert from string. by default return null.</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.CanConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            CanConvertToInstanceDescriptor override to handle ConvertToInstanceDescriptor method
            by default this method is return false
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to check</param>
            <returns>true if ConvertToInstanceDescriptor is implement.
            by default this method is return false</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.ConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertToInstanceDescriptor override to implement how to create new instance
            descriptor by specificed object instance. to create new instance descriptor
            we need to specificed proper constructor with types and values that match which
            the constructor.
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to convert</param>
            <returns>return new InstanceDescriptor instance. by default this method will
            return null. see CreateInstanceDescriptor for helper method that will help to
            create new InstanceDescriptor</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.CreateInstanceDescriptor(System.Type,System.Type[],System.Object[])">
            <summary>
            CreateInstanceDescriptor
            </summary>
            <param name="targetType">Target Object Type</param>
            <param name="types">Type of Parameters in Constructor that need to used for
            create new instance</param>
            <param name="properties">Value of Parameters then match types and need for
            create new instance</param>
            <returns>new InstanceDescriptor object</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.ExtractDisplayStrings(System.String)">
            <summary>
            Extract Display Strings
            </summary>
            <param name="value">Display string</param>
            <returns>Array of string that used to be constructor parameter</returns>
        </member>
        <member name="M:NLib.Design.AbstractTypeConverter.ExtractDisplayStrings(System.String,System.Char[])">
            <summary>
            Extract Display Strings
            </summary>
            <param name="value">Display string</param>
            <param name="delimeterChars">Delimeter Chars</param>
            <returns>Array of string that used to be constructor parameter</returns>
        </member>
        <member name="T:NLib.Design.AbstractExpandableTypeConverter">
            <summary>
            Abstract Expandable TypeConverter class
            </summary>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertTo. By default implementation only handle when 
            destinationType is System.String or 
            System.ComponentModel.Design.Serialization.InstanceDescriptor
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="destinationType">Destination Type in this case is System.String or
            System.ComponentModel.Design.Serialization.InstanceDescriptor</param>
            <returns>True if condition is match. in this case when destination type is
            System.String or System.ComponentModel.Design.Serialization.InstanceDescriptor
            this method will return true</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertTo
            Note.
            
            For destination type is System.String
            ------------------------------------------
            Handle convert to String. this used when property grid need to
            display custom information about selected object that current edit
            for example when edit object in collection editor sometime
            we need to display user friendly information rather than
            show object type (by default if not implement this method)
            we need to check and format the display information here.
            beware when implement this method please make sure that format
            that used to display on convert to string is match with format
            that implement in ConvertFrom Method
            
            For destination type is InstanceDescriptor
            ------------------------------------------
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="culture">culture information in some proeprty this
            parameter is need to check</param>
            <param name="value">value to convert</param>
            <param name="destinationType">target type to transform</param>
            <returns>object instance that has same type as destination type</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertFrom. By default this class is handle only source type is System.String
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="sourceType">Type of Source component</param>
            <returns>True if condition is match in this case if source type is System.String
            it's will return true otherwise return base.CanConvertFrom(...)</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertFrom
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="culture">culture information in some proeprty this
            parameter is need to check</param>
            <param name="value">value to convert</param>
            <returns>object instance that convert from value parameter</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetCreateInstanceSupported. Default this method will return true to force
            create new instance when sub proeprties is about to changed
            for example if we has class A that contain class B as property and class
            B has 2 properties like X and Y. So changed occur with X or Y property
            will cause to create new instance of class B and the property grid will
            assign new instance to editting object (class A's instance)
            </summary>
            <param name="context">Type Descriptor Context Interface's instance</param>
            <returns>true if support create instance</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.CanConvertToDisplayString(System.Globalization.CultureInfo,System.Object)">
            <summary>
            CanConvertToDisplayString override when the interited class is implement
            ConvertToDisplayString method. see ConvertTo for more information
            </summary>
            <param name="culture">culture information</param>
            <param name="value">object to check</param>
            <returns>true if ConvertToDisplayString method is impment for target
            object by default return true</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.ConvertToDisplayString(System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertToDisplayString  override when the interited class need to format display
            string for target object for user friendly information about target object.
            see ConvertTo for more information
            </summary>
            <param name="culture">culture information</param>
            <param name="value">target object to format display on proeprty grid</param>
            <returns>format string for target object by default will return value.ToString()</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.CanConvertFormDisplayString(System.Globalization.CultureInfo,System.String)">
            <summary>
            CanConvertFormDisplayString override this method when ConvertFormDisplayString
            is implement(override)
            </summary>
            <param name="culture">culture information</param>
            <param name="value">string to check</param>
            <returns>true if object is match and ConvertFormDisplayString is implement.
            by default will return false.</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.ConvertFormDisplayString(System.Globalization.CultureInfo,System.String)">
            <summary>
            ConvertFormDisplayString override to create new instance from format string
            note that the format in ConvertFromDisplayString and ConvertToDisplayString
            should match see ConvertToDisplayString for more information
            </summary>
            <param name="culture">culture information</param>
            <param name="value">string to convert</param>
            <returns>new object instance that convert from string. by default return null.</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.CanConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            CanConvertToInstanceDescriptor override to handle ConvertToInstanceDescriptor method
            by default this method is return false
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to check</param>
            <returns>true if ConvertToInstanceDescriptor is implement.
            by default this method is return false</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.ConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertToInstanceDescriptor override to implement how to create new instance
            descriptor by specificed object instance. to create new instance descriptor
            we need to specificed proper constructor with types and values that match which
            the constructor.
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to convert</param>
            <returns>return new InstanceDescriptor instance. by default this method will
            return null. see CreateInstanceDescriptor for helper method that will help to
            create new InstanceDescriptor</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.CreateInstanceDescriptor(System.Type,System.Type[],System.Object[])">
            <summary>
            CreateInstanceDescriptor
            </summary>
            <param name="targetType">Target Object Type</param>
            <param name="types">Type of Parameters in Constructor that need to used for
            create new instance</param>
            <param name="properties">Value of Parameters then match types and need for
            create new instance</param>
            <returns>new InstanceDescriptor object</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.CreateInstanceFromProperties(System.Collections.IDictionary)">
            <summary>
            CreateInstanceFromProperties
            </summary>
            <param name="propertyValues">List of property's values that need to create
            new object instance</param>
            <returns>new object instance that need to assigned to owner's object
            by default this method will return null</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.ExtractDisplayStrings(System.String)">
            <summary>
            Extract Display Strings
            </summary>
            <param name="value">Display string</param>
            <returns>Array of string that used to be constructor parameter</returns>
        </member>
        <member name="M:NLib.Design.AbstractExpandableTypeConverter.ExtractDisplayStrings(System.String,System.Char[])">
            <summary>
            Extract Display Strings
            </summary>
            <param name="value">Display string</param>
            <param name="delimeterChars">Delimeter Chars</param>
            <returns>Array of string that used to be constructor parameter</returns>
        </member>
        <member name="T:NLib.Design.CoreTypeConverter">
            <summary>
            Core Type Converter. All Typeconverter should inherited from this class
            </summary>
        </member>
        <member name="M:NLib.Design.CoreTypeConverter.#ctor">
            <summary>
            Constructor (protected)
            </summary>
        </member>
        <member name="M:NLib.Design.CoreTypeConverter.#ctor(System.Type,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="type">Target Type</param>
            <param name="properties">Properties that used for Constructor parameters</param>
        </member>
        <member name="P:NLib.Design.CoreTypeConverter.ObjectType">
            <summary>
            Get Object Type or Class Type
            </summary>
        </member>
        <member name="P:NLib.Design.CoreTypeConverter.Properties">
            <summary>
            Get Properties that used for Constructor Parameters
            </summary>
        </member>
        <member name="P:NLib.Design.CoreTypeConverter.ConstructorParameterTypes">
            <summary>
            Get Constructor Parameter Types
            </summary>
        </member>
        <member name="M:NLib.Design.CoreTypeConverter.CanConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            CanConvertToInstanceDescriptor override to handle ConvertToInstanceDescriptor method
            by default this method is return false
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to check</param>
            <returns>true if ConvertToInstanceDescriptor is implement.
            by default this method is return false</returns>
        </member>
        <member name="M:NLib.Design.CoreTypeConverter.ConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertToInstanceDescriptor override to implement how to create new instance
            descriptor by specificed object instance. to create new instance descriptor
            we need to specificed proper constructor with types and values that match which
            the constructor.
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to convert</param>
            <returns>return new InstanceDescriptor instance. by default this method will
            return null. see CreateInstanceDescriptor for helper method that will help to
            create new InstanceDescriptor</returns>
        </member>
        <member name="T:NLib.Design.CoreExpandableTypeConverter">
            <summary>
            Core Expandable Type Converter. All Expandable Typeconverter should inherited from this class
            </summary>
        </member>
        <member name="M:NLib.Design.CoreExpandableTypeConverter.#ctor">
            <summary>
            Constructor (protected)
            </summary>
        </member>
        <member name="P:NLib.Design.CoreExpandableTypeConverter.ObjectType">
            <summary>
            Get Object Type or Class Type
            </summary>
        </member>
        <member name="P:NLib.Design.CoreExpandableTypeConverter.Properties">
            <summary>
            Get Properties that used for Constructor Parameters
            </summary>
        </member>
        <member name="P:NLib.Design.CoreExpandableTypeConverter.ConstructorParameterTypes">
            <summary>
            Get Constructor Parameter Types
            </summary>
        </member>
        <member name="M:NLib.Design.CoreExpandableTypeConverter.CanConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            CanConvertToInstanceDescriptor override to handle ConvertToInstanceDescriptor method
            by default this method is return false
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to check</param>
            <returns>true if ConvertToInstanceDescriptor is implement.
            by default this method is return false</returns>
        </member>
        <member name="M:NLib.Design.CoreExpandableTypeConverter.ConvertToInstanceDescriptor(System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertToInstanceDescriptor override to implement how to create new instance
            descriptor by specificed object instance. to create new instance descriptor
            we need to specificed proper constructor with types and values that match which
            the constructor.
            </summary>
            <param name="culture">culture information</param>
            <param name="value">value to convert</param>
            <returns>return new InstanceDescriptor instance. by default this method will
            return null. see CreateInstanceDescriptor for helper method that will help to
            create new InstanceDescriptor</returns>
        </member>
        <member name="M:NLib.Design.CoreExpandableTypeConverter.CreateInstanceFromProperties(System.Collections.IDictionary)">
            <summary>
            CreateInstanceFromProperties
            </summary>
            <param name="propertyValues">List of property's values that need to create
            new object instance</param>
            <returns>new object instance that need to assigned to owner's object
            by default this method will return null</returns>
        </member>
        <member name="T:NLib.Design.CustomDropDownPropertyEditor">
            <summary>
            Custom DropDown Property Editor (abstract) for Dropdown list style property's editor
            </summary>
        </member>
        <member name="P:NLib.Design.CustomDropDownPropertyEditor.DropdownWidth">
            <summary>
            Get/Set Dropdown Width
            </summary>
        </member>
        <member name="M:NLib.Design.CustomDropDownPropertyEditor.ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Track changed when user commit selection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Design.CustomDropDownPropertyEditor.SetEditorProps(System.Object,System.Windows.Forms.ListBox)">
            <summary>
            SetEditorProps override to initialization the list box in popup window
            </summary>
            <param name="editingInstance">object to edit</param>
            <param name="editor">List box to used in Popup window</param>
        </member>
        <member name="M:NLib.Design.CustomDropDownPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="provider">see IServiceProvider</param>
            <param name="value">object to edit</param>
            <returns>object instance after edit</returns>
        </member>
        <member name="M:NLib.Design.CustomDropDownPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle (Default is Dropdown)
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle Type (Default is Dropdown)</returns>
        </member>
        <member name="T:NLib.Design.CustomDropDownFlagEditor">
            <summary>
            Custom Dropdown Flag Editor (abstract) for Dropdown list style flag's editor
            </summary>
        </member>
        <member name="T:NLib.Design.CustomDropDownFlagEditor.clbItem">
            <summary>
            Internal class used for storing custom data in listviewitems
            </summary>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.clbItem.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a new instance of the <c>clbItem</c>
            </summary>
            <param name="str">The string to display in the <c>ToString</c> method. 
            It will contains the name of the flag</param>
            <param name="value">The integer value of the flag</param>
            <param name="tooltip">The tooltip to display in the <see cref="T:System.Windows.Forms.CheckedListBox"/></param>
        </member>
        <member name="P:NLib.Design.CustomDropDownFlagEditor.clbItem.Value">
            <summary>
            Gets the int value for this item
            </summary>
        </member>
        <member name="P:NLib.Design.CustomDropDownFlagEditor.clbItem.Tooltip">
            <summary>
            Gets the tooltip for this item
            </summary>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.clbItem.ToString">
            <summary>
            Gets the name of this item
            </summary>
            <returns>The name passed in the constructor</returns>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.SetEditorProps(System.Object,System.Windows.Forms.CheckedListBox)">
            <summary>
            SetEditorProps override to initialization the list box in popup window
            </summary>
            <param name="editingInstance">object to edit</param>
            <param name="editor">Checked List box to used in Popup window</param>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="provider">see IServiceProvider</param>
            <param name="value">object to edit</param>
            <returns>object instance after edit</returns>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            When got the focus, handle the lost focus event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.OnMouseMoved(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is moved over the checkedlistbox. 
            Sets the tooltip of the item under the pointer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Close the dropdowncontrol when the user has selected a value
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Design.CustomDropDownFlagEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle (Default is Dropdown)
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle Type (Default is Dropdown)</returns>
        </member>
        <member name="T:NLib.Design.EnumFlagsEditor">
            <summary>
            Enum Flags Editor (General used)
            </summary>
        </member>
        <member name="T:NLib.Design.CustomPropertyEditForm">
            <summary>
            Custom Property Edit's Form (abstract)
            </summary>
        </member>
        <member name="M:NLib.Design.CustomPropertyEditForm.SetEditValue(System.Object,System.Object)">
            <summary>
            Set Edit Value
            </summary>
            <param name="obj">object's owner</param>
            <param name="value">property's value to edit</param>
        </member>
        <member name="M:NLib.Design.CustomPropertyEditForm.GetEditValue(System.Object)">
            <summary>
            Get Edit Value
            </summary>
            <param name="obj">object's owner</param>
            <returns>property's value after edit</returns>
        </member>
        <member name="T:NLib.Design.CustomModalPropertyEditor">
            <summary>
            Custom Modal Property Editor (abstract) for Modal Dialog style property's editor
            </summary>
        </member>
        <member name="M:NLib.Design.CustomModalPropertyEditor.CreateEditForm">
            <summary>
            CreateEditForm
            </summary>
            <returns>CustomPropertyEditForm instance</returns>
        </member>
        <member name="M:NLib.Design.CustomModalPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <param name="provider">see IServiceProvider</param>
            <param name="value">object to edit</param>
            <returns>object instance after edit</returns>
        </member>
        <member name="M:NLib.Design.CustomModalPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle (Default is Modal)
            </summary>
            <param name="context">see ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle Type (Default is Modal)</returns>
        </member>
        <member name="T:NLib.Design.SaveFileEditor">
            <summary>
            Generic Save File Editor
            </summary>
        </member>
        <member name="M:NLib.Design.SaveFileEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Setup EditStyle (Default is UITypeEditorEditStyle.Modal)
            </summary>
            <param name="context">ITypeDescriptorContext object's instance</param>
            <returns>UITypeEditorEditStyle that used with PropertyGrid</returns>
        </member>
        <member name="M:NLib.Design.SaveFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            See System.Drawing.Design.UITypeEditor Document
            </summary>
            <param name="context">ITypeDescriptorContext object's instance</param>
            <param name="provider">IServiceProvider object's instance</param>
            <param name="value">object instance for edit</param>
            <returns>result after edit completed</returns>
        </member>
        <member name="M:NLib.Design.SaveFileEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initialize Dialog before process Saving
            </summary>
            <param name="saveFileDialog">Save Dialog Instance</param>
        </member>
        <member name="T:NLib.Design.SaveTextFileEditor">
            <summary>
            Generic Save Text File Editor
            </summary>
        </member>
        <member name="M:NLib.Design.SaveTextFileEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Setup EditStyle (Default is UITypeEditorEditStyle.Modal)
            </summary>
            <param name="context">ITypeDescriptorContext object's instance</param>
            <returns>UITypeEditorEditStyle that used with PropertyGrid</returns>
        </member>
        <member name="M:NLib.Design.SaveTextFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            See System.Drawing.Design.UITypeEditor Document
            </summary>
            <param name="context">ITypeDescriptorContext object's instance</param>
            <param name="provider">IServiceProvider object's instance</param>
            <param name="value">object instance for edit</param>
            <returns>result after edit completed</returns>
        </member>
        <member name="M:NLib.Design.SaveTextFileEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initialize Dialog before process Saving
            </summary>
            <param name="saveFileDialog">Save Dialog Instance</param>
        </member>
        <member name="T:NLib.Forms.Devices.SerialPorts.InfoForm">
            <summary>
            Information Form
            </summary>
        </member>
        <member name="F:NLib.Forms.Devices.SerialPorts.InfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.InfoForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.InfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.InfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.InfoForm.SetTerminal(NLib.Devices.SerialPorts.CommTerminal)">
            <summary>
            Set Terminal
            </summary>
            <param name="terminal"></param>
        </member>
        <member name="T:NLib.Forms.Devices.SerialPorts.SettingsForm">
            <summary>
            Settings Form
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.SettingsForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.SettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.SettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NLib.Forms.Devices.SerialPorts.SettingsForm.Terminal">
            <summary>
            Get/Set Terminal (Bast Term)
            </summary>
        </member>
        <member name="T:NLib.Forms.Devices.SerialPorts.TermForm">
            <summary>
            Terminal Form
            </summary>
        </member>
        <member name="P:NLib.Forms.Devices.SerialPorts.TermForm.Terminal">
            <summary>
            Get/Set Terminal (BaseTerm)
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.ShowException(NLib.Devices.SerialPorts.CommPortException)">
            <summary>
            ShowException
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.ShowChar(System.String,System.Boolean)">
            <summary>
            ShowChar
            </summary>
            <param name="s"></param>
            <param name="nl"></param>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.ShowMsg(System.String)">
            <summary>
            ShowMsg
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.SetIndics(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            SetIndics
            </summary>
            <param name="CTS"></param>
            <param name="DSR"></param>
            <param name="RLSD"></param>
            <param name="Rng"></param>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.OnClose">
            <summary>
            OnClose
            </summary>
        </member>
        <member name="M:NLib.Forms.Devices.SerialPorts.TermForm.OnOpen">
            <summary>
            OnOpen
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommStatusChangedEventHandler">
            <summary>
            CommStatusChangedEventHandler delegate
            </summary>
            <param name="cts"></param>
            <param name="dsr"></param>
            <param name="rlsd"></param>
            <param name="ring"></param>
        </member>
        <member name="T:NLib.Devices.SerialPorts.RxCharEventHandler">
            <summary>
            RxCharEventHandler delegate
            </summary>
            <param name="ch"></param>
            <param name="newline"></param>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommExceptionEventHandler">
            <summary>
            CommExceptionEventHandler delegate
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommMessageEventHandler">
            <summary>
            CommMessageEventHandler delegate
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommPortException">
            <summary>
            Exception used for all errors.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommPortException.#ctor(System.String)">
            <summary>
            Constructor for raising direct exceptions
            </summary>
            <param name="desc">Description of error</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommPortException.#ctor(System.Exception)">
            <summary>
            Constructor for re-raising exceptions from receive thread
            </summary>
            <param name="e">Inner exception raised on receive thread</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.Win32Com.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Opening Testing and Closing the Port Handle.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.Win32Com.GetCommState(System.IntPtr,NLib.Devices.SerialPorts.Win32Com.DCB@)">
            <summary>
            Manipulating the communications settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.Win32Com.WriteFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Reading and writing.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.Win32Com.EscapeCommFunction(System.IntPtr,System.UInt32)">
            <summary>
            Control port functions.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.Win32Com.GetOverlappedResult(System.IntPtr,System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>
            Status Functions.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.Parity">
            <summary>
            Parity settings
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Parity.none">
            <summary>
            Characters do not have a parity bit.
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Parity.odd">
            <summary>
            If there are an odd number of 1s in the data bits, the parity bit is 1.
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Parity.even">
            <summary>
            If there are an even number of 1s in the data bits, the parity bit is 1.
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Parity.mark">
            <summary>
            The parity bit is always 1.
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Parity.space">
            <summary>
            The parity bit is always 0.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.StopBits">
            <summary>
            Stop bit settings
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.StopBits.one">
            <summary>
            Line is asserted for 1 bit duration at end of each character
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.StopBits.onePointFive">
            <summary>
            Line is asserted for 1.5 bit duration at end of each character
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.StopBits.two">
            <summary>
            Line is asserted for 2 bit duration at end of each character
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.HSOutput">
            <summary>
            Uses for RTS or DTR pins
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.HSOutput.handshake">
            <summary>
            Pin is asserted when this station is able to receive data.
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.HSOutput.gate">
            <summary>
            Pin is asserted when this station is transmitting data (RTS on NT, 2000 or XP only).
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.HSOutput.online">
            <summary>
            Pin is asserted when this station is online (port is open).
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.HSOutput.none">
            <summary>
            Pin is never asserted.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.Handshake">
            <summary>
            Standard handshake methods
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Handshake.none">
            <summary>
            No handshaking
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Handshake.XonXoff">
            <summary>
            Software handshaking using Xon / Xoff
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Handshake.CtsRts">
            <summary>
            Hardware handshaking using CTS / RTS
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.Handshake.DsrDtr">
            <summary>
            Hardware handshaking using DSR / DTR
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.ASCII">
            <summary>
            Byte type with enumeration constants for ASCII control codes.
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.NULL">
            <summary>
            NULL
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.SOH">
            <summary>
            SOH
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.STX">
            <summary>
            STX
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.ETX">
            <summary>
            ETX
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.EOT">
            <summary>
            EOT
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.ENQ">
            <summary>
            ENQ
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.ACK">
            <summary>
            ACK
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.BELL">
            <summary>
            BELL
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.BS">
            <summary>
            BS
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.HT">
            <summary>
            HT
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.LF">
            <summary>
            LF
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.VT">
            <summary>
            VT
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.FF">
            <summary>
            FF
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.CR">
            <summary>
            CR
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.SO">
            <summary>
            SO
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.SI">
            <summary>
            SI
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.DC1">
            <summary>
            DC1
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.DC2">
            <summary>
            DC2
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.DC3">
            <summary>
            DC3
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.DC4">
            <summary>
            DC4
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.NAK">
            <summary>
            NAK
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.SYN">
            <summary>
            SYN
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.ETB">
            <summary>
            ETB
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.CAN">
            <summary>
            CAN
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.EM">
            <summary>
            EM
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.SUB">
            <summary>
            SUB
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.ESC">
            <summary>
            ESC
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.FS">
            <summary>
            FS
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.GS">
            <summary>
            GS
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.RS">
            <summary>
            RS
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.US">
            <summary>
            US
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.SP">
            <summary>
            SP
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.ASCII.DEL">
            <summary>
            DEL
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.PortStatus">
            <summary>
            Availability status of a port
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.PortStatus.unavailable">
            <summary>
            Port exists but is unavailable (may be open to another program)
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.PortStatus.available">
            <summary>
            Available for use
            </summary>
        </member>
        <member name="F:NLib.Devices.SerialPorts.PortStatus.absent">
            <summary>
            Port does not exist
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.ModemStatus">
            <summary>
            Represents the status of the modem control input signals.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.ModemStatus.cts">
            <summary>
            Condition of the Clear To Send signal.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.ModemStatus.dsr">
            <summary>
            Condition of the Data Set Ready signal.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.ModemStatus.rlsd">
            <summary>
            Condition of the Receive Line Status Detection signal.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.ModemStatus.ring">
            <summary>
            Condition of the Ring Detection signal.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.QueueStatus">
            <summary>
            Represents the current condition of the port queues.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.QueueStatus.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="stat"></param>
            <param name="inQ"></param>
            <param name="outQ"></param>
            <param name="inQs"></param>
            <param name="outQs"></param>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.ctsHold">
            <summary>
            Output is blocked by CTS handshaking.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.dsrHold">
            <summary>
            Output is blocked by DRS handshaking.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.rlsdHold">
            <summary>
            Output is blocked by RLSD handshaking.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.xoffHold">
            <summary>
            Output is blocked because software handshaking is enabled and XOFF was received.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.xoffSent">
            <summary>
            Output was blocked because XOFF was sent and this station is not yet ready to receive.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.immediateWaiting">
            <summary>
            There is a character waiting for transmission in the immediate buffer.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.InQueue">
            <summary>
            Number of bytes waiting in the input queue.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.OutQueue">
            <summary>
            Number of bytes waiting for transmission.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.InQueueSize">
            <summary>
            Total size of input queue (0 means information unavailable)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueStatus.OutQueueSize">
            <summary>
            Total size of output queue (0 means information unavailable)
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.QueueStatus.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLib.Devices.SerialPorts.BasicSetting">
            <summary>
            The Serial Port Basic Setting.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BasicSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BasicSetting.Port">
            <summary>
            Port Name (default: "COM1:")
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BasicSetting.BaudRate">
            <summary>
            Baud Rate (default: 2400) unsupported rates will throw "Bad settings"
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BasicSetting.Parity">
            <summary>
            The parity checking scheme (default: none)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BasicSetting.DataBits">
            <summary>
            Number of databits 1..8 (default: 8) unsupported values will throw "Bad settings"
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BasicSetting.StopBits">
            <summary>
            Number of stop bits (default: one)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BasicSetting.AutoReopen">
            <summary>
            If true, the port will automatically re-open on next send if it was previously closed due
            to an error (default: false)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BasicSetting.CheckAllSends">
            <summary>
            If true, subsequent Send commands wait for completion of earlier ones enabling the results
            to be checked. If false, errors, including timeouts, may not be detected, but performance
            may be better.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.TxSetting">
            <summary>
            The Serial Port Tx Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.TxSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TxSetting.TxFlowCTS">
            <summary>
            If true, transmission is halted unless CTS is asserted by the remote station (default: false)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TxSetting.TxFlowDSR">
            <summary>
            If true, transmission is halted unless DSR is asserted by the remote station (default: false)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TxSetting.TxFlowX">
            <summary>
            If true, transmission is halted when Xoff is received and restarted when Xon is received (default: false)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TxSetting.TxWhenRxXoff">
            <summary>
            If false, transmission is suspended when this station has sent Xoff to the remote station (default: true)
            Set false if the remote station treats any character as an Xon.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.RxSetting">
            <summary>
            The Serial Port Rx Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.RxSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.RxSetting.RxGateDSR">
            <summary>
            If true, received characters are ignored unless DSR is asserted by the remote station (default: false)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.RxSetting.RxFlowX">
            <summary>
            If true, Xon and Xoff characters are sent to control the data flow from the remote station (default: false)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.HSOutputSetting">
            <summary>
            The Serial Port HSOutput Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.HSOutputSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.HSOutputSetting.UseRTS">
            <summary>
            Specifies the use to which the RTS output is put (default: none)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.HSOutputSetting.UseDTR">
            <summary>
            Specidies the use to which the DTR output is put (default: none)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.XOnXOffSetting">
            <summary>
            The Serial Port XOn/XOff Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.XOnXOffSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.XOnXOffSetting.XonChar">
            <summary>
            The character used to signal Xon for X flow control (default: DC1)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.XOnXOffSetting.XoffChar">
            <summary>
            The character used to signal Xoff for X flow control (default: DC3)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.WaterLevelSetting">
            <summary>
            The Serial Port Rx Water Level Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.WaterLevelSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.WaterLevelSetting.RxHighWater">
            <summary>
            The number of free bytes in the reception queue at which flow is disabled
            (Default: 0 = Set to 1/10th of actual rxQueue size)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.WaterLevelSetting.RxLowWater">
            <summary>
            The number of bytes in the reception queue at which flow is re-enabled
            (Default: 0 = Set to 1/10th of actual rxQueue size)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.TimeoutSetting">
            <summary>
            The Serial Port Timeout Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.TimeoutSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TimeoutSetting.SendTimeoutMultiplier">
            <summary>
            Multiplier. Max time for Send in ms = (Multiplier * Characters) + Constant
            (default: 0 = No timeout)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TimeoutSetting.SendTimeoutConstant">
            <summary>
            Constant.  Max time for Send in ms = (Multiplier * Characters) + Constant (default: 0)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.QueueSetting">
            <summary>
            The Serial Port Queue Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.QueueSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueSetting.RxQueue">
            <summary>
            Requested size for receive queue (default: 0 = use operating system default)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.QueueSetting.TxQueue">
            <summary>
            Requested size for transmit queue (default: 0 = use operating system default)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommLineSetting">
            <summary>
            The Serial Port Comm Line Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommLineSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommLineSetting.RxStringBufferSize">
            <summary>
            Maximum size of received string (default: 256)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommLineSetting.RxTerminator">
            <summary>
            ASCII code that terminates a received string (default: CR)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommLineSetting.RxFilter">
            <summary>
            ASCII codes that will be ignored in received string (default: null)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommLineSetting.TransactTimeout">
            <summary>
            Maximum time (ms) for the Transact method to complete (default: 500)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommLineSetting.TxTerminator">
            <summary>
            ASCII codes transmitted after each Send string (default: null)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommPingPongSetting">
            <summary>
            The Serial Port Comm Ping-Pong Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommPingPongSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommPingPongSetting.TransactTimeout">
            <summary>
            Maximum time (ms) for the Transact method to complete (default: 500)
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.TerminalSetting">
            <summary>
            The Serial Port Terminal Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.TerminalSetting.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TerminalSetting.ShowAsHex">
            <summary>
            Gets or sets show data show as hex.  default is false.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TerminalSetting.BreakLineOnChar">
            <summary>
            Gets or sets break line on specificed char.  default is false.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TerminalSetting.LineBreakChar">
            <summary>
            Gets or sets line break char. default is 0.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.TerminalSetting.CharsInLine">
            <summary>
            Gets or sets Chars In Line. default is 0.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.SerialPortSettings">
            <summary>
            The Serial Port Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.SerialPortSettings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.SerialPortSettings.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.SerialPortSettings.SetStandard(System.String,System.Int32,NLib.Devices.SerialPorts.Handshake)">
            <summary>
            Pre-configures settings for most modern devices: Baud 9600, 8 databits, 1 stop bit, no parity and
            one of the common handshake protocols. Change individual settings later if necessary.
            </summary>
            <param name="Port">The port to use (i.e. "COM1:")</param>
            <param name="Baud">The baud rate (Default is 9600).</param>
            <param name="Hs">The handshake protocol (Default is XonXoff).</param>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.Common">
            <summary>
            Gets or sets serial port's basic options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.Tx">
            <summary>
            Gets or sets serial port's tx options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.Rx">
            <summary>
            Gets or sets serial port's rx options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.HSOuput">
            <summary>
            Gets or sets serial port's HSOuput options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.XOnXoff">
            <summary>
            Gets or sets serial port's XOn-Xoff options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.WaterLevel">
            <summary>
            Gets or sets serial port's rx water level options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.Timeout">
            <summary>
            Gets or sets serial port's timeout options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.Queue">
            <summary>
            Gets or sets serial port's queue options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.CommLine">
            <summary>
            Gets or sets serial port's comm line options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.CommPingPong">
            <summary>
            Gets or sets serial port's comm ping pong options.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortSettings.Terminal">
            <summary>
            Gets or sets serial port's terminal options.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.SerialPortConfig">
            <summary>
            The main Serial Port Configuration class.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.SerialPortConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.SerialPortConfig.LoadFromFile(System.String)">
            <summary>
            Load settting from target file and assign as current settings.
            </summary>
            <param name="fileName">Target file name.</param>
            <returns>Returns true if load success.</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.SerialPortConfig.SaveToFile(System.String)">
            <summary>
            Save current setting to file.
            </summary>
            <param name="fileName">Target file name.</param>
            <returns>Returns true if save success.</returns>
        </member>
        <member name="P:NLib.Devices.SerialPorts.SerialPortConfig.Settings">
            <summary>
            Gets or sets Serial Port Options.
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommBase">
            <summary>
            Lowest level Com driver handling all Win32 API calls and processing send and receive in terms of
            individual bytes. Used as a base class for higher level drivers.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.AltName(System.String)">
            <summary>
            Returns the alternative name of a com port i.e. \\.\COM1 for COM1:
            Some systems require this form for double or more digit com port numbers.
            </summary>
            <param name="s">Name in form COM1 or COM1:</param>
            <returns>Name in form \\.\COM1</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.IsPortAvailable(System.String)">
            <summary>
            Tests the availability of a named comm port.
            </summary>
            <param name="s">Name of port</param>
            <returns>Availability of port</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Open">
            <summary>
            Opens the com port and configures it with the required settings
            </summary>
            <returns>false if the port could not be opened</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Close">
            <summary>
            Closes the com port.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Dispose">
            <summary>
            For IDisposable
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Finalize">
            <summary>
            Destructor (just in case)
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommBase.Online">
            <summary>
            True if online.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Flush">
            <summary>
            Block until all bytes in the queue have been transmitted.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.ThrowException(System.String)">
            <summary>
            Use this to throw exceptions in derived classes. Correctly handles threading issues
            and closes the port if necessary.
            </summary>
            <param name="reason">Description of fault</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Send(System.Byte[])">
            <summary>
            Queues bytes for transmission. 
            </summary>
            <param name="tosend">Array of bytes to be sent</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Send(System.Byte)">
            <summary>
            Queues a single byte for transmission.
            </summary>
            <param name="tosend">Byte to be sent</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.SendImmediate(System.Byte)">
            <summary>
            Sends a protocol byte immediately ahead of any queued bytes.
            </summary>
            <param name="tosend">Byte to send</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.Sleep(System.Int32)">
            <summary>
            Delay processing.
            </summary>
            <param name="milliseconds">Milliseconds to delay by</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.GetModemStatus">
            <summary>
            Gets the status of the modem control input signals.
            </summary>
            <returns>Modem status object</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.GetQueueStatus">
            <summary>
            Get the status of the queues
            </summary>
            <returns>Queue status object</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.IsCongested">
            <summary>
            Test if the line is congested (data being queued for send faster than it is being dequeued)
            This detects if baud rate is too slow or if handshaking is not allowing enough transmission
            time. It should be called at reasonably long fixed intervals. If data has been sent during
            the interval, congestion is reported if the queue was never empty during the interval.
            </summary>
            <returns>True if congested</returns>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommBase.RTS">
            <summary>
            Set the state of the RTS modem control output
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommBase.DTR">
            <summary>
            The state of the DTR modem control output
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommBase.RTSavailable">
            <summary>
            True if the RTS pin is controllable via the RTS property
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommBase.DTRavailable">
            <summary>
            True if the DTR pin is controllable via the DTR property
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommBase.Break">
            <summary>
            Assert or remove a break condition from the transmission line
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.GetSettings">
            <summary>
            Gets new settings instance. (NB this is called during Open method)
            </summary>
            <returns>Returns SerialPortSettings instance.</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.AfterOpen">
            <summary>
            Override this to provide processing after the port is openned (i.e. to configure remote
            device or just check presence).
            </summary>
            <returns>false to close the port again</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.BeforeClose(System.Boolean)">
            <summary>
            Override this to provide processing prior to port closure.
            </summary>
            <param name="error">True if closing due to an error</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.DoRxChar(System.Byte)">
            <summary>
            Override this to process received bytes.
            </summary>
            <param name="ch">The byte that was received</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.DoTxDone">
            <summary>
            Override this to take action when transmission is complete (i.e. all bytes have actually
            been sent, not just queued).
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.DoBreak">
            <summary>
            Override this to take action when a break condition is detected on the input line.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.DoStatusChange(NLib.Devices.SerialPorts.ModemStatus,NLib.Devices.SerialPorts.ModemStatus)">
            <summary>
            Override this to take action when one or more modem status inputs change state
            </summary>
            <param name="mask">The status inputs that have changed state</param>
            <param name="state">The state of the status inputs</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommBase.DoRxException(System.Exception)">
            <summary>
            Override this to take action when the reception thread closes due to an exception being thrown.
            </summary>
            <param name="e">The exception which was thrown</param>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommLine">
            <summary>
            Overlays CommBase to provide line or packet oriented communications to derived classes. Strings
            are sent and received and the Transact method is added which transmits a string and then blocks until
            a reply string has been received (subject to a timeout).
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommLine.Send(System.String)">
            <summary>
            Queue the ASCII representation of a string and then the set terminator bytes for sending.
            </summary>
            <param name="toSend">String to be sent.</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommLine.Transact(System.String)">
            <summary>
            Transmits the ASCII representation of a string followed by the set terminator bytes and then
            awaits a response string.
            </summary>
            <param name="toSend">The string to be sent.</param>
            <returns>The response string.</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommLine.Setup(NLib.Devices.SerialPorts.SerialPortSettings)">
            <summary>
            If a derived class overrides ComSettings(), it must call this prior to returning the settings to
            the base class.
            </summary>
            <param name="s">Class containing the appropriate settings.</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommLine.DoRxLine(System.String)">
            <summary>
            Override this to process unsolicited input lines (not a result of Transact).
            </summary>
            <param name="s">String containing the received ASCII text.</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommLine.DoRxChar(System.Byte)">
            <summary>
            DoRxChar
            </summary>
            <param name="ch"></param>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommPingPong">
            <summary>
            Overlays CommBase to provide byte-level ping-pong communications were each transmitted byte
            illicits a single byte response which must be absorbed before sending the next byte.
            There is a default response timeout of 500ms after which a Timeout exception will be raised.
            This timeout can be changed by changing the transactTimeout parameter in the settings object.
            Use the Transact method for all communications.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommPingPong.Transact(System.Byte)">
            <summary>
            Transmits a byte and waits for and returns the response byte.
            </summary>
            <param name="toSend">The byte to be sent.</param>
            <returns>The response byte.</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommPingPong.Setup(NLib.Devices.SerialPorts.SerialPortSettings)">
            <summary>
            If a derived class overrides ComSettings(), it must call this prior to returning the settings to
            the base class.
            </summary>
            <param name="s">Class containing the appropriate settings.</param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommPingPong.DoRxChar(System.Byte)">
            <summary>
            DoRxChar
            </summary>
            <param name="ch"></param>
        </member>
        <member name="T:NLib.Devices.SerialPorts.BaseTerminal">
            <summary>
            Base Terminal
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.GetSettings">
            <summary>
            Gets new settings instance. (NB this is called during Open method)
            </summary>
            <returns>Returns SerialPortSettings instance.</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.DoRxChar(System.Byte)">
            <summary>
            DoRxChar
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.DoBreak">
            <summary>
            DoBreak
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.AfterOpen">
            <summary>
            AfterOpen
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.BeforeClose(System.Boolean)">
            <summary>
            BeforeClose
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.DoStatusChange(NLib.Devices.SerialPorts.ModemStatus,NLib.Devices.SerialPorts.ModemStatus)">
            <summary>
            DoStatusChange
            </summary>
            <param name="c"></param>
            <param name="v"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.SendChar(System.Byte)">
            <summary>
            SendChar
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.SendFile(System.IO.FileStream)">
            <summary>
            SendFile (stream)
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.SendCtrl(System.String)">
            <summary>
            Send Ctrl
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BaseTerminal.Immediate">
            <summary>
            Gets or sets is Immediate mode.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.BaseTerminal.Settings">
            <summary>
            Gets or sets terminal (serial port) setting.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.GetQueueStatus">
            <summary>
            Get Queue Status
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.BaseTerminal.IsCongested">
            <summary>
            Gets Is Congested.
            </summary>
            <returns></returns>
        </member>
        <member name="E:NLib.Devices.SerialPorts.BaseTerminal.OnPortOpenning">
            <summary>
            OnPortOpenning event
            </summary>
        </member>
        <member name="E:NLib.Devices.SerialPorts.BaseTerminal.OnPortClosing">
            <summary>
            OnPortClosing event
            </summary>
        </member>
        <member name="E:NLib.Devices.SerialPorts.BaseTerminal.OnBreak">
            <summary>
            OnBreak event
            </summary>
        </member>
        <member name="E:NLib.Devices.SerialPorts.BaseTerminal.OnRxChar">
            <summary>
            OnRxChar event
            </summary>
        </member>
        <member name="E:NLib.Devices.SerialPorts.BaseTerminal.OnStatusChanged">
            <summary>
            OnStatusChanged event
            </summary>
        </member>
        <member name="E:NLib.Devices.SerialPorts.BaseTerminal.OnCommMessage">
            <summary>
            OnCommMessage event
            </summary>
        </member>
        <member name="E:NLib.Devices.SerialPorts.BaseTerminal.OnCommException">
            <summary>
            OnCommException event
            </summary>
        </member>
        <member name="T:NLib.Devices.SerialPorts.CommTerminal">
            <summary>
            Comm Terminal
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.GetSettings">
            <summary>
            Gets new settings instance. (NB this is called during Open method)
            </summary>
            <returns>Returns SerialPortSettings instance.</returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.DoRxChar(System.Byte)">
            <summary>
            DoRxChar
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.DoBreak">
            <summary>
            DoBreak
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.AfterOpen">
            <summary>
            AfterOpen
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.BeforeClose(System.Boolean)">
            <summary>
            BeforeClose
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.DoStatusChange(NLib.Devices.SerialPorts.ModemStatus,NLib.Devices.SerialPorts.ModemStatus)">
            <summary>
            DoStatusChange
            </summary>
            <param name="c"></param>
            <param name="v"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.SendChar(System.Byte)">
            <summary>
            SendChar
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.SendFile(System.IO.FileStream)">
            <summary>
            SendFile
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.SendCtrl(System.String)">
            <summary>
            SendCtrl
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommTerminal.Terminal">
            <summary>
            Get Terminal (Form)
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.ShowTerminal(System.Boolean)">
            <summary>
            Show Terminal.
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.ShowSettings">
            <summary>
            Show Settings.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.setOPTicks(System.Windows.Forms.CheckBox)">
            <summary>
            setOPTicks
            </summary>
            <param name="chk"></param>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.OPClick(System.Windows.Forms.CheckBox)">
            <summary>
            OPClick
            </summary>
            <param name="chk"></param>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommTerminal.Immediate">
            <summary>
            Gets or sets is Immediate mode.
            </summary>
        </member>
        <member name="P:NLib.Devices.SerialPorts.CommTerminal.Settings">
            <summary>
            Gets or sets terminal (serial port) setting.
            </summary>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.GetQueueStatus">
            <summary>
            Get Queue Status
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Devices.SerialPorts.CommTerminal.IsCongested">
            <summary>
            Gets Is Congested.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLib.Documents.NDocument">
            <summary>
            The NDocument Class.
            </summary>
        </member>
        <member name="M:NLib.Documents.NDocument.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Documents.NDocument.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Documents.NDocument.DocumentTypeName">
            <summary>
            Gets Document Type's Name.
            </summary>
        </member>
        <member name="M:NLib.Documents.NDocument.Create(System.String)">
            <summary>
            Create NDocument By Document Type Name.
            </summary>
            <param name="documentType">The Document Type Name.</param>
            <returns>NDocument's Instance.</returns>
        </member>
        <member name="M:NLib.Documents.NDocument.GetNDocumentTypeNames">
            <summary>
            Get NDocument Type Names.
            </summary>
            <returns>Returns list of NDocument Type's Names.</returns>
        </member>
        <member name="M:NLib.Documents.NDocument.GetNDocumentTypes">
            <summary>
            Gets NDocument Types.
            </summary>
            <returns>Returns list of Avaliable NDocument Types that inherited from NDocument.</returns>
        </member>
        <member name="M:NLib.Documents.NDocument.GetNDocumentTypes(System.Boolean)">
            <summary>
            Gets NDocument Types.
            </summary>
            <param name="refresh">true for refresh cache.</param>
            <returns>Returns list of Avaliable NDocuments Type that inherited from NDocument.</returns>
        </member>
        <member name="P:NLib.Documents.NDocument.NDocumentTypeName">
            <summary>
            Gets NDocument Type Name.
            </summary>
        </member>
        <member name="M:NLib.Documents.NDocument.Create">
            <summary>
            Create new NDocument Instance.
            </summary>
            <returns>Returns NDocument Instance.</returns>
        </member>
        <member name="M:NLib.Documents.NDocument.Prepare">
            <summary>
            Prepare.
            </summary>
        </member>
        <member name="T:NLib.WindowsFormsControlDataBindingExtenstionMethods">
            <summary>
            The Windows  Forms's Control Data Binding Extenstion Methods.
            </summary>
        </member>
        <member name="M:NLib.WindowsFormsControlDataBindingExtenstionMethods.Bind``1(``0,System.Object,System.String,System.String)">
            <summary>
            Bind datasource to control.
            </summary>
            <typeparam name="T">The control type.</typeparam>
            <param name="ctrl">The control instance.</param>
            <param name="dataSource">The datasource instance.</param>
            <param name="dataMemberName">The Data Source Member Name to binding.</param>
            <param name="propertyName">The Control's Property Name to binding.</param>
        </member>
        <member name="T:NLib.WpfControlDataBindingExtenstionMethods">
            <summary>
            The WPF's Control Data Binding Extenstion Methods.
            </summary>
        </member>
        <member name="T:NLib.NDataRowExtensions">
            <summary>
            The NLib DataRow Extensions.
            </summary>
        </member>
        <member name="M:NLib.NDataRowExtensions.As``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Convert value of column in target data row. 
            If the T is Nullable type the DBNull value can returns as output otherwise
            the defaultValue will return instead.
            </summary>
            <typeparam name="T">The terget data type.</typeparam>
            <param name="row">The target data row.</param>
            <param name="columnName">The column name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns value in column on target data row.</returns>
        </member>
        <member name="M:NLib.NDataRowExtensions.As``1(System.Data.DataRowView,System.String,``0)">
            <summary>
            Convert value of column in target data row view. 
            If the T is Nullable type the DBNull value can returns as output otherwise
            the defaultValue will return instead.
            </summary>
            <typeparam name="T">The terget data type.</typeparam>
            <param name="row">The target data row view.</param>
            <param name="columnName">The column name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns value in column on target data row view.</returns>
        </member>
        <member name="T:NLib.FileExtensionMethods">
            <summary>
            File Extension Methods
            </summary>
        </member>
        <member name="F:NLib.FileExtensionMethods.DEFAULT_RENAME_PATTERN">
            <summary>
            The Default Rename Pattern
            </summary>
        </member>
        <member name="F:NLib.FileExtensionMethods.REVISION_UNLIMIT">
            <summary>
            Unlimit Revision constant
            </summary>
        </member>
        <member name="F:NLib.FileExtensionMethods.REVISION_MAXLIMIT">
            <summary>
            Max value of Revision constant
            </summary>
        </member>
        <member name="M:NLib.FileExtensionMethods.ToFileInfo(System.String)">
            <summary>
            Convert string to FileInfo instance.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>Returns FileInfo instance.</returns>
        </member>
        <member name="M:NLib.FileExtensionMethods.CreateEmptyFile(System.IO.FileInfo,System.Boolean)">
            <summary>
            Create new file.
            </summary>
            <param name="file">The FileInfo instance.</param>
            <param name="allowAllUsers">True for auto grant access rights for all users.</param>
        </member>
        <member name="M:NLib.FileExtensionMethods.Rolling(System.IO.FileInfo,System.String,System.String[])">
            <summary>
            Rolling file.
            </summary>
            <param name="file">The FileInfo instance.</param>
            <param name="searchPattern">
            The remove search pattern. Default is *.*
            </param>
            <param name="skipDeleteFiles">
            The file to skip to remove. The file name is only file name in directory not full file name.
            </param>
        </member>
        <member name="M:NLib.FileExtensionMethods.Rolling(System.IO.FileInfo,System.UInt32,System.String,System.String[])">
            <summary>
            Rolling file.
            </summary>
            <param name="file">The FileInfo instance.</param>
            <param name="maxRevision">The maxuimum revision.</param>
            <param name="searchPattern">
            The remove search pattern. Default is *.*
            </param>
            <param name="skipDeleteFiles">
            The file to skip to remove. The file name is only file name in directory not full file name.
            </param>
        </member>
        <member name="M:NLib.FileExtensionMethods.Rolling(System.IO.FileInfo,System.String,System.UInt32,System.String,System.String[])">
            <summary>
            Rolling file.
            </summary>
            <param name="file">The FileInfo instance.</param>
            <param name="renamePattern">The rename patterns.</param>
            <param name="maxRevision">The maxuimum revision.</param>
            <param name="searchPattern">
            The remove search pattern. Default is *.*
            </param>
            <param name="skipDeleteFiles">
            The file to skip to remove. The file name is only file name in directory not full file name.
            </param>
        </member>
        <member name="M:NLib.FileExtensionMethods.GetFileHash(System.String)">
            <summary>
            Gets File Hash string.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>Returns string.Empty is something is invalid.</returns>
        </member>
        <member name="M:NLib.FileExtensionMethods.GetFileHash(System.IO.FileInfo)">
            <summary>
            Gets File Hash string.
            </summary>
            <param name="fileInfo">The FileInfo instance.</param>
            <returns>Returns string.Empty is something is invalid.</returns>
        </member>
        <member name="T:NLib.Dde.Advanced.DdeContext">
            <summary>
            This provides an execution context for <c>DdeClient</c> and <c>DdeServer</c>.
            </summary>
            <threadsafety static="true" instance="true" />
            <remarks>
            <para>
            This class provides a context for DDE activity.  All <c>DdeClient</c> and <c>DdeServer</c> objects must be associated with an instance of
            this class.  If one is not specified in their constructors then a default instance of this class is used.  This class must be initialized
            before it can begin sending and receiving DDE messages.  This happens automatically upon its first use by a <c>DdeClient</c> or
            <c>DdeServer</c>.  An application can call <c>Initialize</c> to make the initialization process occur immediately.  This is useful when a
            calling application expects this class to raise the <c>Register</c> and <c>Unregister</c> events or invoke the
            <c>ITransactionFilter.PreFilterTransaction</c> method before being used by a <c>DdeClient</c> or <c>DdeServer</c>.
            </para>
            <para>
            Since forms and controls implement <c>ISynchronizeInvoke</c> they can be used as the synchronizing object for this class.  When an instance 
            of this class is created to use a form or control as the synchronizing object it will use the UI thread for execution.  This is the
            preferred way of creating an instance of this class when used in a windows application since it avoids multithreaded synchronization issues
            and cross thread marshaling.  When an instance of this class is created without specifying a synchronizing object it will create and manage
            its own thread for execution.  This is convenient if you wish to use this library in a console or service application, but with the added
            cost of cross thread marshaling and the potential for deadlocking application threads.
            </para>
            <para>
            Events are invoked on the thread hosting the <c>DdeContext</c>.  All operations must be marshaled onto the thread hosting the 
            <c>DdeContext</c>.  Method calls will block until that thread becomes available.  An exception will be generated if the thread does not
            become available in a timely manner.
            </para>
            </remarks>
        </member>
        <member name="E:NLib.Dde.Advanced.DdeContext.Register">
            <summary>
            This is raised when a service name has been registered by a server using the DDEML.
            </summary>
            <remarks>
            This event will not be raised by servers that do not use the DDEML.
            </remarks>
        </member>
        <member name="E:NLib.Dde.Advanced.DdeContext.Unregister">
            <summary>
            This is raised when a service name has been unregistered by a server using the DDEML.
            </summary>
            <remarks>
            This event will not be raised by servers that do not use the DDEML.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.#ctor">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This initializes a new instance of the <c>DdeContext</c> class that uses a dedicated thread for execution.
            </summary>
            <remarks>
            This constructor is used when you want the context to create and manage its own thread for DDE message pumping.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.#ctor(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            This initializes a new instance of the <c>DdeContext</c> class that uses the specified synchronizing object for execution.
            </summary>
            <param name="synchronizingObject">
            The synchronizing object to use for execution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when synchronizer is a null reference.
            </exception>
            <remarks>
            This constructor is used when you want the context to use the specified synchronizing object for DDE message pumping.  Since forms and
            controls implement <c>ISynchronizeInvoke</c> they can be used as the synchronizing object.  In that case the windows application UI
            thread that is hosting the form or control is used.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.Dispose">
            <summary>
            This releases all resources held by this instance.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeContext.DdemlObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeContext.InstanceId">
            <summary>
            This gets the DDEML instance identifier.
            </summary>
            <remarks>
            <para>
            This can be used in any DDEML function requiring an instance identifier.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this library to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeContext.IsInitialized">
            <summary>
            This gets a bool indicating whether the context is initialized.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeContext.Encoding">
            <summary>
            This gets or sets the default encoding that is used.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeContext.InvokeRequired">
            <summary>
            This gets a bool indicating whether the caller must use Invoke.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.Initialize">
            <summary>
            This initializes the context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the context is already initialized.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the context could not be initialized.
            </exception>
            <remarks>
            <para>
            This class must be initialized before it can begin sending and receiving DDE messages.  This happens automatically upon its first use by
            a <c>DdeClient</c> or <c>DdeServer</c>.  An application can call <c>Initialize</c> to make the initialization process occur immediately.
            This is useful when a calling application expects this class to raise the <c>Register</c> and <c>Unregister</c> events or invoke the
            <c>ITransactionFilter.PreFilterTransaction</c> method before being used by a <c>DdeClient</c> or <c>DdeServer</c>.
            </para>
            <para>
            If you attempt to use a synchronizer that is not hosted on a thread running a windows message loop an exception will be thrown.
            </para>
            <para>
            Explicitly calling this method will allow added <c>ITransactionFilter</c> objects to begin intercepting the DDEML callback function.
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.AddTransactionFilter(NLib.Dde.Advanced.IDdeTransactionFilter)">
            <summary>
            This adds a transaction filter to monitor DDE transactions.
            </summary>
            <param name="filter">
            The implementation of <c>ITransactionFilter</c> that you want to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when filter is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the filter was already added.
            </exception>
            <remarks>
            <para>
            Transaction filters can be used to intercept the DDEML callback.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this library to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.RemoveTransactionFilter(NLib.Dde.Advanced.IDdeTransactionFilter)">
            <summary>
            This removes a transaction filter and stops it from monitoring DDE transactions.
            </summary>
            <param name="filter">
            The implementation of <c>ITransactionFilter</c> that you want to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when filter is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the filter was not previously added.
            </exception>
            <remarks>
            <para>
            Transaction filters can be used to intercept the DDEML callback.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this library to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.Invoke(System.Threading.ThreadStart)">
            <summary>
            This executes a ThreadStart delegate on the thread hosting this object.
            </summary>
            <param name="method">
            The delegate to execute.
            </param>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.Invoke(System.Delegate,System.Object[])">
            <summary>
            This executes a delegate on the thread hosting this object.
            </summary>
            <param name="method">
            The delegate to execute.
            </param>
            <param name="args">
            The arguments to pass to the delegate.
            </param>
            <returns>
            The object returned by the delegate.
            </returns>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            This begins an asynchronous operation to execute a delegate on the thread hosting this object.
            </summary>
            <param name="method">
            The delegate to execute.
            </param>
            <param name="args">
            The arguments to pass to the delegate.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeContext.EndInvoke(System.IAsyncResult)">
            <summary>
            This returns the object that the delegate returned in the operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call to <c>BeginInvoke</c>.
            </param>
            <returns>
            The object returned by the delegate.
            </returns>
        </member>
        <member name="T:NLib.Dde.Advanced.DdeContext.DdemlTransactionFilter">
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:NLib.Dde.Advanced.DdeContext.DdeThread">
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:NLib.Dde.Advanced.DdeContext.DdeThread.HiddenForm">
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:NLib.Dde.Advanced.DdeMessageLoop">
            <summary>
            This is a synchronizing object that can run a message loop on any thread.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:NLib.Dde.Advanced.DdeMessageLoop.#ctor">
            <summary>
            This initializes a new instance of the <c>DdeMessageLoop</c> class.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeMessageLoop.Dispose">
            <summary>
            This releases all resources held by this instance.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeMessageLoop.System#ComponentModel#ISynchronizeInvoke#BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            This begins an asynchronous operation to execute a delegate on the thread hosting this object.
            </summary>
            <param name="method">
            The delegate to execute.
            </param>
            <param name="args">
            The arguments to pass to the delegate.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeMessageLoop.System#ComponentModel#ISynchronizeInvoke#EndInvoke(System.IAsyncResult)">
            <summary>
            This returns the object that the delegate returned in the operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call to <c>BeginInvoke</c>.
            </param>
            <returns>
            The object returned by the delegate.
            </returns>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeMessageLoop.System#ComponentModel#ISynchronizeInvoke#Invoke(System.Delegate,System.Object[])">
            <summary>
            This executes a delegate on the thread hosting this object.
            </summary>
            <param name="method">
            The delegate to execute.
            </param>
            <param name="args">
            The arguments to pass to the delegate.
            </param>
            <returns>
            The object returned by the delegate.
            </returns>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeMessageLoop.System#ComponentModel#ISynchronizeInvoke#InvokeRequired">
            <summary>
            This gets a bool indicating whether the caller must use Invoke.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeMessageLoop.Run">
            <summary>
            This starts a message loop on the current thread.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeMessageLoop.Run(System.Windows.Forms.Form)">
            <summary>
            This starts a message loop on the current thread and shows the specified form.
            </summary>
            <param name="form">
            The Form to display.
            </param>
        </member>
        <member name="T:NLib.Dde.Advanced.DdeMessageLoop.HiddenForm">
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:NLib.Dde.Advanced.DdeRegistrationEventArgs">
            <summary>
            This contains information about the <c>Register</c> and <c>Unregister</c> events.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:NLib.Dde.Advanced.DdeRegistrationEventArgs.Service">
            <summary>
            This gets the service name associated with this event.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.DdeTransaction">
            <summary>
            This contains the parameters of the DDEML callback function.
            </summary>
            <threadsafety static="true" instance="false" />
            <remarks>
            <para>
            The <c>dwRet</c> property contains the value returned by the DDEML callback function and is the only member that can be modified.  See the
            MSDN documentation for more information about the members of this class.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this library to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.uType">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.uFmt">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.hConv">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.hsz1">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.hsz2">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.hData">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.dwData1">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.dwData2">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.DdeTransaction.dwRet">
            <summary>
            This gets the return value of the DDEML callback function.  See the MSDN documentation for information about this member.
            </summary>
            <remarks>
            This will be ignored if the PreFilterTransaction method returns false.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.DdeTransaction.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLib.Dde.Advanced.IDdeTransactionFilter">
            <summary>
            This defines a transaction filter.
            </summary>
            <remarks>
            <para>
            Use a transaction filter to intercept the DDEML callback function.  The <c>PreFilterTransaction</c> method will be called every time the
            DDEML callback function executes.  The <c>Transaction</c> object passed into the method contains the parameters of the DDE callback
            function.  By using a transaction filter the developer has compelete control over the DDEML.  See the MSDN documentation for more
            information on using the DDEML.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this library to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Dde.Advanced.IDdeTransactionFilter.PreFilterTransaction(NLib.Dde.Advanced.DdeTransaction)">
            <summary>
            This filters a transaction before it is dispatched.
            </summary>
            <param name="t">
            The transaction to be dispatched.
            </param>
            <returns>
            True to filter the transaction and stop it from being dispatched, false otherwise.
            </returns>
            <remarks>
            <para>
            This method is called everytime the DDEML callback function executes.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this library to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeActivityEventArgs">
            <summary>
            This contains information about events on <c>DdeMonitor</c>.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeActivityEventArgs.TaskHandle">
            <summary>
            This gets the task handle of the application associated with this event.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs">
            <summary>
            This contains information about the <c>CallbackActivity</c> event.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.uType">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.uFmt">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.hConv">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.hsz1">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.hsz2">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.hData">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.dwData1">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.dwData2">
            <summary>
            See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeCallbackActivityEventArgs.dwRet">
            <summary>
            This gets the return value of the DDEML callback function.  See the MSDN documentation for information about this member.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeConversationActivityEventArgs">
            <summary>
            This contains information about the <c>ConversationActivity</c> event.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeConversationActivityEventArgs.Service">
            <summary>
            This gets the service name associated with the conversation.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeConversationActivityEventArgs.Topic">
            <summary>
            This gets the topic name associated with the conversation.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeConversationActivityEventArgs.IsEstablished">
            <summary>
            This gets a bool indicating whether the conversation is being established.
            </summary>
            <remarks>
            The value returned by this property will be true if the conversation is being established.  If the conversation
            is being terminated then the value will be false.
            </remarks>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeConversationActivityEventArgs.ClientHandle">
            <summary>
            This gets the handle to the client application associated with the conversation.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeConversationActivityEventArgs.ServerHandle">
            <summary>
            This gets the handle to the server application associated with the conversation.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeErrorActivityEventArgs">
            <summary>
            This contains information about the <c>ErrorActivity</c> event.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeErrorActivityEventArgs.Code">
            <summary>
            This gets an error code returned by the DDEML.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs">
            <summary>
            This contains information about the <c>LinkActivity</c> event.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.Service">
            <summary>
            This gets the service name associated with the link.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.Topic">
            <summary>
            This gets the topic name associated with the link.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.Item">
            <summary>
            This gets the item name associated with the link.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.Format">
            <summary>
            This gets the format of the data associated with the link.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.IsHot">
            <summary>
            This gets a bool indicating whether the link is hot.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.IsEstablished">
            <summary>
            This gets a bool indicating whether the link is being established.
            </summary>
            <remarks>
            The value returned by this property will be true if the conversation is being established.  If the conversation
            is being terminated then the value will be false.
            </remarks>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.IsServerInitiated">
            <summary>
            This gets a bool indicating whether the link was terminated by the server.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.ClientHandle">
            <summary>
            This gets the handle to the client application associated with the link.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeLinkActivityEventArgs.ServerHandle">
            <summary>
            This gets the handle to the server application associated with the link.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeMessageActivityKind">
            <summary>
            This represents the kind of message contained in <c>DdeMessageActivityEventArgs</c>.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeMessageActivityKind.Post">
            <summary>
            The message was posted by a DDE application.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeMessageActivityKind.Send">
            <summary>
            The message was sent by a DDE application.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeMessageActivityEventArgs">
            <summary>
            This contains information about the <c>MessageActivity</c> event.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeMessageActivityEventArgs.Kind">
            <summary>
            This gets the kind of message associated with this event.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeMessageActivityEventArgs.Message">
            <summary>
            This gets the message associated with this event.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeMonitorFlags">
            <summary>
            This specifies the different kinds of DDE activity that can be monitored.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeMonitorFlags.Callback">
            <summary>
            This indicates activity caused by the execution of a DDEML callback.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeMonitorFlags.Conversation">
            <summary>
            This indicates activity caused by conversation.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeMonitorFlags.Error">
            <summary>
            This indicates activity caused by an error.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeMonitorFlags.Link">
            <summary>
            This indicates activity caused by an advise loop.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeMonitorFlags.Message">
            <summary>
            This indicates activity caused by DDE messages.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeMonitor">
            <summary>
            This is used to monitor DDE activity.
            </summary>
        </member>
        <member name="E:NLib.Dde.Advanced.Monitor.DdeMonitor.CallbackActivity">
            <summary>
            This is raised anytime a DDEML callback is executed.
            </summary>
        </member>
        <member name="E:NLib.Dde.Advanced.Monitor.DdeMonitor.ConversationActivity">
            <summary>
            This is raised anytime a conversation is established or terminated.
            </summary>
        </member>
        <member name="E:NLib.Dde.Advanced.Monitor.DdeMonitor.ErrorActivity">
            <summary>
            This is raised anytime there is an error.
            </summary>
        </member>
        <member name="E:NLib.Dde.Advanced.Monitor.DdeMonitor.LinkActivity">
            <summary>
            This is raised anytime an advise loop is established or terminated.
            </summary>
        </member>
        <member name="E:NLib.Dde.Advanced.Monitor.DdeMonitor.MessageActivity">
            <summary>
            This is raised anytime a DDE message is sent or posted.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.Monitor.DdeMonitor.#ctor">
            <summary>
            This initializes a new instance of the <c>DdeMonitor</c> class.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.Monitor.DdeMonitor.Dispose">
            <summary>
            This releases all resources held by this instance.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeMonitor.Context">
            <summary>
            This gets the context associated with this instance.
            </summary>
        </member>
        <member name="M:NLib.Dde.Advanced.Monitor.DdeMonitor.Start(NLib.Dde.Advanced.Monitor.DdeMonitorFlags)">
            <summary>
            This starts monitoring the system for DDE activity.
            </summary>
            <param name="flags">
            A bitwise combination of <c>DdeMonitorFlags</c> that indicate what DDE activity will be monitored.
            </param>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeStringActivityType">
            <summary>
            This represents the type of string activity.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeStringActivityType.CleanUp">
            <summary>
            The DDE application called DdeUninitialize.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeStringActivityType.Create">
            <summary>
            The DDE application is creating a string handle.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeStringActivityType.Delete">
            <summary>
            The DDE application is deleting a string handle.
            </summary>
        </member>
        <member name="F:NLib.Dde.Advanced.Monitor.DdeStringActivityType.Keep">
            <summary>
            The DDE application is incrementing the reference count of an existing string handle.
            </summary>
        </member>
        <member name="T:NLib.Dde.Advanced.Monitor.DdeStringActivityEventArgs">
            <summary>
            This contains information about the <c>StringActivity</c> event.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeStringActivityEventArgs.Value">
            <summary>
            This gets the text associated with the string handle.
            </summary>
        </member>
        <member name="P:NLib.Dde.Advanced.Monitor.DdeStringActivityEventArgs.Action">
            <summary>
            This gets the action being performed.
            </summary>
        </member>
        <member name="T:NLib.Dde.Client.DdeAdviseEventArgs">
            <summary>
            This contains information about the <c>Advise</c> event.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:NLib.Dde.Client.DdeAdviseEventArgs.Item">
            <summary>
            This gets the item name associated with this notification.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeAdviseEventArgs.Format">
            <summary>
            This gets the format of the data included in this notification.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeAdviseEventArgs.State">
            <summary>
            This gets an application defined data object associated with this advise loop.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeAdviseEventArgs.Data">
            <summary>
            This gets the data associated with this notification or null if this is not a hot advise loop.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeAdviseEventArgs.Text">
            <summary>
            This gets the text associated with this notification or null if this is not a hot advise loop.
            </summary>
        </member>
        <member name="T:NLib.Dde.Client.DdeClient">
            <summary>
            This represents the client side of a DDE conversation.
            </summary>
            <threadsafety static="true" instance="true" />
            <remarks>
            <para>
            DDE conversations are established by specifying a service name and topic name pair.  The service name is usually the name of the application
            acting as a DDE server.  A DDE server can respond to multiple service names, but most servers usually only respond to one.  The topic name
            is a logical context for data and is defined by the server application.  A server can and usually does support many topic names.
            </para>
            <para>
            After a conversation has been established by calling <c>Connect</c> an application can read and write data using the <c>Request</c> and
            <c>Poke</c> methods respectively by specifying an item name supported by the active conversation.  An item name identifies a unit of data.
            An application can also be notified of changes by initiating an advise loop on an item name using the <c>StartAdvise</c> method.  Advise
            loops can either be warm or hot.  A hot advise loop returns the data associated with an item name when it changes whereas a warm advise loop
            only notifies the application without sending any data.  Commands can be sent to the server using the <c>Execute</c> method.
            </para>
            <para>
            Callbacks and events are invoked on the thread hosting the <c>DdeContext</c>.  All operations must be marshaled onto the thread hosting the
            <c>DdeContext</c> associated with this object.  Method calls will block until that thread becomes available.  An exception will be generated
            if the thread does not become available in a timely manner.
            </para>
            </remarks>
        </member>
        <member name="E:NLib.Dde.Client.DdeClient.Advise">
            <summary>
            This is raised when the data has changed for an item name that has an advise loop.
            </summary>
        </member>
        <member name="E:NLib.Dde.Client.DdeClient.Disconnected">
            <summary>
            This is raised when the client has been disconnected.
            </summary>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.#ctor(System.String,System.String)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This initializes a new instance of the <c>DdeClient</c> class that can connect to a server that supports the specified service name and
            topic name pair.
            </summary>
            <param name="service">
            A service name supported by a server application.
            </param>
            <param name="topic">
            A topic name support by a server application.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when servic or topic exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when service or topic is a null reference.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.#ctor(System.String,System.String,System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            This initializes a new instance of the <c>DdeClient</c> class that can connect to a server that supports the specified service name and
            topic name pair using the specified synchronizing object.
            </summary>
            <param name="service">
            A service name supported by a server application.
            </param>
            <param name="topic">
            A topic name support by a server application.
            </param>
            <param name="synchronizingObject">
            The synchronizing object to use for this instance.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when service or topic exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when service or topic is a null reference.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.#ctor(System.String,System.String,NLib.Dde.Advanced.DdeContext)">
            <summary>
            This initializes a new instance of the <c>DdeClient</c> class that can connect to a server that supports the specified service name and
            topic name pair and uses the specified context.
            </summary>
            <param name="service">
            A service name supported by a server application.
            </param>
            <param name="topic">
            A topic name support by a server application.
            </param>
            <param name="context">
            The context to use for execution.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when servic or topic exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when service or topic is a null reference.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Dispose">
            <summary>
            This terminates the current conversation and releases all resources held by this instance.
            </summary>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Dispose(System.Boolean)">
            <summary>
            This contains the implementation to release all resources held by this instance.
            </summary>
            <param name="disposing">
            True if called by Dispose, false otherwise.
            </param>
        </member>
        <member name="P:NLib.Dde.Client.DdeClient.DdemlObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeClient.Context">
            <summary>
            This gets the context associated with this instance.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeClient.Service">
            <summary>
            This gets the service name associated with this conversation.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeClient.Topic">
            <summary>
            This gets the topic name associated with this conversation.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeClient.Handle">
            <summary>
            This gets the DDEML handle associated with this conversation.
            </summary>
            <remarks>
            <para>
            This can be used in any DDEML function requiring a conversation handle.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this object to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:NLib.Dde.Client.DdeClient.IsPaused">
            <summary>
            This gets a bool indicating whether this conversation is paused.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeClient.IsConnected">
            <summary>
            This gets a bool indicating whether the conversation is established.
            </summary>
            <remarks>
            <note type="caution">
            Do not assume that the conversation is still established after checking this property.  The conversation can terminate at any time.
            </note>
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Connect">
            <summary>
            This establishes a conversation with a server that supports the specified service name and topic name pair.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is already connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the client could not connect to the server.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.TryConnect">
            <summary>
            This establishes a conversation with a server that supports the specified service name and topic name pair.
            </summary>
            <returns>
            Zero if the operation succeed or non-zero if the operation failed.
            </returns>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Disconnect">
            <summary>
            This terminates the current conversation.
            </summary>
            <event cref="E:NLib.Dde.Client.DdeClient.Disconnected" />
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client was not previously connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thown when the client could not disconnect from the server.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Pause">
            <summary>
            This pauses the current conversation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the conversation is already paused.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversation could not be paused or when the client is not connected.
            </exception>
            <remarks>
            Synchronous operations will timeout if the conversation is paused.  Asynchronous operations can begin, but will not complete until the
            conversation has resumed.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Resume">
            <summary>
            This resumes the current conversation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the conversation was not previously paused or when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversation could not be resumed.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Abandon(System.IAsyncResult)">
            <summary>
            This terminates an asychronous operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call that begins an asynchronous operation.
            </param>
            <remarks>
            This method does nothing if the asynchronous operation has already completed.
            </remarks>
            <exception cref="T:System.ArgumentException">
            This is thown when asyncResult is an invalid IAsyncResult.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when asyncResult is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the asynchronous operation could not be abandoned.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Execute(System.String,System.Int32)">
            <summary>
            This sends a command to the server application.
            </summary>
            <param name="command">
            The command to be sent to the server application.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when command exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when command is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the command.
            </exception>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.TryExecute(System.String,System.Int32)">
            <summary>
            This sends a command to the server application.
            </summary>
            <param name="command">
            The command to be sent to the server application.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <returns>
            Zero if the operation succeed or non-zero if the operation failed.
            </returns>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.BeginExecute(System.String,System.AsyncCallback,System.Object)">
            <summary>
            This begins an asynchronous operation to send a command to the server application.
            </summary>
            <param name="command">
            The command to be sent to the server application.
            </param>
            <param name="callback">
            The delegate to invoke when this operation completes.
            </param>
            <param name="state">
            An application defined data object to associate with this operation.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
            <exception cref="T:System.ArgumentException">
            This is thown when command exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when command is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the asynchronous operation could not begin.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.EndExecute(System.IAsyncResult)">
            <summary>
            This throws any exception that occurred during the asynchronous operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call to <c>BeginExecute</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when asyncResult is an invalid IAsyncResult.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when asyncResult is a null reference.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the command.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Poke(System.String,System.String,System.Int32)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This sends data to the server application.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="data">
            The data to send.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item or data is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the data.
            </exception>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Poke(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This sends data to the server application.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="data">
            The data to send.
            </param>
            <param name="format">
            The format of the data.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item or data is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the data.
            </exception>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.TryPoke(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This sends data to the server application.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="data">
            The data to send.
            </param>
            <param name="format">
            The format of the data.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <returns>
            Zero if the operation succeed or non-zero if the operation failed.
            </returns>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.BeginPoke(System.String,System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This begins an asynchronous operation to send data to the server application.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="data">
            The data to send.
            </param>
            <param name="format">
            The format of the data.
            </param>
            <param name="callback">
            The delegate to invoke when this operation completes.
            </param>
            <param name="state">
            An application defined data object to associate with this operation.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item or data is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the asynchronous operation could not begin.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.EndPoke(System.IAsyncResult)">
            <summary>
            This throws any exception that occurred during the asynchronous operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call to <c>BeginPoke</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when asyncResult is an invalid IAsyncResult.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when asyncResult is a null reference.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the data.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Request(System.String,System.Int32)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This requests data using the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <returns>
            The data returned by the server application in CF_TEXT format.
            </returns>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the request.
            </exception>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.Request(System.String,System.Int32,System.Int32)">
            <summary>
            This requests data using the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="format">
            The format of the data to return.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <returns>
            The data returned by the server application.
            </returns>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the request.
            </exception>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.TryRequest(System.String,System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            This requests data using the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="format">
            The format of the data to return.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <param name="data">
            The data returned by the server application.
            </param>
            <returns>
            Zero if the operation succeeded or non-zero if the operation failed.
            </returns>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.BeginRequest(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            This begins an asynchronous operation to request data using the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="format">
            The format of the data to return.
            </param>
            <param name="callback">
            The delegate to invoke when this operation completes.
            </param>
            <param name="state">
            An application defined data object to associate with this operation.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the asynchronous operation could not begin.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.EndRequest(System.IAsyncResult)">
            <summary>
            This gets the data returned by the server application for the operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call to <c>BeginRequest</c>.
            </param>
            <returns>
            The data returned by the server application.
            </returns>
            <exception cref="T:System.ArgumentException">
            This is thown when asyncResult is an invalid IAsyncResult.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when asyncResult is a null reference.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not process the request.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.StartAdvise(System.String,System.Int32,System.Boolean,System.Int32)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This initiates an advise loop on the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="format">
            The format of the data to return.
            </param>
            <param name="hot">
            A bool indicating whether data should be included with the notification.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <event cref="E:NLib.Dde.Client.DdeClient.Advise" />
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the item is already being advised or when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not initiate the advise loop.
            </exception>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.StartAdvise(System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Object)">
            <summary>
            This initiates an advise loop on the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="format">
            The format of the data to return.
            </param>
            <param name="hot">
            A bool indicating whether data should be included with the notification.
            </param>
            <param name="acknowledge">
            A bool indicating whether the client should acknowledge each advisory before the server will send send another.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <param name="adviseState">
            An application defined data object to associate with this advise loop.
            </param>
            <event cref="E:NLib.Dde.Client.DdeClient.Advise" />
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the item is already being advised or when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not initiate the advise loop.
            </exception>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.BeginStartAdvise(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This begins an asynchronous operation to initiate an advise loop on the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="format">
            The format of the data to be returned.
            </param>
            <param name="hot">
            A bool indicating whether data should be included with the notification.
            </param>
            <param name="callback">
            The delegate to invoke when this operation completes.
            </param>
            <param name="asyncState">
            An application defined data object to associate with this operation.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
            <event cref="E:NLib.Dde.Client.DdeClient.Advise" />
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the item is already being advised or when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the asynchronous operation could not begin.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.BeginStartAdvise(System.String,System.Int32,System.Boolean,System.Boolean,System.AsyncCallback,System.Object,System.Object)">
            <summary>
            This begins an asynchronous operation to initiate an advise loop on the specified item name.
            </summary>
            <param name="item">
            An item name supported by the current conversation.
            </param>
            <param name="format">
            The format of the data to be returned.
            </param>
            <param name="hot">
            A bool indicating whether data should be included with the notification.
            </param>
            <param name="acknowledge">
            A bool indicating whether the client should acknowledge each advisory before the server will send send another.
            </param>
            <param name="callback">
            The delegate to invoke when this operation completes.
            </param>
            <param name="asyncState">
            An application defined data object to associate with this operation.
            </param>
            <param name="adviseState">
            An application defined data object to associate with this advise loop.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
            <event cref="E:NLib.Dde.Client.DdeClient.Advise" />
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the item is already being advised or when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the asynchronous operation could not begin.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.EndStartAdvise(System.IAsyncResult)">
            <summary>
            This throws any exception that occurred during the operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call to <c>BeginPoke</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when asyncResult is an invalid IAsyncResult.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when asyncResult is a null reference.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not initiate the advise loop.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.StopAdvise(System.String,System.Int32)">
            <summary>
            This terminates the advise loop for the specified item name.
            </summary>
            <param name="item">
            An item name that has an active advise loop.
            </param>
            <param name="timeout">
            The amount of time in milliseconds to wait for a response.
            </param>
            <remarks>
            This operation will timeout if the conversation is paused.
            </remarks>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters or timeout is negative.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the item is not being advised or when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not terminate the advise loop.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.BeginStopAdvise(System.String,System.AsyncCallback,System.Object)">
            <summary>
            This begins an asynchronous operation to terminate the advise loop for the specified item name.
            </summary>
            <param name="item">
            An item name that has an active advise loop.
            </param>
            <param name="callback">
            The delegate to invoke when this operation completes.
            </param>
            <param name="state">
            An application defined data object to associate with this operation.
            </param>
            <returns>
            An <c>IAsyncResult</c> object for this operation.
            </returns>
            <exception cref="T:System.ArgumentException">
            This is thown when item exceeds 255 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the item is not being advised or when the client is not connected.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the asynchronous operation could not begin.
            </exception>
        </member>
        <member name="M:NLib.Dde.Client.DdeClient.EndStopAdvise(System.IAsyncResult)">
            <summary>
            This throws any exception that occurred during the operation.
            </summary>
            <param name="asyncResult">
            The <c>IAsyncResult</c> object returned by a call to <c>BeginPoke</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when asyncResult is an invalid IAsyncResult.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when asyncResult is a null reference.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the server does not terminate the advise loop.
            </exception>
        </member>
        <member name="T:NLib.Dde.Client.DdeClient.AsyncResult">
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:NLib.Dde.Client.DdeClient.InvalidAsyncResult">
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:NLib.Dde.Client.DdeDisconnectedEventArgs">
            <summary>
            This contains information about the <c>Disconnected</c> event.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:NLib.Dde.Client.DdeDisconnectedEventArgs.IsServerInitiated">
            <summary>
            This gets a bool indicating whether the client disconnected because of the server.
            </summary>
        </member>
        <member name="P:NLib.Dde.Client.DdeDisconnectedEventArgs.IsDisposed">
            <summary>
            This gets a bool indicating whether the client disconnected because <c>Dispose</c> was explicitly called.
            </summary>
            <remarks>
            The value will be true if <c>Dispose</c> was explicitly called on <c>DdeClient</c>.  The <c>DdeClient</c> sending this event has 
            been disposed and can no longer be accessed.  Any exception thrown in the currently executing method will be ignored.
            </remarks>
        </member>
        <member name="T:NLib.Dde.DdeEventArgs">
            <summary>
            This is the base class for all NDde event argument classes.
            </summary>
        </member>
        <member name="M:NLib.Dde.DdeEventArgs.ToString">
            <summary>
            This returns a string containing the current values of all properties.
            </summary>
            <returns>
            A string containing the current values of all properties.
            </returns>
        </member>
        <member name="T:NLib.Dde.DdeException">
            <summary>
            This is thrown when a DDE exception occurs.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:NLib.Dde.DdeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:NLib.Dde.DdeException.Code">
            <summary>
            This gets an error code returned by the DDEML.
            </summary>
            <remarks>
            <para>
            The value is zero if the exception was not thrown because of the DDEML.
            </para>
            <para>
            <list type="bullet">
            <item><term>0x0000</term><description>DMLERR_NO_DMLERROR</description></item>
            <item><term>0x4000</term><description>DMLERR_ADVACKTIMEOUT</description></item>
            <item><term>0x4001</term><description>DMLERR_BUSY</description></item>
            <item><term>0x4002</term><description>DMLERR_DATAACKTIMEOUT</description></item>
            <item><term>0x4003</term><description>DMLERR_DLL_NOT_INITIALIZED</description></item>
            <item><term>0x4004</term><description>DMLERR_DLL_USAGE</description></item>
            <item><term>0x4005</term><description>DMLERR_EXECACKTIMEOUT</description></item>
            <item><term>0x4006</term><description>DMLERR_INVALIDPARAMETER</description></item>
            <item><term>0x4007</term><description>DMLERR_LOW_MEMORY</description></item>
            <item><term>0x4008</term><description>DMLERR_MEMORY_DMLERROR</description></item>
            <item><term>0x4009</term><description>DMLERR_NOTPROCESSED</description></item>
            <item><term>0x400A</term><description>DMLERR_NO_CONV_ESTABLISHED</description></item>
            <item><term>0x400B</term><description>DMLERR_POKEACKTIMEOUT</description></item>
            <item><term>0x400C</term><description>DMLERR_POSTMSG_FAILED</description></item>
            <item><term>0x400D</term><description>DMLERR_REENTRANCY</description></item>
            <item><term>0x400E</term><description>DMLERR_SERVER_DIED</description></item>
            <item><term>0x400F</term><description>DMLERR_SYS_DMLERROR</description></item>
            <item><term>0x4010</term><description>DMLERR_UNADVACKTIMEOUT</description></item>
            <item><term>0x4011</term><description>DMLERR_UNFOUND_QUEUE_ID</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Dde.DdeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:NLib.Dde.Foundation.Advanced.DdemlContext.InstanceManager">
            <summary>
            This class is needed to dispose of DDEML resources correctly since the DDEML is thread specific.
            </summary>
        </member>
        <member name="T:NLib.Dde.Foundation.Client.DdemlClient.ConversationManager">
            <summary>
            This class is needed to dispose of DDEML resources correctly since the DDEML is thread specific.
            </summary>
        </member>
        <member name="T:NLib.Dde.Foundation.Server.DdemlServer.RegistrationManager">
            <summary>
            This class is needed to dispose of DDEML resources correctly since the DDEML is thread specific.
            </summary>
        </member>
        <member name="T:NLib.Dde.Server.DdeConversation">
            <summary>
            This represents a DDE conversation established on a <c>DdeServer</c>.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="P:NLib.Dde.Server.DdeConversation.Service">
            <summary>
            This gets the service name associated with this conversation.
            </summary>
        </member>
        <member name="P:NLib.Dde.Server.DdeConversation.Topic">
            <summary>
            This gets the topic name associated with this conversation.
            </summary>
        </member>
        <member name="P:NLib.Dde.Server.DdeConversation.Handle">
            <summary>
            This gets the DDEML handle associated with this conversation.
            </summary>
            <remarks>
            <para>
            This can be used in any DDEML function requiring a conversation handle.
            </para>
            <para>
            <note type="caution">
            Incorrect usage of the DDEML can cause this object to function incorrectly and can lead to resource leaks.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:NLib.Dde.Server.DdeConversation.IsPaused">
            <summary>
            This gets a bool indicating whether this conversation is paused.
            </summary>
        </member>
        <member name="P:NLib.Dde.Server.DdeConversation.Tag">
            <summary>
            This gets an application defined data object associated with this conversation.
            </summary>
            <remarks>
            Use this property to carry state information with the conversation.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeConversation.ToString">
            <summary>
            This returns a string containing the current values of all properties.
            </summary>
            <returns>
            A string containing the current values of all properties.
            </returns>
        </member>
        <member name="T:NLib.Dde.Server.DdeServer">
            <summary>
            This represents the server side of DDE conversations.
            </summary>
            <threadsafety static="true" instance="true" />
            <remarks>
            <para>
            DDE conversations are established by specifying a service name and topic name pair.  The service name is usually the name of the application
            acting as a DDE server.  A DDE server can respond to multiple service names, but most servers usually only respond to one.  The topic name
            is a logical context for data and is defined by the server application.  A server can and usually does support many topic names.
            </para>
            <para>
            After this object has registered its service name by calling the <c>Register</c> method clients can connect to it by specifying the service
            name the server registered and a topic name that it supports.
            </para>
            <para>
            Event methods are invoked on the thread hosting the <c>DdeContext</c>.  All operations must be marshaled onto the thread hosting the 
            <c>DdeContext</c> associated with this object.  Method calls will block until that thread becomes available.  An exception will be generated
            if the thread does not become available in a timely manner.
            </para>
            <para>
            <note type="inheritinfo">
            The event methods must be overridden in a subclass as needed.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.#ctor(System.String)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This initializes a new instance of the <c>DdeServer</c> class that can register the specified service name.
            </summary>
            <param name="service">
            The service name that this instance can register.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when service exceeds 255 characters..
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when service is a null reference.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.#ctor(System.String,System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            This initializes a new instance of the <c>DdeServer</c> class that can register the specified service name and using the specified
            synchronizing object.
            </summary>
            <param name="service">
            The service name that this instance can register.
            </param>
            <param name="synchronizingObject">
            The synchronizing object to use for this instance.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when service exceeds 255 characters..
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when service is a null reference.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.#ctor(System.String,NLib.Dde.Advanced.DdeContext)">
            <summary>
            This initializes a new instance of the <c>DdeServer</c> class that can register the specified service name and uses the specified
            context.
            </summary>
            <param name="service">
            The service name that this instance can register.
            </param>
            <param name="context">
            The context to use for execution.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when service exceeds 255 characters..
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when service is a null reference.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Dispose">
            <summary>
            This unregisters service name and releases all resources held by this instance.
            </summary>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Dispose(System.Boolean)">
            <summary>
            This contains the implementation to release all resources held by this instance.
            </summary>
            <param name="disposing">
            True if called by Dispose, false otherwise.
            </param>
        </member>
        <member name="P:NLib.Dde.Server.DdeServer.DdemlObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLib.Dde.Server.DdeServer.Context">
            <summary>
            This gets the context associated with his instance.
            </summary>
        </member>
        <member name="P:NLib.Dde.Server.DdeServer.Service">
            <summary>
            This gets the service name associated with this server.
            </summary>
        </member>
        <member name="P:NLib.Dde.Server.DdeServer.IsRegistered">
            <summary>
            This gets a bool indicating whether the service name is registered.
            </summary>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Register">
            <summary>
            This registers the service name.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the server is already registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the service name could not be registered.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Unregister">
            <summary>
            This unregisters the service name.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the server is not registered.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Advise(System.String,System.String)">
            <summary>
            This notifies all clients that data has changed for the specified topic name and item name pair.
            </summary>
            <param name="topic">
            A topic name supported by this server.
            </param>
            <param name="item">
            An item name supported by this server.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thown when topic or item exceeds 255 characters..
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when topic or item is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the server is not registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the notification could not be posted.
            </exception>
            <remarks>
            Use an asterix to indicate that the topic name, item name, or both should be wild.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Pause(NLib.Dde.Server.DdeConversation)">
            <overloads>
            <summary>
            </summary>
            <remarks>
            Pausing a conversation causes this server to queue events until the conversation resumes.
            </remarks>
            </overloads>
            <summary>
            This pauses the specified conversation.
            </summary>
            <param name="conversation">
            The conversation to pause.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when conversation is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the conversation is already paused or when the server is not registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversation could not be paused.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Pause">
            <summary>
            This pauses all conversations.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the server is not registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversations could not be paused.
            </exception>
            <remarks>
            Pausing a conversation causes this object to queue events until the conversation resumes.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Resume(NLib.Dde.Server.DdeConversation)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This resumes the specified conversation.
            </summary>
            <param name="conversation">
            The conversation to resume.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when conversation is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the conversation is not paused or when the server is not registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversation could not be resumed.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Resume">
            <summary>
            This resumes all conversations.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the server is not registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversations could not be resumed.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Disconnect(NLib.Dde.Server.DdeConversation)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This terminates the specified conversation.
            </summary>
            <param name="conversation">
            The conversation to terminate.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown when conversation is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the server is not registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversation could not be terminated.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.Disconnect">
            <summary>
            This terminates all conversations.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This is thrown when the server is not registered.
            </exception>
            <exception cref="T:NLib.Dde.DdeException">
            This is thrown when the conversations could not be terminated.
            </exception>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnStartAdvise(NLib.Dde.Server.DdeConversation,System.String,System.Int32)">
            <summary>
            This is invoked when a client attempts to initiate an advise loop.
            </summary>
            <param name="conversation">
            The conversation associated with this event.
            </param>
            <param name="item">
            The item name associated with this event.
            </param>
            <param name="format">
            The format of the data.
            </param>
            <returns>
            True to allow the advise loop, false otherwise.
            </returns>
            <remarks>
            The default implementation accepts all advise loops.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnStopAdvise(NLib.Dde.Server.DdeConversation,System.String)">
            <summary>
            This is invoked when a client terminates an advise loop.
            </summary>
            <param name="conversation">
            The conversation associated with this event.
            </param>
            <param name="item">
            The item name associated with this event.
            </param>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnBeforeConnect(System.String)">
            <summary>
            This is invoked when a client attempts to establish a conversation.
            </summary>
            <param name="topic">
            The topic name associated with this event.
            </param>
            <returns>
            True to allow the connection, false otherwise.
            </returns>
            <remarks>
            The default implementation accepts all connections.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnAfterConnect(NLib.Dde.Server.DdeConversation)">
            <summary>
            This is invoked when a client has successfully established a conversation.
            </summary>
            <param name="conversation">
            The conversation associated with this event.
            </param>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnDisconnect(NLib.Dde.Server.DdeConversation)">
            <summary>
            This is invoked when a client terminates a conversation.
            </summary>
            <param name="conversation">
            The conversation associated with this event.
            </param>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnExecute(NLib.Dde.Server.DdeConversation,System.String)">
            <summary>
            This is invoked when a client sends a command.
            </summary>
            <param name="conversation">
            The conversation associated with this event.
            </param>
            <param name="command">
            The command to be executed.
            </param>
            <returns>
            An <c>ExecuteResult</c> indicating the result.
            </returns>
            <remarks>
            The default implementation returns <c>ExecuteResult.NotProcessed</c> to the client.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnPoke(NLib.Dde.Server.DdeConversation,System.String,System.Byte[],System.Int32)">
            <summary>
            This is invoked when a client sends data.
            </summary>
            <param name="conversation">
            The conversation associated with this event.
            </param>
            <param name="item">
            The item name associated with this event.
            </param>
            <param name="data">
            The data associated with this event.
            </param>
            <param name="format">
            The format of the data.
            </param>
            <returns>
            A <c>PokeResult</c> indicating the result.
            </returns>
            <remarks>
            The default implementation returns <c>PokeResult.NotProcessed</c> to the client.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnRequest(NLib.Dde.Server.DdeConversation,System.String,System.Int32)">
            <overloads>
            <summary>
            </summary>
            </overloads>
            <summary>
            This is invoked when a client attempts to request data.
            </summary>
            <param name="conversation">
            The conversation associated with this event.
            </param>
            <param name="item">
            The item name associated with this event.
            </param>
            <param name="format">
            The format of the data.
            </param>
            <returns>
            A <c>RequestResult</c> indicating the result.
            </returns>
            <remarks>
            The default implementation returns <c>RequestResult.NotProcessed</c> to the client.
            </remarks>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.OnAdvise(System.String,System.String,System.Int32)">
            <summary>
            This is invoked when the server is performing a hot advise.
            </summary>
            <param name="topic">
            The topic name associated with this event.
            </param>
            <param name="item">
            The item name associated with this event.
            </param>
            <param name="format">
            The format of the data.
            </param>
            <returns>
            The data that will be sent to the clients.
            </returns>
            <remarks>
            The default implementation sends nothing to the clients.
            </remarks>
        </member>
        <member name="T:NLib.Dde.Server.DdeServer.ExecuteResult">
            <summary>
            This is the return value of the <c>OnExecute</c> method.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.ExecuteResult.Processed">
            <summary>
            Return this value if the command was executed successfully.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.ExecuteResult.NotProcessed">
            <summary>
            Return this value if the command was not executed successfully.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.ExecuteResult.TooBusy">
            <summary>
            Return this value if the server is too busy.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.ExecuteResult.PauseConversation">
            <summary>
            Return this value to pause the conversation and execute the command asynchronously.  After the conversation has been resumed the
            <c>OnExecute</c> method will run again.
            </summary>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.ExecuteResult.Equals(System.Object)">
            <summary>
            This determines whether two object instances are equal.
            </summary>
            <param name="o">
            The object to compare with the current object.
            </param>
            <returns>
            True if the specified object is equal to the current object, false otherwise.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.ExecuteResult.GetHashCode">
            <summary>
            This returns a hash code for the object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.ExecuteResult.op_Equality(NLib.Dde.Server.DdeServer.ExecuteResult,NLib.Dde.Server.DdeServer.ExecuteResult)">
            <summary>
            This determines whether two <c>ExecuteResult</c> objects are equal.
            </summary>
            <param name="lhs">
            The left hand side object.
            </param>
            <param name="rhs"></param>
            The right hand side object.
            <returns>
            True if the two objects are equal, false otherwise.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.ExecuteResult.op_Inequality(NLib.Dde.Server.DdeServer.ExecuteResult,NLib.Dde.Server.DdeServer.ExecuteResult)">
            <summary>
            This determines whether two <c>ExecuteResult</c> objects are not equal.
            </summary>
            <param name="lhs">
            The left hand side object.
            </param>
            <param name="rhs"></param>
            The right hand side object.
            <returns>
            True if the two objects are not equal, false otherwise.
            </returns>
        </member>
        <member name="T:NLib.Dde.Server.DdeServer.PokeResult">
            <summary>
            This is the return value of the <c>OnPoke</c> method.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.PokeResult.Processed">
            <summary>
            Return this value if the poke was successful.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.PokeResult.NotProcessed">
            <summary>
            Return this value if the poke was not successful.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.PokeResult.TooBusy">
            <summary>
            Return this value if the server is too busy.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.PokeResult.PauseConversation">
            <summary>
            Return this value to pause the conversation and execute the poke asynchronously.  After the conversation has been resumed the
            <c>OnPoke</c> method will run again.
            </summary>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.PokeResult.Equals(System.Object)">
            <summary>
            This determines whether two object instances are equal.
            </summary>
            <param name="o">
            The object to compare with the current object.
            </param>
            <returns>
            True if the specified object is equal to the current object, false otherwise.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.PokeResult.GetHashCode">
            <summary>
            This returns a hash code for the object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.PokeResult.op_Equality(NLib.Dde.Server.DdeServer.PokeResult,NLib.Dde.Server.DdeServer.PokeResult)">
            <summary>
            This determines whether two <c>PokeResult</c> objects are equal.
            </summary>
            <param name="lhs">
            The left hand side object.
            </param>
            <param name="rhs"></param>
            The right hand side object.
            <returns>
            True if the two objects are equal, false otherwise.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.PokeResult.op_Inequality(NLib.Dde.Server.DdeServer.PokeResult,NLib.Dde.Server.DdeServer.PokeResult)">
            <summary>
            This determines whether two <c>ExecuteResult</c> objects are not equal.
            </summary>
            <param name="lhs">
            The left hand side object.
            </param>
            <param name="rhs"></param>
            The right hand side object.
            <returns>
            True if the two objects are not equal, false otherwise.
            </returns>
        </member>
        <member name="T:NLib.Dde.Server.DdeServer.RequestResult">
            <summary>
            This is the return value of the <c>OnRequest</c> method.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.RequestResult.NotProcessed">
            <summary>
            Return this value if the request was not successful.
            </summary>
        </member>
        <member name="F:NLib.Dde.Server.DdeServer.RequestResult.PauseConversation">
            <summary>
            Return this value to pause the conversation and execute the request asynchronously.  After the conversation has been resumed the
            <c>OnRequest</c> method will run again.
            </summary>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.RequestResult.#ctor(System.Byte[])">
            <summary>
            This initializes the <c>RequestResult</c> struct with the data to return to the client.
            </summary>
            <param name="data">
            The data to return to the client.
            </param>
        </member>
        <member name="P:NLib.Dde.Server.DdeServer.RequestResult.Data">
            <summary>
            The data to send to the client application.
            </summary>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.RequestResult.Equals(System.Object)">
            <summary>
            This determines whether two object instances are equal.
            </summary>
            <param name="o">
            The object to compare with the current object.
            </param>
            <returns>
            True if the specified object is equal to the current object, false otherwise.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.RequestResult.GetHashCode">
            <summary>
            This returns a hash code for the object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.RequestResult.op_Equality(NLib.Dde.Server.DdeServer.RequestResult,NLib.Dde.Server.DdeServer.RequestResult)">
            <summary>
            This determines whether two <c>RequestResult</c> objects are equal.
            </summary>
            <param name="lhs">
            The left hand side object.
            </param>
            <param name="rhs"></param>
            The right hand side object.
            <returns>
            True if the two objects are equal, false otherwise.
            </returns>
        </member>
        <member name="M:NLib.Dde.Server.DdeServer.RequestResult.op_Inequality(NLib.Dde.Server.DdeServer.RequestResult,NLib.Dde.Server.DdeServer.RequestResult)">
            <summary>
            This determines whether two <c>ExecuteResult</c> objects are not equal.
            </summary>
            <param name="lhs">
            The left hand side object.
            </param>
            <param name="rhs"></param>
            The right hand side object.
            <returns>
            True if the two objects are not equal, false otherwise.
            </returns>
        </member>
        <member name="T:NLib.Wcf.BindingTypes">
            <summary>
            Wcf Service Binding Types.
            </summary>
        </member>
        <member name="F:NLib.Wcf.BindingTypes.Pipe">
            <summary>
            Pipe
            </summary>
        </member>
        <member name="F:NLib.Wcf.BindingTypes.Tcp">
            <summary>
            Tcp
            </summary>
        </member>
        <member name="F:NLib.Wcf.BindingTypes.Http">
            <summary>
            Http
            </summary>
        </member>
        <member name="T:NLib.Wcf.WcfAddress">
            <summary>
            Wcf Service Address. Used for keep information that need to interchange between
            server host and client channel.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfAddress.GetEndPointAddress">
            <summary>
            Get EndPoint Address.
            </summary>
            <returns>
            Returns the end point address that used for create ServiceHost or 
            Client Proxy access.
            </returns>
        </member>
        <member name="M:NLib.Wcf.WcfAddress.GetChannelBinding">
            <summary>
            Gets Channel Binding.
            </summary>
            <returns>Returns instance of Channels's Binding instance.</returns>
        </member>
        <member name="M:NLib.Wcf.WcfAddress.GetMexBinding">
            <summary>
            Gets Mex Binding.
            </summary>
            <returns>Returns instance of Mex's Binding instance.</returns>
        </member>
        <member name="P:NLib.Wcf.WcfAddress.BindingType">
            <summary>
            Gets or set service binding type.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfAddress.HostName">
            <summary>
            Gets or sets host name. like localhost.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfAddress.PortNumber">
            <summary>
            Gets or sets Port Number. used zero if not need portnumber in binding address.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfAddress.ServiceName">
            <summary>
            Gets or sets service's name that is suffix after base address.
            </summary>
        </member>
        <member name="T:NLib.Wcf.WcfUtils">
            <summary>
            Wcf Common utils class.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfUtils.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:NLib.Wcf.WcfExtensionMethods">
            <summary>
            The Wcf Extension methods class.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfExtensionMethods.IsImplements``1(``0,System.Type)">
            <summary>
            Checks is target instance type is implements the interface type.
            </summary>
            <typeparam name="T">The Type of Instance to check.</typeparam>
            <param name="instance">The of Instance to check.</param>
            <param name="interfaceType">The interface type.</param>
            <returns>Returns true if the target instance type is implements the interface type.</returns>
        </member>
        <member name="M:NLib.Wcf.WcfExtensionMethods.HasServiceContract(System.Type)">
            <summary>
            Checks if the specificed type is contains ServiceContract attribute.
            </summary>
            <param name="interfaceType">The type to checks is contains ServiceContract attribute.</param>
            <returns>Returns true  if interfaceType is interface and has ServiceContract attribute.</returns>
        </member>
        <member name="T:NLib.Wcf.WcfServiceHost`1">
            <summary>
            Wcf Generic Service Host.
            </summary>
            <typeparam name="I">The Wcf interface type.</typeparam>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Abort">
            <summary>
            Causes a communication object to transition immediately from its current state into the 
            closed state.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to close a communication object with a specified timeout.
            </summary>
            <param name="timeout"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to close a communication object.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to open a communication object within a specified interval 
            of time.
            </summary>
            <param name="timeout"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to open a communication object.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Close">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
            <summary>
            Completes an asynchronous operation to close a communication object.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
            <summary>
            Completes an asynchronous operation to open a communication object.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
            <summary>
            Causes a communication object to transition from the created state into the opened state 
            within a specified interval of time.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Open">
            <summary>
            Causes a communication object to transition from the created state into the opened state.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#State">
            <summary>
            Gets the current state of the communication-oriented object.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Closed">
            <summary>
            Occurs when the communication object completes its transition from the closing state 
            into the closed state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Closing">
            <summary>
            Occurs when the communication object first enters the closing state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Faulted">
            <summary>
            Occurs when the communication object first enters the faulted state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Opened">
            <summary>
            Occurs when the communication object completes its transition 
            from the opening state into the opened state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceHost`1.System#ServiceModel#ICommunicationObject#Opening">
            <summary>
            Occurs when the communication object first enters the opening state.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">True if in disposing process.</param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.Start">
            <summary>
            Start service.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceHost`1.Shutdown">
            <summary>
            Shutdown service.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceHost`1.WcfInterfaceType">
            <summary>
            Gets Wcf Service Interface Type.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceHost`1.ServiceInstance">
            <summary>
            Gets or sets current service instnace that implement actual service interface.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceHost`1.Host">
            <summary>
            Gets internal service host instance.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceHost`1.IsRunning">
            <summary>
            Checks is service host is running.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceHost`1.Url">
            <summary>
            Access Service Address instance.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceHost`1.OnShutdown">
            <summary>
            OnShutdown event.
            </summary>
        </member>
        <member name="T:NLib.Wcf.WcfServiceStatus">
            <summary>
            Provide basic Wcf service status.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceStatus.IsAlive">
            <summary>
            Checks is service is still alive.
            </summary>
        </member>
        <member name="T:NLib.Wcf.IWcfBasicService">
            <summary>
            IWcfBasicService interface.
            </summary>
        </member>
        <member name="M:NLib.Wcf.IWcfBasicService.GetServiceStatus">
            <summary>
            Gets current service status.
            </summary>
            <returns>Returns the service status information.</returns>
        </member>
        <member name="T:NLib.Wcf.WcfBasicServer`2">
            <summary>
            The Wcf Basic Server.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="I">The Wcf interface type.</typeparam>
        </member>
        <member name="M:NLib.Wcf.WcfBasicServer`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfBasicServer`2.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfBasicServer`2.Initialized(NLib.Wcf.WcfServiceHost{`1})">
            <summary>
            Main Initialized methods.
            </summary>
            <param name="host">The host instance.</param>
        </member>
        <member name="M:NLib.Wcf.WcfBasicServer`2.OnInitialized(NLib.Wcf.WcfServiceHost{`1})">
            <summary>
            OnInitialized method. Overrides to init optional data during create host instance.
            </summary>
            <param name="host">The host instance.</param>
        </member>
        <member name="M:NLib.Wcf.WcfBasicServer`2.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfBasicServer`2.Start">
            <summary>
            Start.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfBasicServer`2.Shutdown">
            <summary>
            Shutdown.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfBasicServer`2.IsRunning">
            <summary>
            Checks is service host is running.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfBasicServer`2.IsDisposed">
            <summary>
            Checks is host instance is already disposed.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfBasicServer`2.Url">
            <summary>
            Access Service Address instance.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfBasicServer`2.ServiceInstance">
            <summary>
            Gets or sets current service instnace that implement actual service interface.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfBasicServer`2.Host">
            <summary>
            Gets internal service host instance.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfBasicServer`2.OnShutdown">
            <summary>
            OnShutdown event.
            </summary>
        </member>
        <member name="T:NLib.Wcf.WcfServiceClient`1">
            <summary>
            Wcf Service Client.
            </summary>
            <typeparam name="I">The service interface type.</typeparam>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Abort">
            <summary>
            Causes a communication object to transition immediately from its current state into the 
            closed state.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to close a communication object with a specified timeout.
            </summary>
            <param name="timeout"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to close a communication object.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to open a communication object within a specified interval 
            of time.
            </summary>
            <param name="timeout"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to open a communication object.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Close">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
            <summary>
            Completes an asynchronous operation to close a communication object.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
            <summary>
            Completes an asynchronous operation to open a communication object.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
            <summary>
            Causes a communication object to transition from the created state into the opened state 
            within a specified interval of time.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Open">
            <summary>
            Causes a communication object to transition from the created state into the opened state.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#State">
            <summary>
            Gets the current state of the communication-oriented object.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Closed">
            <summary>
            Occurs when the communication object completes its transition from the closing state 
            into the closed state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Closing">
            <summary>
            Occurs when the communication object first enters the closing state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Faulted">
            <summary>
            Occurs when the communication object first enters the faulted state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Opened">
            <summary>
            Occurs when the communication object completes its transition 
            from the opening state into the opened state.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceClient`1.System#ServiceModel#ICommunicationObject#Opening">
            <summary>
            Occurs when the communication object first enters the opening state.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">True if in disposing state.</param>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.Connect">
            <summary>
            Connect to service service and create proxy channel.
            </summary>
        </member>
        <member name="M:NLib.Wcf.WcfServiceClient`1.Disconnect">
            <summary>
            Disconnect from server service and release channel.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceClient`1.Url">
            <summary>
            Access Service Address instance.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceClient`1.Channel">
            <summary>
            Gets Channel instance.
            </summary>
        </member>
        <member name="P:NLib.Wcf.WcfServiceClient`1.IsConnected">
            <summary>
            Checks is connnected to server service.
            </summary>
        </member>
        <member name="E:NLib.Wcf.WcfServiceClient`1.OnDisconnecting">
            <summary>
            OnDisconnecting event.
            </summary>
        </member>
        <member name="T:NLib.Wcf.WcfBasicClient`1">
            <summary>
            Wcf Basic Client&lt;I&gt;
            </summary>
            <typeparam name="I">The server service interface type.</typeparam>
        </member>
        <member name="T:NLib.Wcf.WcfBasicClient`1.CallState">
            <summary />
        </member>
        <member name="M:NLib.Wcf.WcfBasicClient`1.CallState.#ctor">
            <summary />
        </member>
        <member name="P:NLib.Wcf.WcfBasicClient`1.CallState.Timeout">
            <summary />
        </member>
        <member name="P:NLib.Wcf.WcfBasicClient`1.CallState.Error">
            <summary />
        </member>
        <member name="P:NLib.Wcf.WcfBasicClient`1.CallState.Completed">
            <summary />
        </member>
        <member name="M:NLib.Wcf.WcfBasicClient`1.Call(System.Action,System.Int32)">
            <summary>
            Execute action.
            </summary>
            <param name="work">The Action delegate.</param>
            <param name="timeout">Timeout in millisecond.</param>
            <returns>Returns CallState instance</returns>
        </member>
        <member name="T:NLib.Networks.NetworkAPI">
            <summary>
            Network API provide wrapper structures, constants and functions 
            in multiple network dlls.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.MAX_PATH">
            <summary>Maximum path length</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NO_ERROR">
            <summary>No error</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.ERROR_ACCESS_DENIED">
            <summary>Access denied</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.ERROR_WRONG_LEVEL">
            <summary>Access denied</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.ERROR_MORE_DATA">
            <summary>More data available</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.ERROR_NOT_CONNECTED">
            <summary>Not connected</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.UNIVERSAL_NAME_INFO_LEVEL">
            <summary>Level 1</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.MAX_SI50_ENTRIES">
            <summary>Max extries (9x)</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.USE_WILDCARD">
            <summary>Use Wildcard</summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.RESOURCETYPE_DISK">
            <summary>
            RESOURCE TYPE DISK
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.CONNECT_INTERACTIVE">
            <summary>
            CONNECT INTERACTIVE
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.CONNECT_PROMPT">
            <summary>
            CONNECT PROMPT
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.CONNECT_UPDATE_PROFILE">
            <summary>
            CONNECT UPDATE PROFILE
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.CONNECT_REDIRECT">
            <summary>
            CONNECT REDIRECT - ie4+
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.CONNECT_COMMANDLINE">
            <summary>
            CONNECT COMMANDLINE- nt5+
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.CONNECT_CMD_SAVECRED">
            <summary>
            CONNECT CMD SAVECRED - nt5+
            </summary>
        </member>
        <member name="T:NLib.Networks.NetworkAPI.SERVER_INFO_100">
            <summary>
            Create a SERVER_INFO_100 STRUCTURE
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SERVER_INFO_100.sv100_platform_id">
            <summary>
            Platform ID
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SERVER_INFO_100.sv100_name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:NLib.Networks.NetworkAPI.UNIVERSAL_NAME_INFO">
            <summary>
            UNIVERSAL_NAME_INFO
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.UNIVERSAL_NAME_INFO.lpUniversalName">
            <summary>
            The universal name field.
            </summary>
        </member>
        <member name="T:NLib.Networks.NetworkAPI.SHARE_INFO_2">
            <summary>
            SHARE_INFO_2. Used for Share information, NT, level 2
            </summary>
            <remarks>
            Requires admin rights to work. 
            </remarks>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.NetName">
            <summary>
            Net Name field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.ShareType">
            <summary>
            Share Type field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.Remark">
            <summary>
            Remark field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.Permissions">
            <summary>
            Permission value field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.MaxUsers">
            <summary>
            Max users field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.CurrentUsers">
            <summary>
            Current user field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.Path">
            <summary>
            Path field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_2.Password">
            <summary>
            Password field.
            </summary>
        </member>
        <member name="T:NLib.Networks.NetworkAPI.SHARE_INFO_1">
            <summary>
            SHARE_INFO_1. Used for Share information, NT, level 1.
            </summary>
            <remarks>
            Fallback when no admin rights.
            </remarks>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_1.NetName">
            <summary>
            Net Name field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_1.ShareType">
            <summary>
            Share Type.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_1.Remark">
            <summary>
            Remark field.
            </summary>
        </member>
        <member name="T:NLib.Networks.NetworkAPI.SHARE_INFO_50">
            <summary>
            SHARE_INFO_50. Used for Share information, Win9x
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_50.NetName">
            <summary>
            Net Name field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_50.bShareType">
            <summary>
            Share Type field. (ushort value).
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_50.Flags">
            <summary>
            Flags fields
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_50.Remark">
            <summary>
            Remark field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_50.Path">
            <summary>
            Path field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_50.PasswordRW">
            <summary>
            Password Read/Write field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_50.PasswordRO">
            <summary>
            Password Read only field.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkAPI.SHARE_INFO_50.ShareType">
            <summary>
            Get Share Type.
            </summary>
        </member>
        <member name="T:NLib.Networks.NetworkAPI.SHARE_INFO_1_9x">
            <summary>
            SHARE_INFO_1_9x. Used for Share information level 1, Win9x
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_1_9x.NetName">
            <summary>
            Net Name field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_1_9x.Padding">
            <summary>
            Padding field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_1_9x.bShareType">
            <summary>
            Share Type field. (ushort value).
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.SHARE_INFO_1_9x.Remark">
            <summary>
            Remark field.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkAPI.SHARE_INFO_1_9x.ShareType">
            <summary>
            Get Share Type.
            </summary>
        </member>
        <member name="T:NLib.Networks.NetworkAPI.NET_RESOURCE">
            <summary>
            NET_RESOURCE structure.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.Scope">
            <summary>
            Scope field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.Type">
            <summary>
            Type  field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.DisplayType">
            <summary>
            Display Type field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.Usage">
            <summary>
            Usage field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.LocalDrive">
            <summary>
            Local Drive field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.RemoteName">
            <summary>
            Remote Name field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.Comment">
            <summary>
            Comment field.
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkAPI.NET_RESOURCE.Provider">
            <summary>
            Provider field.
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.NetServerEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32,System.String,System.Int32@)">
            <summary>
            Netapi32.dll : The NetServerEnum function lists all servers
            of the specified type that are visible in a domain. For example, an
            application can call NetServerEnum to list all domain controllers only
            or all SQL servers only.
            You can combine bit masks to list several types. For example, a value
            of 0x00000003 combines the bit masks for SV_TYPE_WORKSTATION
            (0x00000001) and SV_TYPE_SERVER (0x00000002)
            </summary>
            <param name="ServerNane">See MSDN.</param>
            <param name="dwLevel">See MSDN.</param>
            <param name="pBuf">See MSDN.</param>
            <param name="dwPrefMaxLen">See MSDN.</param>
            <param name="dwEntriesRead">See MSDN.</param>
            <param name="dwTotalEntries">See MSDN.</param>
            <param name="dwServerType">See MSDN.</param>
            <param name="domain">See MSDN.</param>
            <param name="dwResumeHandle">See MSDN.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.NetApiBufferFree(System.IntPtr)">
            <summary>
            Netapi32.dll : The NetApiBufferFree function frees
            the memory that the NetApiBufferAllocate function allocates.
            Call NetApiBufferFree to free the memory that other network
            management functions return.
            </summary>
            <param name="pBuf">The pointer for buffer.</param>
            <returns>See return code from MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.NetShareEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Enumerate shares (NT).
            </summary>
            <param name="lpServerName">See MSDN.</param>
            <param name="dwLevel">See MSDN.</param>
            <param name="lpBuffer">See MSDN.</param>
            <param name="dwPrefMaxLen">See MSDN.</param>
            <param name="entriesRead">See MSDN.</param>
            <param name="totalEntries">See MSDN.</param>
            <param name="hResume">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.NetShareEnum(System.String,System.Int32,System.IntPtr,System.UInt16,System.UInt16@,System.UInt16@)">
            <summary>
            Enumerate shares (9x).
            </summary>
            <param name="lpServerName">See MSDN.</param>
            <param name="dwLevel">See MSDN.</param>
            <param name="lpBuffer">See MSDN.</param>
            <param name="cbBuffer">See MSDN.</param>
            <param name="entriesRead">See MSDN.</param>
            <param name="totalEntries">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetGetUniversalName(System.String,System.Int32,NLib.Networks.NetworkAPI.UNIVERSAL_NAME_INFO@,System.Int32@)">
            <summary>
            Get a UNC name.
            </summary>
            <param name="lpLocalPath">See MSDN.</param>
            <param name="dwInfoLevel">See MSDN.</param>
            <param name="lpBuffer">See MSDN.</param>
            <param name="lpBufferSize">See MSDN.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetGetUniversalName(System.String,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Get a UNC name.
            </summary>
            <param name="lpLocalPath">See MSDN.</param>
            <param name="dwInfoLevel">See MSDN.</param>
            <param name="lpBuffer">See MSDN.</param>
            <param name="lpBufferSize">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetAddConnection(NLib.Networks.NetworkAPI.NET_RESOURCE@,System.String,System.String,System.Int32)">
            <summary>
            WNetAddConnection
            </summary>
            <param name="netResStruct">See MSDN.</param>
            <param name="password">See MSDN.</param>
            <param name="username">See MSDN.</param>
            <param name="flags">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetCancelConnection(System.String,System.Int32,System.Int32)">
            <summary>
            WNetCancelConnection
            </summary>
            <param name="name">See MSDN.</param>
            <param name="flags">See MSDN.</param>
            <param name="force">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetRestoreConnection(System.Int32,System.String)">
            <summary>
            WNetRestoreConnection
            </summary>
            <param name="hWnd">See MSDN.</param>
            <param name="localDrive">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetConnectionDialog(System.Int32,System.Int32)">
            <summary>
            WNetConnectionDialog
            </summary>
            <param name="hWnd">See MSDN.</param>
            <param name="type">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetDisconnectDialog(System.Int32,System.Int32)">
            <summary>
            WNetDisconnectDialog
            </summary>
            <param name="hWnd">See MSDN.</param>
            <param name="type">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.WNetGetConnection(System.String,System.Byte[],System.Int32@)">
            <summary>
            WNetGetConnection
            </summary>
            <param name="localDrive">See MSDN.</param>
            <param name="remoteName">See MSDN.</param>
            <param name="bufferLength">See MSDN.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.PathIsNetworkPath(System.String)">
            <summary>
            PathIsNetworkPath
            </summary>
            <param name="localDrive">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkAPI.GetDriveType(System.String)">
            <summary>
            GetDriveType
            </summary>
            <param name="localDrive">See MSDN.</param>
            <returns>See MSDN.</returns>
        </member>
        <member name="T:NLib.Networks.ShareType">
            <summary>
            Type of share
            </summary>
        </member>
        <member name="F:NLib.Networks.ShareType.Disk">
            <summary>Disk share</summary>
        </member>
        <member name="F:NLib.Networks.ShareType.Printer">
            <summary>Printer share</summary>
        </member>
        <member name="F:NLib.Networks.ShareType.Device">
            <summary>Device share</summary>
        </member>
        <member name="F:NLib.Networks.ShareType.IPC">
            <summary>IPC share</summary>
        </member>
        <member name="F:NLib.Networks.ShareType.Special">
            <summary>Special share</summary>
        </member>
        <member name="T:NLib.Networks.NetworkShare">
            <summary>
            Information about a local share
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkShare.#ctor(System.String,System.String,System.String,NLib.Networks.ShareType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="server">The name of the computer that this share belongs to.</param>
            <param name="netName">The share's name that used for display on network.</param>
            <param name="path">The local path.</param>
            <param name="shareType">Resource share type.</param>
            <param name="remark">The Remark string.</param>
        </member>
        <member name="M:NLib.Networks.NetworkShare.ToString">
            <summary>
            ToString
            </summary>
            <returns>Return string that represent path to this share.</returns>
        </member>
        <member name="M:NLib.Networks.NetworkShare.MatchesPath(System.String)">
            <summary>
            Returns true if this share matches the local path
            </summary>
            <param name="path">The path to check.</param>
            <returns>Return true if the specificed path is match with this share.</returns>
        </member>
        <member name="P:NLib.Networks.NetworkShare.Server">
            <summary>
            The name of the computer that this share belongs to
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.NetName">
            <summary>
            Get Share name
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.Path">
            <summary>
            Get Local path
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.ShareType">
            <summary>
            Get Share type
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.Remark">
            <summary>
            Get Remark or Comment.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.IsFileSystem">
            <summary>
            Returns true if this is a file system share
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.Root">
            <summary>
            Get the root of a disk-based share
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.IsNT">
            <summary>
            Is this an NT platform?
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShare.IsW2KUp">
            <summary>
            Returns true if this is Windows 2000 or higher
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkShare.EnumerateSharesNT(System.String,NLib.Networks.NetworkShareCollection)">
            <summary>
            Enumerates the shares on Windows NT
            </summary>
            <param name="server">The server name</param>
            <param name="shares">The NetworkShareCollection</param>
        </member>
        <member name="M:NLib.Networks.NetworkShare.EnumerateShares9x(System.String,NLib.Networks.NetworkShareCollection)">
            <summary>
            Enumerates the shares on Windows 9x
            </summary>
            <param name="server">The server name</param>
            <param name="shares">The NetworkShareCollection</param>
        </member>
        <member name="M:NLib.Networks.NetworkShare.EnumerateShares(System.String,NLib.Networks.NetworkShareCollection)">
            <summary>
            Enumerates the shares
            </summary>
            <param name="server">The server name</param>
            <param name="shares">The ShareCollection</param>
        </member>
        <member name="P:NLib.Networks.NetworkShare.LocalShares">
            <summary>
            Return the local shares
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkShare.IsValidFilePath(System.String)">
            <summary>
            Returns true if fileName is a valid local file-name of the form:
            X:\, where X is a drive letter from A-Z
            </summary>
            <param name="fileName">The filename to check</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Networks.NetworkShare.PathToUnc(System.String)">
            <summary>
            Returns the UNC path for a mapped drive or local share.
            </summary>
            <param name="fileName">The path to map</param>
            <returns>The UNC path (if available)</returns>
        </member>
        <member name="M:NLib.Networks.NetworkShare.PathToShare(System.String)">
            <summary>
            Returns the local <see cref="T:NLib.Networks.NetworkShare"/> object with the best match
            to the specified path.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Networks.NetworkShare.GetShares(System.String)">
            <summary>
            Return the shares for a specified machine
            </summary>
            <param name="server">The server to get share.</param>
            <returns>Return collection of share of specificed server.</returns>
        </member>
        <member name="T:NLib.Networks.NetworkShareCollection">
            <summary>
            A collection of network shares
            </summary>
        </member>
        <member name="F:NLib.Networks.NetworkShareCollection._server">
            <summary>The name of the server this collection represents</summary>
        </member>
        <member name="M:NLib.Networks.NetworkShareCollection.#ctor">
            <summary>
            Default constructor - local machine
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkShareCollection.#ctor(System.String)">
            <summary>
            Constructor - remote or server machine
            </summary>
            <param name="server">The server name.</param>
        </member>
        <member name="M:NLib.Networks.NetworkShareCollection.Add(NLib.Networks.NetworkShare)">
            <summary>
            Add
            </summary>
            <param name="share">The network share instance.</param>
        </member>
        <member name="M:NLib.Networks.NetworkShareCollection.Add(System.String,System.String,NLib.Networks.ShareType,System.String)">
            <summary>
            Add
            </summary>
            <param name="netName">The Net Name.</param>
            <param name="path">The Path.</param>
            <param name="shareType">The share value.</param>
            <param name="remark">The remark value.</param>
        </member>
        <member name="P:NLib.Networks.NetworkShareCollection.Server">
            <summary>
            Returns the name of the server this collection represents
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShareCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:NLib.Networks.NetworkShare"/> at the specified index.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkShareCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:NLib.Networks.NetworkShare"/> which matches a given local path
            </summary>
            <param name="path">The path to match</param>
        </member>
        <member name="M:NLib.Networks.NetworkShareCollection.CopyTo(NLib.Networks.NetworkShare[],System.Int32)">
            <summary>
            Copy this collection to an array
            </summary>
            <param name="array">The sorce share array.</param>
            <param name="index">The array index to begin copy.</param>
        </member>
        <member name="T:NLib.Networks.NetworkDrive">
            <summary>
            Network Drive Mapping class. Used for Map, ummap and provide general functions 
            for network drives.
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.InternalMapDrive(System.String,System.String)">
            <summary>
            Map network drive
            </summary>
            <param name="username">User Name</param>
            <param name="password">Password</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.InternalUnMapDrive">
            <summary>
            Unmap network drive	
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.InternalRestoreDrive(System.String)">
            <summary>
            check / restore a network drive
            </summary>
            <param name="driveName">Drive's Name.</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.InternalDisplayDialog(System.IntPtr,System.Int32)">
            <summary>
            Display windows dialog
            </summary>
            <param name="wndHandle">The window handle.</param>
            <param name="dialogToShow">Show flag.</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.InternalNextFreeDrive">
            <summary>
            Find Next Free Drive letter.
            </summary>
            <returns>Returns the next viable drive name  (with colon) to use for mapping</returns>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.MapDrive">
            <summary>
            Map network drive
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.MapDrive(System.String,System.String)">
            <summary>
            Map network drive (using supplied Username and Password)
            </summary>
            <param name="username">Username passed for permissions / credintals ('Username' may be passed as null, to map using only a password)</param>
            <param name="password">Password passed for permissions / credintals</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.MapDrive(System.String,System.String,System.Boolean)">
            <summary>
            Set common propertys, then map the network drive
            </summary>
            <param name="localDrive">LocalDrive to use for connection</param>
            <param name="shareName">Share name for the connection (eg. '\\Computer\Share')</param>
            <param name="force">Option to force dis/connection</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.MapDrive(System.String,System.Boolean)">
            <summary>
            Set common propertys, then map the network drive
            </summary>
            <param name="localDrive">Password passed for permissions / credintals</param>
            <param name="force">Option to force dis/connection</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.UnMapDrive">
            <summary>
            Unmap network drive
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.UnMapDrive(System.String)">
            <summary>
            Unmap network drive
            </summary>
            <param name="localDrive">The local drive to unmap.</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.UnMapDrive(System.String,System.Boolean)">
            <summary>
            Unmap network drive
            </summary>
            <param name="localDrive">The local drive to unmap.</param>
            <param name="force">Option to force dis/connection</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.RestoreDrives">
            <summary>
            Check / restore persistent network drive
            </summary>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.RestoreDrive(System.String)">
            <summary>
            Check / restore persistent network drive
            </summary>
            <param name="localDrive">The local drive's name.</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.ShowConnectDialog">
            <summary>
            Display windows dialog for mapping a network drive (using Desktop as parent form)
            </summary>		
        </member>
        <member name="M:NLib.Networks.NetworkDrive.ShowConnectDialog(System.IntPtr)">
            <summary>
            Display windows dialog for mapping a network drive
            </summary>
            <param name="parentFormHandle">Form used as a parent for the dialog</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.ShowDisconnectDialog">
            <summary>
            Display windows dialog for disconnecting a network drive (using Desktop as parent form)
            </summary>		
        </member>
        <member name="M:NLib.Networks.NetworkDrive.ShowDisconnectDialog(System.IntPtr)">
            <summary>
            Display windows dialog for disconnecting a network drive
            </summary>
            <param name="parentFormHandle">Form used as a parent for the dialog</param>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.GetMappedShareName(System.String)">
            <summary>
            Get Mapped Share's Name. Returns the share name of a connected network drive
            </summary>
            <param name="localDrive">Drive name (eg. 'X:')</param>
            <returns>Share name (eg. \\computer\share)</returns>
        </member>
        <member name="M:NLib.Networks.NetworkDrive.IsNetworkDrive(System.String)">
            <summary>
            Check Is Network Drive. Returns true if passed drive is a network drive
            </summary>
            <param name="localDrive">Drive name (eg. 'X:')</param>
            <returns>Return 'True' if the passed drive is a mapped network drive</returns>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.ShareName">
            <summary>
            Get/Set Share address to map drive to. (eg. '\\Computer\C$').
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.SaveCredentials">
            <summary>
            Get/Set Option to save credentials on reconnection.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.Persistent">
            <summary>
            Get/Set Option to reconnect drive after log off / reboot.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.Force">
            <summary>
            Get/Set Option to force connection if drive is already mapped 
            or force disconnection if network path is not responding.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.PromptForCredentials">
            <summary>
            Get/Set Option to prompt for user credintals when mapping a drive.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.FindNextFreeDrive">
            <summary>
            Get/Set Option to auto select the 'LocalDrive' property to next free driver letter when mapping a network drive.
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.LocalDrive">
            <summary>
            Get/Set Drive to be used in mapping / unmapping (eg. 's:').
            </summary>
        </member>
        <member name="P:NLib.Networks.NetworkDrive.MappedDrives">
            <summary>
            Get a string array of currently mapped network drives.
            </summary>
        </member>
        <member name="T:NLib.Networks.PingResponseEventHandler">
            <summary>
            Ping Response Event Handler.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The Ping Response Event Args instance.</param>
        </member>
        <member name="T:NLib.Networks.PingResponseEventArgs">
            <summary>
            Ping Response Event Args.
            </summary>
        </member>
        <member name="M:NLib.Networks.PingResponseEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Networks.PingResponseEventArgs.#ctor(System.String,System.Net.NetworkInformation.PingReply)">
            <summary>
            Constructor
            </summary>
            <param name="hostName">The host name.</param>
            <param name="reply">The reply result.</param>
        </member>
        <member name="M:NLib.Networks.PingResponseEventArgs.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Networks.PingResponseEventArgs.HostName">
            <summary>
            Get Host or IP.
            </summary>
        </member>
        <member name="P:NLib.Networks.PingResponseEventArgs.Reply">
            <summary>
            Get Reply result. Note. this property can be null if timeout is detected.
            </summary>
        </member>
        <member name="T:NLib.Networks.PingService">
            <summary>
            Ping Service class. This class is service that handle multithread ping for multiple hosts
            at same time.
            </summary>
        </member>
        <member name="T:NLib.Networks.PingService.Pingger">
            <summary>
            Pingger
            </summary>
        </member>
        <member name="M:NLib.Networks.PingService.Pingger.Ping(System.String)">
            <summary>
            Ping
            </summary>
            <param name="hostName">Host to ping.</param>
        </member>
        <member name="M:NLib.Networks.PingService.Pingger.Ping(System.String,System.Int32)">
            <summary>
            Ping
            </summary>
            <param name="hostName">Host to ping.</param>
            <param name="timeout">Timeout in millisecond.</param>
        </member>
        <member name="P:NLib.Networks.PingService.Pingger.Finished">
            <summary>
            Check Is Operation Finished.
            </summary>
        </member>
        <member name="P:NLib.Networks.PingService.Pingger.Canceled">
            <summary>
            Check Is Operation Cancel.
            </summary>
        </member>
        <member name="P:NLib.Networks.PingService.Pingger.HasError">
            <summary>
            Check Is Operation Has Error.
            </summary>
        </member>
        <member name="P:NLib.Networks.PingService.Pingger.HostName">
            <summary>
            Get Host or IP.
            </summary>
        </member>
        <member name="P:NLib.Networks.PingService.Pingger.Reply">
            <summary>
            Get Reply result.
            </summary>
        </member>
        <member name="P:NLib.Networks.PingService.Pingger.IsHandled">
            <summary>
            Get/Set Is handle. Note. when ping is created this property is set to false.
            when marked this property to true it cannot set to false again. (write once).
            </summary>
        </member>
        <member name="M:NLib.Networks.PingService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Networks.PingService.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Networks.PingService.RaiseEvent(System.Delegate,System.Object[])">
            <summary>
            Raise event.
            </summary>
            <param name="del">The delegate.</param>
            <param name="args">Tee delegate args.</param>
        </member>
        <member name="M:NLib.Networks.PingService.Start">
            <summary>
            Start service.
            </summary>
        </member>
        <member name="M:NLib.Networks.PingService.Start(System.Boolean)">
            <summary>
            Start service.
            </summary>
            <param name="autoRestart">Auto restart if already started.</param>
        </member>
        <member name="M:NLib.Networks.PingService.Stop">
            <summary>
            Stop service.
            </summary>
        </member>
        <member name="M:NLib.Networks.PingService.Add(System.String)">
            <summary>
            Add Host. Note. that host name will convert internally to lowercase. So
            when event is raise the hostname information is the lowercase too.
            </summary>
            <param name="hostName">The host name to add in ping list.</param>
        </member>
        <member name="M:NLib.Networks.PingService.AddRange(System.String[])">
            <summary>
            Add Host name's array. Note. that host name will convert internally to lowercase. So
            when event is raise the hostname information is the lowercase too.
            </summary>
            <param name="hostNames">The Host Name arrays</param>
        </member>
        <member name="M:NLib.Networks.PingService.Remove(System.String)">
            <summary>
            Remove Host
            </summary>
            <param name="hostName">The host name to remove.</param>
        </member>
        <member name="M:NLib.Networks.PingService.Clear">
            <summary>
            Clear all hosts
            </summary>
        </member>
        <member name="M:NLib.Networks.PingService.GetHosts">
            <summary>
            Get Host List
            </summary>
            <returns>Return array of host name in ping list.</returns>
        </member>
        <member name="P:NLib.Networks.PingService.Interval">
            <summary>
            Get/Set Ping Interval in millisecond. min value 500 ms. default 30000 ms.
            </summary>
        </member>
        <member name="E:NLib.Networks.PingService.OnReply">
            <summary>
            OnReply Event. occur when ping is replied or timeout after ping is called.
            </summary>
        </member>
        <member name="E:NLib.Networks.PingService.HostListChanged">
            <summary>
            HostListChanged Event. Occur when host list is add/remove or clear.
            </summary>
        </member>
        <member name="E:NLib.Networks.PingService.PingProcessStart">
            <summary>
            PingProcessStart Event. Occur when ping interval is reach and process is start.
            </summary>
        </member>
        <member name="E:NLib.Networks.PingService.PingProcessFinished">
            <summary>
            PingProcessFinished Event. Occur when ping process is finished.
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.BrowsableLabelStyleAttribute">
            <summary>
            Browsable Label Style Attribute
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.BrowsableLabelStyleAttribute.#ctor(NLib.Controls.LabelStyle)">
            <summary>
            Constructor
            </summary>
            <param name="LabelStyle">Label's Style</param>
        </member>
        <member name="P:NLib.Controls.Design.BrowsableLabelStyleAttribute.LabelStyle">
            <summary>
            Get/Set Label's Style
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.DelegateAttribute">
            <summary>
            Delegate Attribute
            </summary>
        </member>
        <member name="F:NLib.Controls.Design.DelegateAttribute.m_MethodDelegate">
            <summary>
            On Click delegate
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.DelegateAttribute.#ctor(NLib.Controls.UICustomEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="MethodDelegate">On Click delegate</param>
        </member>
        <member name="P:NLib.Controls.Design.DelegateAttribute.GetMethod">
            <summary>
            Get On Click Delegate
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.FileDialogFilterAttribute">
            <summary>
            FileDialogFilter Attribute
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.FileDialogFilterAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filter">File filter</param>
        </member>
        <member name="P:NLib.Controls.Design.FileDialogFilterAttribute.Filter">
            <summary>
            Get File Filter
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.SaveFileAttribute">
            <summary>
            SaveFile Attribute
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.UIListboxDatasourceAttribute">
            <summary>
            UI Listbox Datasource Attribute
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.UIListboxDatasourceAttribute.#ctor(System.Object@)">
            <summary>
            Constructor
            </summary>
            <param name="Datasource">The datasource</param>
        </member>
        <member name="P:NLib.Controls.Design.UIListboxDatasourceAttribute.Value">
            <summary>
            Get DataSource
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.UIListboxValueMemberAttribute">
            <summary>
            UI Listbox Value Member Attribute
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.UIListboxValueMemberAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ValueMember">The Value Member</param>
        </member>
        <member name="P:NLib.Controls.Design.UIListboxValueMemberAttribute.Value">
            <summary>
            Get/Set Value Member
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.UIListboxDisplayMemberAttribute">
            <summary>
            UI Listbox Display Member Attribute
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.UIListboxDisplayMemberAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="DisplayMember">The Display Member</param>
        </member>
        <member name="P:NLib.Controls.Design.UIListboxDisplayMemberAttribute.Value">
            <summary>
            Get/Set Display Member
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.UIListboxIsDropDownResizableAttribute">
            <summary>
            UI Listbox Is DropDown Resizable Attribute
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.PropertyExChoicesAttributeListAttribute">
            <summary>
            PropertyEx Choices Attribute List Attribute
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.PropertyExChoicesAttributeListAttribute.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="List"></param>
        </member>
        <member name="M:NLib.Controls.Design.PropertyExChoicesAttributeListAttribute.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="List"></param>
        </member>
        <member name="M:NLib.Controls.Design.PropertyExChoicesAttributeListAttribute.#ctor(System.Windows.Forms.ListBox.ObjectCollection)">
            <summary>
            Constructor
            </summary>
            <param name="List"></param>
        </member>
        <member name="P:NLib.Controls.Design.PropertyExChoicesAttributeListAttribute.Item">
            <summary>
            Get Item
            </summary>
        </member>
        <member name="P:NLib.Controls.Design.PropertyExChoicesAttributeListAttribute.Values">
            <summary>
            Get Values
            </summary>
        </member>
        <member name="T:NLib.Controls.Design.BrowsableTypeConverter">
            <summary>
            Browsable TypeConverter
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.BrowsableTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertTo
            </summary>
            <param name="context">ITypeDescriptorContext context</param>
            <param name="destinationType">destination type to convert</param>
            <returns>true if can convert to destination type</returns>
        </member>
        <member name="M:NLib.Controls.Design.BrowsableTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertTo
            </summary>
            <param name="context">ITypeDescriptorContext context</param>
            <param name="culture">CultureInfo instance</param>
            <param name="value">value to convert</param>
            <param name="destinationType">destination type to convert</param>
            <returns>object instance that converted</returns>
        </member>
        <member name="T:NLib.Controls.Design.PropertyExChoicesTypeConverter">
            <summary>
            PropertyEx Choices TypeConverter
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.PropertyExChoicesTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetStandardValuesSupported
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.Design.PropertyExChoicesTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetStandardValuesExclusive
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.Design.PropertyExChoicesTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetStandardValues
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Controls.Design.UICustomEventEditor">
            <summary>
            UI CustomEvent Editor
            </summary>
        </member>
        <member name="F:NLib.Controls.Design.UICustomEventEditor.m_MethodDelegate">
            <summary>
            Delegate variable for OnClick
            </summary>
        </member>
        <member name="F:NLib.Controls.Design.UICustomEventEditor.m_sender">
            <summary>
            Sender object
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.UICustomEventEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.Design.UICustomEventEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Controls.Design.UIFilenameEditor">
            <summary>
            UI Filename Editor
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.UIFilenameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.Design.UIFilenameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Controls.Design.UIListboxEditor">
            <summary>
            UI Listbox Editor
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.UIListboxEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:NLib.Controls.Design.UIListboxEditor.IsDropDownResizable">
            <summary>
            Get Is DropDownResizable
            </summary>
        </member>
        <member name="M:NLib.Controls.Design.UIListboxEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Controls.UICustomEventHandler">
            <summary>
            UI Custom Event Click Delegate
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Controls.LabelStyle">
            <summary>
            Label Style
            </summary>
        </member>
        <member name="F:NLib.Controls.LabelStyle.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:NLib.Controls.LabelStyle.TypeName">
            <summary>
            TypeName
            </summary>
        </member>
        <member name="F:NLib.Controls.LabelStyle.Ellipsis">
            <summary>
            Ellipsis
            </summary>
        </member>
        <member name="T:NLib.Controls.FileDialogType">
            <summary>
            File Dialog Type
            </summary>
        </member>
        <member name="F:NLib.Controls.FileDialogType.OpenFileDialog">
            <summary>
            Open File Dialog
            </summary>
        </member>
        <member name="F:NLib.Controls.FileDialogType.SaveFileDialog">
            <summary>
            Save File Dialog
            </summary>
        </member>
        <member name="T:NLib.Controls.CustomColorScheme">
            <summary>
            Custom Color Scheme
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonCheckedGradientBegin">
            <summary>
            Get ButtonCheckedGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonCheckedGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonCheckedGradientEnd">
            <summary>
            Get ButtonCheckedGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonCheckedGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonCheckedGradientMiddle">
            <summary>
            Get ButtonCheckedGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonCheckedGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonPressedBorder">
            <summary>
            Get ButtonPressedBorder <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonPressedBorder"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonPressedGradientBegin">
            <summary>
            Get ButtonPressedGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonPressedGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonPressedGradientEnd">
            <summary>
            Get ButtonPressedGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonPressedGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonPressedGradientMiddle">
            <summary>
            Get ButtonPressedGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonPressedGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonSelectedBorder">
            <summary>
            Get ButtonSelectedBorder <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonSelectedBorder"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonSelectedGradientBegin">
            <summary>
            Get ButtonSelectedGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonSelectedGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonSelectedGradientEnd">
            <summary>
            Get ButtonSelectedGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonSelectedGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ButtonSelectedGradientMiddle">
            <summary>
            Get ButtonSelectedGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.ButtonSelectedGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.CheckBackground">
            <summary>
            Get CheckBackground <see cref="P:System.Windows.Forms.ProfessionalColorTable.CheckBackground"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.CheckPressedBackground">
            <summary>
            Get CheckPressedBackground <see cref="P:System.Windows.Forms.ProfessionalColorTable.CheckPressedBackground"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.CheckSelectedBackground">
            <summary>
            Get CheckSelectedBackground <see cref="P:System.Windows.Forms.ProfessionalColorTable.CheckSelectedBackground"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.GripDark">
            <summary>
            Get GripDark <see cref="P:System.Windows.Forms.ProfessionalColorTable.GripDark"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.GripLight">
            <summary>
            Get GripLight <see cref="P:System.Windows.Forms.ProfessionalColorTable.GripLight"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ImageMarginGradientBegin">
            <summary>
            Get ImageMarginGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.ImageMarginGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ImageMarginGradientEnd">
            <summary>
            Get ImageMarginGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.ImageMarginGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ImageMarginGradientMiddle">
            <summary>
            Get ImageMarginGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.ImageMarginGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ImageMarginRevealedGradientBegin">
            <summary>
            Get ImageMarginRevealedGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.ImageMarginRevealedGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ImageMarginRevealedGradientEnd">
            <summary>
            Get ImageMarginRevealedGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.ImageMarginRevealedGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ImageMarginRevealedGradientMiddle">
            <summary>
            Get ImageMarginRevealedGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.ImageMarginRevealedGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuBorder">
            <summary>
            Get MenuBorder <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuBorder"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuItemBorder">
            <summary>
            Get MenuItemBorder <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuItemBorder"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuItemPressedGradientBegin">
            <summary>
            Get MenuItemPressedGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuItemPressedGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuItemPressedGradientEnd">
            <summary>
            Get MenuItemPressedGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuItemPressedGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuItemPressedGradientMiddle">
            <summary>
            Get MenuItemPressedGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuItemPressedGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuItemSelected">
            <summary>
            Get MenuItemSelected <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuItemSelected"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuItemSelectedGradientBegin">
            <summary>
            Get MenuItemSelectedGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuItemSelectedGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuItemSelectedGradientEnd">
            <summary>
            Get MenuItemSelectedGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuItemSelectedGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuStripGradientBegin">
            <summary>
            Get MenuStripGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuStripGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.MenuStripGradientEnd">
            <summary>
            Get MenuStripGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.MenuStripGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.OverflowButtonGradientBegin">
            <summary>
            Get OverflowButtonGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.OverflowButtonGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.OverflowButtonGradientEnd">
            <summary>
            Get OverflowButtonGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.OverflowButtonGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.OverflowButtonGradientMiddle">
            <summary>
            Get OverflowButtonGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.OverflowButtonGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.RaftingContainerGradientBegin">
            <summary>
            Get RaftingContainerGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.RaftingContainerGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.RaftingContainerGradientEnd">
            <summary>
            Get RaftingContainerGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.RaftingContainerGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.SeparatorDark">
            <summary>
            Get SeparatorDark <see cref="P:System.Windows.Forms.ProfessionalColorTable.SeparatorDark"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.SeparatorLight">
            <summary>
            Get SeparatorLight <see cref="P:System.Windows.Forms.ProfessionalColorTable.SeparatorLight"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ToolStripBorder">
            <summary>
            Get ToolStripBorder <see cref="P:System.Windows.Forms.ProfessionalColorTable.ToolStripBorder"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ToolStripDropDownBackground">
            <summary>
            Get ToolStripDropDownBackground <see cref="P:System.Windows.Forms.ProfessionalColorTable.ToolStripDropDownBackground"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ToolStripGradientBegin">
            <summary>
            Get ToolStripGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.ToolStripGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ToolStripGradientEnd">
            <summary>
            Get ToolStripGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.ToolStripGradientEnd"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ToolStripGradientMiddle">
            <summary>
            Get ToolStripGradientMiddle <see cref="P:System.Windows.Forms.ProfessionalColorTable.ToolStripGradientMiddle"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ToolStripPanelGradientBegin">
            <summary>
            Get ToolStripPanelGradientBegin <see cref="P:System.Windows.Forms.ProfessionalColorTable.ToolStripPanelGradientBegin"/>
            </summary>
        </member>
        <member name="P:NLib.Controls.CustomColorScheme.ToolStripPanelGradientEnd">
            <summary>
            Get ToolStripPanelGradientEnd <see cref="P:System.Windows.Forms.ProfessionalColorTable.ToolStripPanelGradientEnd"/>
            </summary>
        </member>
        <member name="T:NLib.Controls.PropertyExChoices">
            <summary>
            PropertyEx Choices
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
            <param name="IsSorted"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.String[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
            <param name="IsSorted"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
            <param name="IsSorted"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Int32[])">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Double[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
            <param name="IsSorted"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Double[])">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Object[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
            <param name="IsSorted"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExChoices.#ctor(System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="P:NLib.Controls.PropertyExChoices.Items">
            <summary>
            Get Item List
            </summary>
        </member>
        <member name="T:NLib.Controls.PropertyExCollectionSet">
            <summary>
            PropertyEx Collection Set
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyExCollectionSet.Add(NLib.Controls.PropertyExCollection)">
            <summary>
            Add
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollectionSet.Add">
            <summary>
            Add
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLib.Controls.PropertyExCollectionSet.Item(System.Int32)">
            <summary>
            Indexer Access
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollectionSet.ToArray">
            <summary>
            ToArray
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLib.Controls.PropertyExCollection">
            <summary>
            PropertyEx Collection
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.Add(NLib.Controls.PropertyEx)">
            <summary>
            Add
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.Add(System.String,System.Object,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Add
            </summary>
            <param name="strName"></param>
            <param name="objValue"></param>
            <param name="boolIsReadOnly"></param>
            <param name="strCategory"></param>
            <param name="strDescription"></param>
            <param name="boolVisible"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.Add(System.String,System.Object@,System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Add
            </summary>
            <param name="strName"></param>
            <param name="objRef"></param>
            <param name="strProp"></param>
            <param name="boolIsReadOnly"></param>
            <param name="strCategory"></param>
            <param name="strDescription"></param>
            <param name="boolVisible"></param>
            <returns></returns>
        </member>
        <member name="P:NLib.Controls.PropertyExCollection.Item(System.Int32)">
            <summary>
            Get/Set PropertyEx via indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.Remove(System.String)">
            <summary>
            Remove
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetAttributes">
            <summary>
            GetAttributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetClassName">
            <summary>
            GetClassName
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetComponentName">
            <summary>
            GetComponentName
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetConverter">
            <summary>
            GetConverter
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetDefaultEvent">
            <summary>
            GetDefaultEvent
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetDefaultProperty">
            <summary>
            GetDefaultProperty
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetEditor(System.Type)">
            <summary>
            GetEditor
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetEvents">
            <summary>
            GetEvents
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetEvents(System.Attribute[])">
            <summary>
            GetEvents
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetProperties">
            <summary>
            GetProperties
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetProperties(System.Attribute[])">
            <summary>
            GetProperties
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            GetPropertyOwner
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.SaveXml(System.String)">
            <summary>
            SaveXml
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.LoadXml(System.String)">
            <summary>
            LoadXml
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.SaveBinary(System.String)">
            <summary>
            SaveBinary
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExCollection.LoadBinary(System.String)">
            <summary>
            LoadBinary
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Controls.PropertyExDescriptor">
            <summary>
            PropertyEx Descriptor
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyExDescriptor.#ctor(NLib.Controls.PropertyEx,System.Attribute[])">
            <summary>
            Constructor
            </summary>
            <param name="myProperty"></param>
            <param name="attrs"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExDescriptor.CanResetValue(System.Object)">
            <summary>
            CanResetValue
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.ComponentType">
            <summary>
            Get Component Type
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyExDescriptor.GetValue(System.Object)">
            <summary>
            GetValue
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.IsReadOnly">
            <summary>
            Get Is ReadOnly
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.PropertyType">
            <summary>
            Get Property Type
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyExDescriptor.ResetValue(System.Object)">
            <summary>
            ResetValue
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:NLib.Controls.PropertyExDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            ShouldSerializeValue
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.Description">
            <summary>
            Get Description
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.Category">
            <summary>
            Get Category
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.DisplayName">
            <summary>
            Get DisplayName
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.IsBrowsable">
            <summary>
            Get IsBrowsable
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyExDescriptor.Property">
            <summary>
            Get Property
            </summary>
        </member>
        <member name="T:NLib.Controls.PropertyEx">
            <summary>
            PropertyEx
            </summary>
        </member>
        <member name="F:NLib.Controls.PropertyEx.MethodDelegate">
            <summary>
            3-dots button event handler
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyEx.#ctor(System.String,System.Object,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="strName"></param>
            <param name="objValue"></param>
            <param name="boolIsReadOnly"></param>
            <param name="strCategory"></param>
            <param name="strDescription"></param>
            <param name="boolVisible"></param>
        </member>
        <member name="M:NLib.Controls.PropertyEx.#ctor(System.String,System.Object@,System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="strName"></param>
            <param name="objRef"></param>
            <param name="strProp"></param>
            <param name="boolIsReadOnly"></param>
            <param name="strCategory"></param>
            <param name="strDescription"></param>
            <param name="boolVisible"></param>
        </member>
        <member name="P:NLib.Controls.PropertyEx.DataColumn">
            <summary>
            Get/Set DataColumn
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyEx.RebuildAttributes">
            <summary>
            RebuildAttributes
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Name">
            <summary>
            Get/Set Display Name of the PropertyEx.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.IsReadOnly">
            <summary>
            Get/Set read only attribute of the PropertyEx.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Visible">
            <summary>
            Get/Set visibility attribute of the PropertyEx.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Value">
            <summary>
            Get/Set Value that Represent the Value of the PropertyEx.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Description">
            <summary>
            Get/Set description associated with the PropertyEx.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Category">
            <summary>
            Get/Set category associated with the PropertyEx.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Type">
            <summary>
            Get/Set Target Type
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Attributes">
            <summary>
            Get/Set Property Attributes
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.IsBrowsable">
            <summary>
            Indicates if the property is browsable or not.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Parenthesize">
            <summary>
            Indicates whether the name of the associated property is displayed with parentheses in the 
            Properties window.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.BrowsableLabelStyle">
            <summary>
            Indicates the style of the label when a property is browsable.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.IsPassword">
            <summary>
            Indicates if the property is masked or not.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.IsPercentage">
            <summary>
            Indicates if the property represents a value in percentage.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.UseFileNameEditor">
            <summary>
            Indicates if the property uses a FileNameEditor converter.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.FileNameFilter">
            <summary>
            Apply a filter to FileNameEditor converter.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.FileNameDialogType">
            <summary>
            DialogType of the FileNameEditor.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Choices">
            <summary>
            Get/Set PropertyEx Choices list.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Datasource">
            <summary>
            Get/Set DataSource
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.ValueMember">
            <summary>
            Get/Set Value Member
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.DisplayMember">
            <summary>
            Get/Set Display Member
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.SelectedValue">
            <summary>
            Get/Set SelectedValue
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.SelectedItem">
            <summary>
            Get/Set SelectedItem
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.IsDropdownResizable">
            <summary>
            Get/Set Is Dropdown Resizable
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.CustomEditor">
            <summary>
            Get/Set Custom Editor
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.CustomTypeConverter">
            <summary>
            Get/Set Custom TypeConverter
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.Tag">
            <summary>
            Get/Set Tag
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.DefaultValue">
            <summary>
            Get/Set Default Value
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.DefaultType">
            <summary>
            Get/Set Default Type
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyEx.OnClick">
            <summary>
            Get/Set OnClick Event
            </summary>
        </member>
        <member name="T:NLib.Controls.PropertyGridEx">
            <summary>
            PropertyGridEx Control
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.OnResize(System.EventArgs)">
            <summary>
            OnResize
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.MoveSplitterTo(System.Int32)">
            <summary>
            MoveSplitterTo
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.SetComment(System.String,System.String)">
            <summary>
            SetComment
            </summary>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.AutoSizeSplitter(System.Int32)">
            <summary>
            AutoSizeSplitter
            </summary>
            <param name="RightMargin"></param>
        </member>
        <member name="M:NLib.Controls.PropertyGridEx.ApplyToolStripRenderMode(System.Boolean)">
            <summary>
            ApplyToolStripRenderMode
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.Items">
            <summary>
            Get/Set the collection of the PropertyEx. Set ShowCustomProperties to True to enable it.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.PropertiesSet">
            <summary>
            Set the PropertyEx Collection Set. Set ShowPropertiesSet to True to enable it.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.AutoSizeProperties">
            <summary>
            Get/Set is PropertyGrid Move automatically the splitter to better fit all the properties shown.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.ShowCustomProperties">
            <summary>
            Use the custom properties collection as SelectedObject.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.ShowPropertiesSet">
            <summary>
            Use the custom properties collections as SelectedObjects.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.DrawFlatToolbar">
            <summary>
            Get/Set Draw a flat toolbar
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.ToolStrip">
            <summary>
            Access Toolbar object
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.DocComment">
            <summary>
            Represent the comments area of the PropertyGrid.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.DocCommentTitle">
            <summary>
            Access Help Title Label Control.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.DocCommentDescription">
            <summary>
            Access Help Description Label Control.
            </summary>
        </member>
        <member name="P:NLib.Controls.PropertyGridEx.DocCommentImage">
            <summary>
            Get/Set Help Image Background.
            </summary>
        </member>
        <member name="T:NLib.Controls.Utils.GUI">
            <summary>
            GUI class. 
            This class provide reflection method to override ControlStyle
            for control that has flicker problem like listview for better 
            paint quality or less flicker and also add supports to enable
            visual style like theme on controls.
            </summary>
        </member>
        <member name="M:NLib.Controls.Utils.GUI.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Controls.Utils.GUI.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Send Message
            </summary>
            <param name="handle"></param>
            <param name="messg"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.Utils.GUI.LoadLibrary(System.String)">
            <summary>
            Load Library
            </summary>
            <param name="lpFileName"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.Utils.GUI.SetWindowTheme(System.IntPtr,System.String,System.String)">
            <summary>
            Set Window Theme
            </summary>
            <param name="hWnd"></param>
            <param name="textSubAppName"></param>
            <param name="textSubIdList"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Controls.Utils.GUI.Boost(System.Windows.Forms.Control)">
            <summary>
            Boost method. Enhance visual style performance for 
            control like flicker free, enable theme, etc.
            </summary>
            <param name="ctrl">The control instance.</param>
        </member>
        <member name="T:NLib.Services.StatusMessageEventArgs">
            <summary>
            Status Message Event Args
            </summary>
        </member>
        <member name="M:NLib.Services.StatusMessageEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Services.StatusMessageEventArgs.Message">
            <summary>
            Gets or sets the status messsage.
            </summary>
        </member>
        <member name="T:NLib.Services.StatusMessageEventHandler">
            <summary>
            Status Message Event Handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The EventArgs.</param>
        </member>
        <member name="T:NLib.Services.PageContentManager">
            <summary>
            Application GUI (Page) Content Manager class.
            </summary>
        </member>
        <member name="P:NLib.Services.PageContentManager.Instance">
            <summary>
            Singelton access instance.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.Start">
            <summary>
            Start service.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.Shutdown">
            <summary>
            Shutdown service.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.Back">
            <summary>
            Step back one sub screen.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.Close">
            <summary>
            Close all sub screens.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.UpdateStatusMessage(System.String,System.Object[])">
            <summary>
            Update Status Message
            </summary>
            <param name="format">The status message that support format</param>
            <param name="args">The arguments for format.</param>
        </member>
        <member name="M:NLib.Services.PageContentManager.ShowWaitingProgress">
            <summary>
            Show Waiting Progress.
            </summary>
        </member>
        <member name="M:NLib.Services.PageContentManager.HideWaitingProgress">
            <summary>
            Hide Waiting Progress.
            </summary>
        </member>
        <member name="P:NLib.Services.PageContentManager.Current">
            <summary>
            Gets or sets current content control that need to display on main window's
            content area.
            </summary>
        </member>
        <member name="P:NLib.Services.PageContentManager.Count">
            <summary>
            Gets number of content page is on Z order stack.
            </summary>
        </member>
        <member name="P:NLib.Services.PageContentManager.LastStatusUpdate">
            <summary>
            Gets is last Status message date and time.
            </summary>
        </member>
        <member name="E:NLib.Services.PageContentManager.ContentChanged">
            <summary>
            ContentChanged event.
            </summary>
        </member>
        <member name="E:NLib.Services.PageContentManager.StatusUpdated">
            <summary>
            StatusUpdated event.
            </summary>
        </member>
        <member name="E:NLib.Services.PageContentManager.OnTick">
            <summary>
            OnTick Event.
            </summary>
        </member>
        <member name="T:NLib.Utils.NetworkUtils">
            <summary>
            Network Utilities class. Provide Network's related functions
            </summary>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.FindNetworkComputers">
            ------------------------------------------------------------------------------------
            <summary>
            Find Network Computers. Uses the DllImport : NetServerEnum with all its required parameters
            (see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/netmgmt/netmgmt/netserverenum.asp
            for full details or method signature) to retrieve a list of domain SV_TYPE_WORKSTATION
            and SV_TYPE_SERVER PC's.
            </summary>
            <returns> A list of string that represents all the PC's in the Domain. </returns>
            ------------------------------------------------------------------------------------
        </member>
        <member name="P:NLib.Utils.NetworkUtils.IsOtherComputerConnected">
            <summary>
            Check if a computer is on the network.
            </summary>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.GetLocalHostName">
            <summary>
            Get Local Host's Name
            </summary>
            <returns>Return The local host name.</returns>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.GetHostAddress(System.String)">
            <summary>
            Get Host Address
            </summary>
            <param name="hostName">The host name to solve IPAddress.</param>
            <returns>Return List of IPAddress on specificed host.</returns>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.GetActiveNetworkInterfaces">
            <summary>
            Gets all active network adaptors not include loopback adaptor.
            </summary>
            <returns>Returns array of network interface adaptors.</returns>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.GetActiveInterface">
            <summary>
            Gets current active network adaptor not include loopback adaptor.
            </summary>
            <returns>Returns current active network interface adaptor.</returns>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.GetLocalIPAddress">
            <summary>
            Gets IP Address from active network adaptor.
            </summary>
            <returns>Returns IP Address of current active network interface adaptor.</returns>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.GetLocalIPAddress(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Gets IP Address from specificed network adaptor.
            </summary>
            <param name="nic">The network interface adaptor.</param>
            <returns>Returns IP Address of specificed network interface adaptor.</returns>
        </member>
        <member name="M:NLib.Utils.NetworkUtils.GetExternalIPAddress">
            <summary>
            Gets the IP address provide by ISP that used in internet.
            When call the respose speed is depend on the internet connect speed so when call
            UI may be freeze until the response is returns.
            </summary>
            <returns>Returns external IP address that used in internet.</returns>
        </member>
        <member name="T:NLib.Utils.CPM">
            <summary>
            Application Close Process monitor.
            </summary>
        </member>
        <member name="P:NLib.Utils.CPM.Instance">
            <summary>
            Singelton Access instance.
            </summary>
        </member>
        <member name="M:NLib.Utils.CPM.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.CPM.Shutdown(System.Boolean,System.UInt32)">
            <summary>
            Shutdown
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="autoKillInMs">The time to force process auto 
            kill in millisecond. if this parameter is less than 100 ms. 
            so no auto kill process running.</param>
        </member>
        <member name="T:NLib.Utils.SevenZipManager">
            <summary>
            Seven Zip Manager
            </summary>
        </member>
        <member name="M:NLib.Utils.SevenZipManager.Compress(System.String)">
            <summary>
            Compress
            </summary>
            <param name="source">Source File to compress</param>
        </member>
        <member name="M:NLib.Utils.SevenZipManager.Compress(System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="source">Source File to compress</param>
            <param name="target">Output file name</param>
        </member>
        <member name="M:NLib.Utils.SevenZipManager.CompressDirectory(System.String,System.String)">
            <summary>
            Compress Directory
            </summary>
            <param name="source">Source Path Name to compress</param>
            <param name="target">Output file name</param>
        </member>
        <member name="M:NLib.Utils.SevenZipManager.CompressDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Compress Directory
            </summary>
            <param name="source">Source Path Name to compress</param>
            <param name="target">Output file name</param>
            <param name="useZip">Used zip format.</param>
        </member>
        <member name="M:NLib.Utils.SevenZipManager.Decompress(System.String)">
            <summary>
            Decompress
            </summary>
            <param name="source">Source File to decompress</param>
        </member>
        <member name="M:NLib.Utils.SevenZipManager.Decompress(System.String,System.String)">
            <summary>
            Decompress
            </summary>
            <param name="source">Source File to decompress</param>
            <param name="target">Output Path</param>
        </member>
        <member name="T:NLib.Utils.ControlPanel">
            <summary>
            Control Panel Access Class
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.OpenApplet(System.String)">
            <summary>
            OpenApplet
            </summary>
            <param name="AppletName">Applet's Name</param>
        </member>
        <member name="M:NLib.Utils.ControlPanel.DisplaySettings">
            <summary>
            Show Display Settings
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.DisplaySettings(System.Int32)">
            <summary>
            Show Display Settings
            </summary>
            <param name="TabCode">Tab Code to make Default Page</param>
        </member>
        <member name="M:NLib.Utils.ControlPanel.RegionalSettings">
            <summary>
            Show Regional Settings
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.ODBCAdministrator">
            <summary>
            Show ODBC Administrator
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.DateTimeSettings">
            <summary>
            Show DateTime Settings
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.AddRemovePrograms">
            <summary>
            Show Add Remove Programs
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.KeyboardSettings">
            <summary>
            Show Keyboard Settings
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.MouseSettings">
            <summary>
            Show Mouse Settings
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.InternetOptions">
            <summary>
            Show Internet Options
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.ModemOptions">
            <summary>
            Show Modem Options
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.TelephoneOptions">
            <summary>
            Show Telephone Options
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.SoundSettings">
            <summary>
            Show Sound Settings
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.PowerSettings">
            <summary>
            Show Power Settings
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.SystemSetting">
            <summary>
            Show System Setting
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.NetworkSetting">
            <summary>
            Show Network Setting
            </summary>
        </member>
        <member name="M:NLib.Utils.ControlPanel.AddNewHardware">
            <summary>
            Show Add New Hardware
            </summary>
        </member>
        <member name="T:NLib.Utils.DataSourceUtils">
            <summary>
            DataSource Utility
            </summary>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.GetDrivers">
            <summary>
            Get Avaliable drivers
            </summary>
            <returns>Avaliable driver list</returns>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.GetSystemDSNs">
            <summary>
            get system dsn list
            </summary>
            <returns>DSN List</returns>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.GetUserDSNs">
            <summary>
            get user dsn list
            </summary>
            <returns>DSN List</returns>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.GetFileDSNs">
            <summary>
            get file dsn list
            </summary>
            <returns>DSN List</returns>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.GetFileDSNPaths">
            <summary>
            get file dsn path list
            </summary>
            <returns>DSN Path List</returns>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.ODBCAdministrator">
            <summary>
            Show ODBC Administrator
            </summary>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.ODBCAdministrator32">
            <summary>
            Run Odbc Admin 32 bits In 64bits Systems. 
            On a 64bit OS when running %WINDIR%\system32\odbcad32.exe which is 64bit.
            But if your application is 32bit, it will never see this DSN created using 64bit odbcad32.exe. 
            On a64bit OSS, to create a DSN which is going to be seen by 32bit applications you have to 
            run %WINDIR%\syswow64\odbcad32.exe which is 32bit.
            Don't forget that your 64bit applications will also not see the 32bit DSNs.
            </summary>
        </member>
        <member name="M:NLib.Utils.DataSourceUtils.NewExcelDsn(NLib.Utils.DsnMode,System.String,System.String,System.String,System.String)">
            <summary>
            Create New Excel DSN
            </summary>
            <param name="mode">DSN Mode</param>
            <param name="DsnName">DSN Name</param>
            <param name="ExcelFileName">Excel (*.xls) FileName</param>
            <param name="UserName">User Name for connect</param>
            <param name="Password">Password for connect</param>
        </member>
        <member name="T:NLib.Utils.DsnMode">
            <summary>
            Dsn Mode for Registry Utils
            </summary>
        </member>
        <member name="F:NLib.Utils.DsnMode.System">
            <summary>
            System Dsn
            </summary>
        </member>
        <member name="F:NLib.Utils.DsnMode.User">
            <summary>
            User Dsn
            </summary>
        </member>
        <member name="F:NLib.Utils.DsnMode.File">
            <summary>
            File Dsn
            </summary>
        </member>
        <member name="T:NLib.Utils.RegistryUtils">
            <summary>
            Registry Access Utility
            </summary>
        </member>
        <member name="M:NLib.Utils.RegistryUtils.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Utils.RegistryUtils.GetDrivers">
            <summary>
            Get Avaliable drivers
            </summary>
            <returns>Returns Avaliable driver list</returns>
        </member>
        <member name="M:NLib.Utils.RegistryUtils.GetSystemDSNs">
            <summary>
            Get system dsn list
            </summary>
            <returns>Returns DSN List</returns>
        </member>
        <member name="M:NLib.Utils.RegistryUtils.GetUserDSNs">
            <summary>
            Get user dsn list
            </summary>
            <returns>Returns DSN List</returns>
        </member>
        <member name="M:NLib.Utils.RegistryUtils.GetFileDSNs">
            <summary>
            Get file dsn list
            </summary>
            <returns>Returns DSN List</returns>
        </member>
        <member name="M:NLib.Utils.RegistryUtils.GetFileDSNPaths">
            <summary>
            Get file dsn path list
            </summary>
            <returns>Returns DSN Path List</returns>
        </member>
        <member name="M:NLib.Utils.RegistryUtils.NewExcelDsn(NLib.Utils.DsnMode,System.String,System.String,System.String,System.String)">
            <summary>
            Create New Excel DSN
            </summary>
            <param name="mode">DSN Mode</param>
            <param name="DsnName">DSN Name</param>
            <param name="ExcelFileName">Excel (*.xls) FileName</param>
            <param name="UserName">User Name for connect</param>
            <param name="Password">Password for connect</param>
        </member>
        <member name="T:NLib.Utils.Shortcut">
            <remarks>
            Shortcut class. This is the .NET friendly wrapper for the ShellLink class
            </remarks>
        </member>
        <member name="M:NLib.Utils.Shortcut.Native.ExtractIcon(System.IntPtr,System.String,System.Int32)">
            <summary>
            Extract Icon
            </summary>
            <param name="hInst"></param>
            <param name="lpszExeFileName"></param>
            <param name="nIconIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.Shortcut.Native.DestroyIcon(System.IntPtr)">
            <summary>
            Destroy Icon
            </summary>
            <param name="hIcon"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.Shortcut.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name='linkPath'>Path to new or existing shortcut file (.lnk).</param>
        </member>
        <member name="M:NLib.Utils.Shortcut.System#IDisposable#Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NLib.Utils.Shortcut.Save">
            <summary>
              Saves the shortcut to disk.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.Arguments">
            <summary>
            Gets or sets the argument list of the shortcut.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.Description">
            <summary>
            Gets or sets a description of the shortcut.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.WorkingDirectory">
            <summary>
            Gets or sets the working directory (aka start in directory) of the shortcut.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.Path">
            <summary>
            Gets or sets the target path of the shortcut. 
            Note If Path returns an empty string, the shortcut is associated with
            a PIDL instead, which can be retrieved with IShellLink.GetIDList().
            This is beyond the scope of this wrapper class.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.IconPath">
            <summary>
            Gets or sets the path of the <see cref="P:NLib.Utils.Shortcut.Icon"/> assigned to the shortcut.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.IconIndex">
            <summary>
            Gets or sets the index of the <see cref="P:NLib.Utils.Shortcut.Icon"/> assigned to the shortcut.
            Set to zero when the <see cref="P:NLib.Utils.Shortcut.IconPath"/> property specifies a .ICO file.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.Icon">
            <summary>
            Retrieves the Icon of the shortcut as it will appear in Explorer.
            Use the <see cref="P:NLib.Utils.Shortcut.IconPath"/> and <see cref="P:NLib.Utils.Shortcut.IconIndex"/>
            properties to change it.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.WindowStyle">
            <summary>
            Gets or sets the System.Diagnostics.ProcessWindowStyle value
            that decides the initial show state of the shortcut target. Note that
            ProcessWindowStyle.Hidden is not a valid property value.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.Hotkey">
            <summary>
            Gets or sets the hotkey for the shortcut.
            </summary>
        </member>
        <member name="P:NLib.Utils.Shortcut.ShellLink">
            <summary>
            Returns a reference to the internal ShellLink object,
            which can be used to perform more advanced operations
            not supported by this wrapper class, by using the
            IShellLink interface directly.
            </summary>
        </member>
        <member name="T:NLib.Utils.FileAssociationShellHelper">
            <summary>
            File Association Shell Helper
            </summary>
        </member>
        <member name="M:NLib.Utils.FileAssociationShellHelper.ShowFileProperties(System.String)">
            <summary>
            Show File Properties
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:NLib.Utils.FileAssociationShellHelper.RunPPT(System.String)">
            <summary>
            Run PPT.
            </summary>
            <param name="fileName">The power point file name.</param>
        </member>
        <member name="M:NLib.Utils.FileAssociationShellHelper.CreateIconResource(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Create Icon Resource.
            </summary>
            <param name="assm">The resource assembly.</param>
            <param name="resourceName">
            The resource icon full path name i.e. MyChoice.Resource.MyChoiceDb.ico
            </param>
            <param name="FullFileName">Target icon file.</param>
            <returns>Returns true if icon exist.</returns>
        </member>
        <member name="T:NLib.Utils.CommandList">
            <summary>List of commands.</summary>
        </member>
        <member name="F:NLib.Utils.CommandList.Captions">
            <summary>
            Holds the names of the commands.
            </summary>
        </member>
        <member name="F:NLib.Utils.CommandList.Commands">
            <summary>
            Holds the commands.
            </summary>
        </member>
        <member name="T:NLib.Utils.FileType">
            <summary>Properties of the file association.</summary>
        </member>
        <member name="F:NLib.Utils.FileType.Commands">
            <summary>
            Holds the command names and the commands.
            </summary>
        </member>
        <member name="F:NLib.Utils.FileType.Extension">
            <summary>
            Holds the extension of the file type.
            </summary>
        </member>
        <member name="F:NLib.Utils.FileType.ProperName">
            <summary>
            Holds the proper name of the file type.
            </summary>
        </member>
        <member name="F:NLib.Utils.FileType.FullName">
            <summary>
            Holds the full name of the file type.
            </summary>
        </member>
        <member name="F:NLib.Utils.FileType.ContentType">
            <summary>
            Holds the name of the content type of the file type.
            </summary>
        </member>
        <member name="F:NLib.Utils.FileType.IconPath">
            <summary>
            Holds the path to the resource with the icon of this file type.
            </summary>
        </member>
        <member name="F:NLib.Utils.FileType.IconIndex">
            <summary>
            Holds the icon index in the resource file.
            </summary>
        </member>
        <member name="T:NLib.Utils.FileAssociation">
            <summary>Creates file associations for your programs.</summary>
            <example>The following example creates a file association for the type XYZ with a non-existent program.
            <br></br><br>VB.NET code</br>
            <code>
            Dim FA as New FileAssociation
            FA.Extension = "xyz"
            FA.ContentType = "application/myprogram"
            FA.FullName = "My XYZ Files!"
            FA.ProperName = "XYZ File"
            FA.AddCommand("open", "C:\mydir\myprog.exe %1")
            FA.Create
            </code>
            <br>C# code</br>
            <code>
            FileAssociation FA = new FileAssociation();
            FA.Extension = "xyz";
            FA.ContentType = "application/myprogram";
            FA.FullName = "My XYZ Files!";
            FA.ProperName = "XYZ File";
            FA.AddCommand("open", "C:\\mydir\\myprog.exe %1");
            FA.Create();
            </code>
            </example>
        </member>
        <member name="M:NLib.Utils.FileAssociation.#ctor">
            <summary>
            Initializes an instance of the FileAssociation class.
            </summary>
        </member>
        <member name="P:NLib.Utils.FileAssociation.ProperName">
            <summary>
            Gets or sets the proper name of the file type.
            </summary>
            <value>A String representing the proper name of the file type.</value>
        </member>
        <member name="P:NLib.Utils.FileAssociation.FullName">
            <summary>Gets or sets the full name of the file type.</summary>
            <value>A String representing the full name of the file type.</value>
        </member>
        <member name="P:NLib.Utils.FileAssociation.ContentType">
            <summary>
            Gets or sets the content type of the file type.
            </summary>
            <value>A String representing the content type of the file type.</value>
        </member>
        <member name="P:NLib.Utils.FileAssociation.Extension">
            <summary>
            Gets or sets the extension of the file type.
            </summary>
            <value>A String representing the extension of the file type.</value>
            <remarks>If the extension doesn't start with a dot ("."), a dot is automatically added.</remarks>
        </member>
        <member name="P:NLib.Utils.FileAssociation.IconIndex">
            <summary>
            Gets or sets the index of the icon of the file type.
            </summary>
            <value>A short representing the index of the icon of the file type.</value>
        </member>
        <member name="P:NLib.Utils.FileAssociation.IconPath">
            <summary>
            Gets or sets the path of the resource that contains the icon for the file type.
            </summary>
            <value>A String representing the path of the resource that contains the icon for the file type.</value>
            <remarks>This resource can be an executable or a DLL.</remarks>
        </member>
        <member name="M:NLib.Utils.FileAssociation.AddCommand(System.String,System.String)">
            <summary>
            Adds a new command to the command list.
            </summary>
            <param name="Caption">The name of the command.</param>
            <param name="Command">The command to execute.</param>
            <exceptions cref="T:System.ArgumentNullException">Caption -or- Command is null (VB.NET: Nothing).</exceptions>
        </member>
        <member name="M:NLib.Utils.FileAssociation.Create">
            <summary>
            Creates the file association.
            </summary>
            <exceptions cref="T:System.ArgumentNullException">Extension -or- ProperName is null (VB.NET: Nothing).</exceptions>
            <exceptions cref="T:System.ArgumentException">Extension -or- ProperName is empty.</exceptions>
            <exceptions cref="T:System.Security.SecurityException">The user does not have registry write access.</exceptions>
        </member>
        <member name="M:NLib.Utils.FileAssociation.Remove">
            <summary>
            Removes the file association.
            </summary>
            <exceptions cref="T:System.ArgumentNullException">Extension -or- ProperName is null (VB.NET: Nothing).</exceptions>
            <exceptions cref="T:System.ArgumentException">Extension -or- ProperName is empty -or- the specified extension doesn't exist.</exceptions>
            <exceptions cref="T:System.Security.SecurityException">The user does not have registry delete access.</exceptions>
        </member>
        <member name="F:NLib.Utils.FileAssociation.FileInfo">
            <summary>Holds the properties of the file type.</summary>
        </member>
        <member name="T:NLib.Utils.NStopWatch">
            <summary>
            The high-resolution performance timer class used Win32 API.
            </summary>
        </member>
        <member name="M:NLib.Utils.NStopWatch.QueryPerformanceCounter(System.Int64@)">
            <summary>
            QueryPerformanceFrequency.
            </summary>
            <param name="lpPerformanceCount">The counter.</param>
            <returns>Returns true if OS Supports.</returns>
        </member>
        <member name="M:NLib.Utils.NStopWatch.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            QueryPerformanceFrequency.
            </summary>
            <param name="lpFrequency">The Frequency.</param>
            <returns>Returns true if OS Supports.</returns>
        </member>
        <member name="M:NLib.Utils.NStopWatch.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.NStopWatch.Start">
            <summary>
            Start timer.
            </summary>
        </member>
        <member name="M:NLib.Utils.NStopWatch.Stop">
            <summary>
            Stop timer.
            </summary>
        </member>
        <member name="P:NLib.Utils.NStopWatch.Duration">
            <summary>
            Returns the duration of the timer (in seconds).
            </summary>
        </member>
        <member name="T:NLib.Utils.MicroStopWatch">
            <summary>
            The MicroStopWatch class.
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroStopWatch.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.Utils.MicroStopWatch.ElapsedMicroseconds">
            <summary>
            Gets Elapsed Time in micro second.
            </summary>
        </member>
        <member name="T:NLib.Utils.MicroTimerElapsedEventHandler">
            <summary>
            The MicroTimer Elapsed Event Handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="timerEventArgs">The MicroTimer Event Argument.</param>
        </member>
        <member name="T:NLib.Utils.MicroTimerEventArgs">
            <summary>
            MicroTimer Event Argument class
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroTimerEventArgs.#ctor(System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="timerCount">
            The Simple counter, number times timed event (callback function) executed.
            </param>
            <param name="elapsedMicroseconds">
            The Time when timed event was called since timer started.
            </param>
            <param name="timerLateBy">
            The value that determine how late the timer was compared to when it should have been called.
            </param>
            <param name="callbackFunctionExecutionTime">
            The Time it took to execute previous call to callback function (OnTimedEvent).
            </param>
        </member>
        <member name="P:NLib.Utils.MicroTimerEventArgs.TimerCount">
            <summary>
            Gets Simple counter, number times timed event (callback function) executed.
            </summary>
        </member>
        <member name="P:NLib.Utils.MicroTimerEventArgs.ElapsedMicroseconds">
            <summary>
            Gets Time when timed event was called since timer started.
            </summary>
        </member>
        <member name="P:NLib.Utils.MicroTimerEventArgs.TimerLateBy">
            <summary>
            Gets How late the timer was compared to when it should have been called.
            </summary>
        </member>
        <member name="P:NLib.Utils.MicroTimerEventArgs.CallbackFunctionExecutionTime">
            <summary>
            Gets Time it took to execute previous call to callback function (OnTimedEvent).
            </summary>
        </member>
        <member name="T:NLib.Utils.MicroTimer">
            <summary>
            The MicroTimer class. Like Timer but can tick in microsecond.
            Note. The internal thread is execute in Highest piority. 
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroTimer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroTimer.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="timerIntervalInMicroseconds">The tick interval.</param>
        </member>
        <member name="M:NLib.Utils.MicroTimer.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroTimer.Start">
            <summary>
            Start timer.
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroTimer.Stop">
            <summary>
            Stop timer.
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroTimer.StopAndWait">
            <summary>
            Stop and wait.
            </summary>
        </member>
        <member name="M:NLib.Utils.MicroTimer.StopAndWait(System.Int32)">
            <summary>
            Stop and wait.
            </summary>
            <param name="timeoutInMilliSec">The timeout in millisecond.</param>
            <returns>Returns true if successfully stop.</returns>
        </member>
        <member name="M:NLib.Utils.MicroTimer.Abort">
            <summary>
            Abort timer.
            </summary>
        </member>
        <member name="P:NLib.Utils.MicroTimer.Interval">
            <summary>
            Gets or sets Interval in microsecond.
            </summary>
        </member>
        <member name="P:NLib.Utils.MicroTimer.IgnoreEventIfLateBy">
            <summary>
            Gets or sets if event should be fired if current time is late by interval.
            </summary>
        </member>
        <member name="P:NLib.Utils.MicroTimer.Enabled">
            <summary>
            Gets or sets is timer enable or disable.
            </summary>
        </member>
        <member name="E:NLib.Utils.MicroTimer.MicroTimerElapsed">
            <summary>
            The MicroTimerElapsed event.
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils">
            <summary>
            The Window Utilities class.
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.LowLevelKeyboardHook">
            <summary>
            LowLevelKeyboardHook
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.LowLevelKeyboardHook.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.LowLevelKeyboardHook.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.LowLevelKeyboardHook.Hook">
            <summary>
            Hook
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.LowLevelKeyboardHook.Unhook">
            <summary>
            Unhook
            </summary>
        </member>
        <member name="P:NLib.Utils.WinUtils.LowLevelKeyboardHook.IsHook">
            <summary>
            Check is hook.
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.LowLevelKeyboardHook.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.ShutDownMode">
            <summary>
            ShutDownMode
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.ReasonMajor">
            <summary>
            ReasonMajor
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.ReasonMinor">
            <summary>
            ReasonMinor
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.ReasonFlag">
            <summary>
            ReasonFlag
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.SW">
            <summary>
            SW
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.HIDE">
            <summary>
            HIDE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOWNORMAL">
            <summary>
            SHOWNORMAL
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.NORMAL">
            <summary>
            NORMAL
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOWMINIMIZED">
            <summary>
            SHOWMINIMIZED
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOWMAXIMIZED">
            <summary>
            SHOWMAXIMIZED
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.MAXIMIZE">
            <summary>
            MAXIMIZE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOWNOACTIVATE">
            <summary>
            SHOWNOACTIVATE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOW">
            <summary>
            SHOW
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.MINIMIZE">
            <summary>
            MINIMIZE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOWMINNOACTIVE">
            <summary>
            SHOWMINNOACTIVE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOWNA">
            <summary>
            SHOWNA
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.RESTORE">
            <summary>
            RESTORE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.SHOWDEFAULT">
            <summary>
            SHOWDEFAULT
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.FORCEMINIMIZE">
            <summary>
            FORCEMINIMIZE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.SW.MAX">
            <summary>
            MAX
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.Bool">
            <summary>
            Enumeration to be used for those Win32 function that return BOOL
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.Bool.False">
            <summary>
            False Value
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.Bool.True">
            <summary>
            True value
            </summary>
        </member>
        <member name="T:NLib.Utils.WinUtils.TernaryRasterOperations">
            <summary>
            Enumeration for the raster operations used in BitBlt.
            In C++ these are actually #define. But to use these
            constants with C#, a new enumeration type is defined.
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.SRCCOPY">
            <summary>
            SRCCOPY
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.SRCPAINT">
            <summary>
            SRCPAINT
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.SRCAND">
            <summary>
            SRCAND
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.SRCINVERT">
            <summary>
            SRCINVERT
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.SRCERASE">
            <summary>
            SRCERASE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.NOTSRCCOPY">
            <summary>
            NOTSRCCOPY
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.NOTSRCERASE">
            <summary>
            NOTSRCERASE
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.MERGECOPY">
            <summary>
            MERGECOPY
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.MERGEPAINT">
            <summary>
            MERGEPAINT
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.PATCOPY">
            <summary>
            PATCOPY
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.PATPAINT">
            <summary>
            PATPAINT
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.PATINVERT">
            <summary>
            PATINVERT
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.DSTINVERT">
            <summary>
            DSTINVERT
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.BLACKNESS">
            <summary>
            BLACKNESS
            </summary>
        </member>
        <member name="F:NLib.Utils.WinUtils.TernaryRasterOperations.WHITENESS">
            <summary>
            WHITENESS
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.GetDC(System.IntPtr)">
            <summary>
            GetDC
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.GetDesktopWindow">
            <summary>
            GetDesktopWindow
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.GetWindowDC(System.IntPtr)">
            <summary>
            GetWindowDC
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            ReleaseDC
            </summary>
            <param name="hWnd"></param>
            <param name="hDC"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            CreateCompatibleBitmap
            </summary>
            <param name="hObject"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateCompatibleDC(System.IntPtr)">
            <summary>
            CreateCompatibleDC
            </summary>
            <param name="hDC"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,NLib.Utils.WinUtils.TernaryRasterOperations)">
            <summary>
            BitBlt
            </summary>
            <param name="hObject"></param>
            <param name="nXDest"></param>
            <param name="nYDest"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="hObjSource"></param>
            <param name="nXSrc"></param>
            <param name="nYSrc"></param>
            <param name="dwRop"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.DeleteDC(System.IntPtr)">
            <summary>
            DeleteDC
            </summary>
            <param name="hdc"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.DeleteObject(System.IntPtr)">
            <summary>
            DeleteObject
            </summary>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.GetDeviceCaps(System.IntPtr,System.Int32)">
            <summary>
            GetDeviceCaps
            </summary>
            <param name="hdc"></param>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            SelectObject
            </summary>
            <param name="hDC"></param>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.SetWindowVisible(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Set Window Visible
            </summary>
            <param name="baseClassName">Base ClassName</param>
            <param name="parentClassName">Parent ClassName</param>
            <param name="targetClassName">Target ClassName</param>
            <param name="visible">is visible</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.SetWindowVisible(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Set Window Visible
            </summary>
            <param name="baseClassName">Base ClassName</param>
            <param name="parentClassName">Parent ClassName</param>
            <param name="targetClassName">Target ClassName</param>
            <param name="windowTitle">Window Title Text.</param>
            <param name="visible">is visible</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.LogOff">
            <summary>
            LogOff
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.Shutdown">
            <summary>
            Shutdown
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.Reboot">
            <summary>
            Reboot
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.PowerOff">
            <summary>
            PowerOff
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowDesktopIcons(System.Boolean)">
            <summary>
            Show Desktop Icons
            </summary>
            <param name="visible">is visible</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowDesktopIcons">
            <summary>
            Show Desktop Icons
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.HideDesktopIcons">
            <summary>
            Hide Desktop Icons
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowTrayClock(System.Boolean)">
            <summary>
            Show Tray Clock
            </summary>
            <param name="visible">is visible</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowTrayClock">
            <summary>
            Show Tray Clock
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.HideTrayClock">
            <summary>
            Hide Tray Clock
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowStartButton(System.Boolean)">
            <summary>
            Show Start Button. Note that in window vista should used with Show/Hide System Tray
            </summary>
            <param name="visible">is visible</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowStartButton">
            <summary>
            Show Start Button
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.HideStartButton">
            <summary>
            Hide Start Button
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowSystemTray(System.Boolean)">
            <summary>
            Show System Tray
            </summary>
            <param name="visible">is visible</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowSystemTray">
            <summary>
            Show System Tray
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.HideSystemTray">
            <summary>
            Hide System Tray
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowTrayIcons(System.Boolean)">
            <summary>
            Show Tray Icons
            </summary>
            <param name="visible">is visible</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowTrayIcons">
            <summary>
            Show System Tray Icons
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.HideTrayIcons">
            <summary>
            Hide System Tray Icons
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowQuickLaunch(System.Boolean)">
            <summary>
            Show Quick Launch bar. Tested on Vista only.
            </summary>
            <param name="visible">The visible flag</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.ShowQuickLaunch">
            <summary>
            Show Quick Launch bar. Tested on Vista only.
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.HideQuickLaunch">
            <summary>
            Hide Quick Launch bar. Tested on Vista only.
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.DisableTaskBar(System.Boolean)">
            <summary>
            Disable TaskBar
            </summary>
            <param name="disable">is disable</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.DisableTaskBar">
            <summary>
            Disable TaskBar
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.EnableTaskBar">
            <summary>
            Enable TaskBar
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.DisableTaskManager(System.Boolean)">
            <summary>
            Disable TaskManager
            </summary>
            <param name="disable">is disable</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.DisableTaskManager">
            <summary>
            Disable Task Manager
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.EnableTaskManager">
            <summary>
            Enable Task Manager
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.IsHookSystemHey">
            <summary>
            Check is system key is hook.
            </summary>
            <returns>Return ture if system key is hook.</returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.DisableSystemKeys(System.Boolean)">
            <summary>
            Disable System Keys
            </summary>
            <param name="disable">is disable</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.DisableSystemKeys">
            <summary>
            Disable System Keys
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.EnableSystemKeys">
            <summary>
            Enable System Keys
            </summary>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateProcess(System.String)">
            <summary>
            Create Process
            </summary>
            <param name="executeFileName">executable file name</param>
            <returns>Process Instance</returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateProcess(System.String,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            Create Process
            </summary>
            <param name="executeFileName">executable file name</param>
            <param name="style">Process Window Style flags</param>
            <returns>Process Instance</returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.Execute(System.String,System.Boolean)">
            <summary>
            Execute
            </summary>
            <param name="executeFileName">executable file name</param>
            <param name="waitForExit">true for wait until executable file is exitd</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.OpenUrlIE(System.String)">
            <summary>
            Open web page in Internet Explorer
            </summary>
            <param name="url">url string</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.LoadOnStartup(System.String,System.String)">
            <summary>
            Load On Startup
            </summary>
            <param name="serviceName">Service Name</param>
            <param name="fileName">Execute file's name</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.RemoveFromStartUp(System.String)">
            <summary>
            Remove From StartUp
            </summary>
            <param name="serviceName">Service Name</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.IsLoadOnStartup(System.String)">
            <summary>
            IsLoadOnStartup
            </summary>
            <param name="serviceName">Service Name</param>
            <returns>true if service is already load on startup</returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.CaptureScreen">
            <summary>
            CaptureScreen
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.CaptureScreen(System.Windows.Forms.Control)">
            <summary>
            CaptureScreen
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.CaptureControl(System.Windows.Forms.Control)">
            <summary>
            CaptureControl
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.WinUtils.CaptureScreen(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            CaptureScreen
            </summary>
            <param name="fileName"></param>
            <param name="imageFormat"></param>
        </member>
        <member name="M:NLib.Utils.WinUtils.Cleanup(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Clean DC/reource by handle
            </summary>
            <param name="hBitmap"></param>
            <param name="hdcSrc"></param>
            <param name="hdcDest"></param>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateDesktopShortcut(System.String,System.String)">
            <summary>
            Create Desktop Shortcut
            </summary>
            <param name="shortcutName">The shortcut name. (only name not include drive, path and extension).</param>
            <param name="sourceFileName">The target file to make shortcut.</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateShortcut(System.String,System.String)">
            <summary>
            Create Shortcut
            </summary>
            <param name="shortcutFileName">The shortcut file's name (should include .lnk)</param>
            <param name="sourceFileName">The target file to make shortcut.</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateShortcut(System.String,System.String,System.String)">
            <summary>
            Create Shortcut
            </summary>
            <param name="shortcutFileName">The shortcut file's name (should include .lnk)</param>
            <param name="sourceFileName">The target file to make shortcut.</param>
            <param name="description">The description string.</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.CreateShortcut(System.String,System.String,System.String,System.String)">
            <summary>
            Create Shortcut
            </summary>
            <param name="shortcutFileName">The shortcut file's name (should include .lnk)</param>
            <param name="sourceFileName">The target file to make shortcut.</param>
            <param name="args">The Argument string for execute.</param>
            <param name="description">The description string.</param>
        </member>
        <member name="M:NLib.Utils.WinUtils.ChangeLocalDateTime(System.DateTime)">
            <summary>
            Change Local Date Time
            </summary>
            <param name="value">The DateTime value to set as current datetime.</param>
        </member>
        <member name="T:NLib.Utils.MsDocumentUtils">
            <summary>
            Utility Class for Create Microsoft Office Document
            </summary>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateExcel97File(System.String)">
            <summary>
            Create Excel 97 File
            </summary>
            <param name="FullFileName">File Name</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateExcel97File(System.String,System.Boolean)">
            <summary>
            Create Excel 97 File
            </summary>
            <param name="FullFileName">FileName</param>
            <param name="AutoOverwrite">Force Overwrite</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateExcel2003File(System.String)">
            <summary>
            Create Excel 2003 File
            </summary>
            <param name="FullFileName">File Name</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateExcel2003File(System.String,System.Boolean)">
            <summary>
            Create Excel 2003 File
            </summary>
            <param name="FullFileName">FileName</param>
            <param name="AutoOverwrite">Force Overwrite</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateMsAccess2KFile(System.String)">
            <summary>
            Create Access 2000 File
            </summary>
            <param name="FullFileName">File Name</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateMsAccess2KFile(System.String,System.Boolean)">
            <summary>
            Create Access 2000 File
            </summary>
            <param name="FullFileName">FileName</param>
            <param name="AutoOverwrite">Force Overwrite</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateMsAccess2003File(System.String)">
            <summary>
            Create Access 2003 File
            </summary>
            <param name="FullFileName">File Name</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateMsAccess2003File(System.String,System.Boolean)">
            <summary>
            Create Access 2003 File
            </summary>
            <param name="FullFileName">FileName</param>
            <param name="AutoOverwrite">Force Overwrite</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateWordXPFile(System.String)">
            <summary>
            Create Word XP  File
            </summary>
            <param name="FullFileName">File Name</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateWordXPFile(System.String,System.Boolean)">
            <summary>
            Create Word XP  File
            </summary>
            <param name="FullFileName">FileName</param>
            <param name="AutoOverwrite">Force Overwrite</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateWord2003File(System.String)">
            <summary>
            Create Word 2003  File
            </summary>
            <param name="FullFileName">File Name</param>
            <returns>true if file is created</returns>
        </member>
        <member name="M:NLib.Utils.MsDocumentUtils.CreateWord2003File(System.String,System.Boolean)">
            <summary>
            Create Word 2003  File
            </summary>
            <param name="FullFileName">FileName</param>
            <param name="AutoOverwrite">Force Overwrite</param>
            <returns>true if file is created</returns>
        </member>
        <member name="T:NLib.Utils.Converts">
            <summary>
            Convert class. A wrapper to convert value to specificed type
            </summary>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.SByte)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Int16)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Int32)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Int64)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Byte)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.UInt16)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.UInt32)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.UInt64)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Single)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Double)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Boolean)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Decimal)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Char)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.TimeSpan)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.DateTime)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Guid)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.SByte})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Int16})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Int32})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Int64})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Byte})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.UInt16})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.UInt32})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.UInt64})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Single})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Double})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Boolean})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Decimal})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Char})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.TimeSpan})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.DateTime})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Nullable{System.Guid})">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlString)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Type)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToString(System.Object)">
            <summary>
            ToString
            </summary>
            <param name="p">value to convert</param>
            <returns>string that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.String)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Int16)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Int32)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Int64)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Byte)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.UInt16)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.UInt32)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.UInt64)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Single)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Double)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Decimal)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Boolean)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Char)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.SByte})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Int16})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Int32})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Int64})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Byte})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.UInt16})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.UInt32})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.UInt64})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Single})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Double})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Decimal})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Char})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Nullable{System.Boolean})">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSByte(System.Object)">
            <summary>
            ToSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.String)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.SByte)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Int32)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Int64)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Byte)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.UInt16)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.UInt32)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.UInt64)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Single)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Double)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Decimal)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Boolean)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Char)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Int16})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.SByte})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Int32})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Int64})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Byte})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.UInt16})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.UInt32})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.UInt64})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Single})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Double})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Decimal})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Char})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Nullable{System.Boolean})">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt16(System.Object)">
            <summary>
            ToInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.String)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.SByte)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Int16)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Int64)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Byte)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.UInt16)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.UInt32)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.UInt64)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Single)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Double)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Decimal)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Boolean)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Char)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Int32})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.SByte})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Int16})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Int64})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Byte})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.UInt16})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.UInt32})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.UInt64})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Single})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Double})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Decimal})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Char})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Nullable{System.Boolean})">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt32(System.Object)">
            <summary>
            ToInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.String)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.SByte)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Int16)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Int32)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Byte)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.UInt16)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.UInt32)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.UInt64)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Single)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Double)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Decimal)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Char)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Boolean)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.DateTime)">
            <summary>
            Int64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.TimeSpan)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Int64})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.SByte})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Int16})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Int32})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Byte})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.UInt16})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.UInt32})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.UInt64})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Single})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Double})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Decimal})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Char})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.Boolean})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.DateTime})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Nullable{System.TimeSpan})">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToInt64(System.Object)">
            <summary>
            ToInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.String)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.SByte)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Int16)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Int32)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Int64)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.UInt16)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.UInt32)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.UInt64)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Single)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Double)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Decimal)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Boolean)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Char)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Byte})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.SByte})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Int16})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Int32})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Int64})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.UInt16})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.UInt32})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.UInt64})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Single})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Double})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Decimal})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Char})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Nullable{System.Boolean})">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlString)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByte(System.Object)">
            <summary>
            ToByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.String)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.SByte)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Int16)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Int32)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Int64)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Byte)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.UInt32)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.UInt64)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Single)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Double)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Decimal)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Boolean)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Char)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.UInt16})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.SByte})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Int16})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Int32})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Int64})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Byte})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.UInt32})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.UInt64})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Single})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Double})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Decimal})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Char})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Nullable{System.Boolean})">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt16(System.Object)">
            <summary>
            ToUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.String)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.SByte)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Int16)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Int32)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Int64)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Byte)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.UInt16)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.UInt64)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Single)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Double)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Decimal)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Boolean)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Char)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.UInt32})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.SByte})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Int16})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Int32})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Int64})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Byte})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.UInt16})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.UInt64})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Single})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Double})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Decimal})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Char})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Nullable{System.Boolean})">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt32(System.Object)">
            <summary>
            ToUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.String)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.SByte)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Int16)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Int32)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Int64)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Byte)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.UInt16)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.UInt32)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Single)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Double)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Decimal)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Boolean)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Char)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.UInt64})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.SByte})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Int16})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Int32})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Int64})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Byte})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.UInt16})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.UInt32})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Single})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Double})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Decimal})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Char})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Nullable{System.Boolean})">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToUInt64(System.Object)">
            <summary>
            ToUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.String)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.SByte)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Int16)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Int32)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Int64)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Byte)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.UInt16)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.UInt32)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.UInt64)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Single)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Double)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Decimal)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Boolean)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Char})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.SByte})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Int16})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Int32})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Int64})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Byte})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.UInt16})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.UInt32})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.UInt64})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Single})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Double})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Decimal})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Nullable{System.Boolean})">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlString)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToChar(System.Object)">
            <summary>
            ToChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.String)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.SByte)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Int16)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Int32)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Int64)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Byte)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.UInt16)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.UInt32)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.UInt64)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Double)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Decimal)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Boolean)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Char)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Single})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.SByte})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Int16})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Int32})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Int64})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Byte})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.UInt16})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.UInt32})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.UInt64})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Double})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Decimal})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Char})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Nullable{System.Boolean})">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSingle(System.Object)">
            <summary>
            ToSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.String)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.SByte)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Int16)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Int32)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Int64)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Byte)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.UInt16)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.UInt32)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.UInt64)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Single)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Decimal)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Boolean)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Char)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.DateTime)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.TimeSpan)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Double})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.SByte})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Int16})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Int32})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Int64})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Byte})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.UInt16})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.UInt32})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.UInt64})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Single})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Decimal})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Char})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.Boolean})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.DateTime})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Nullable{System.TimeSpan})">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlString)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDouble(System.Object)">
            <summary>
            ToDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.String)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.SByte)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Int16)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Int32)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Int64)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Byte)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.UInt16)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.UInt32)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.UInt64)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Single)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Double)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Decimal)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Char)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Boolean})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.SByte})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Int16})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Int32})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Int64})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Byte})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.UInt16})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.UInt32})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.UInt64})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Single})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Double})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Decimal})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Nullable{System.Char})">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlString)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToBoolean(System.Object)">
            <summary>
            ToBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.String)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.SByte)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Int16)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Int32)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Int64)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Byte)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.UInt16)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.UInt32)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.UInt64)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Single)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Double)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Boolean)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Char)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Decimal})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.SByte})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Int16})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Int32})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Int64})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Byte})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.UInt16})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.UInt32})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.UInt64})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Single})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Double})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Char})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Nullable{System.Boolean})">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlString)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDecimal(System.Object)">
            <summary>
            ToDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.String)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.TimeSpan)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Int64)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Double)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Nullable{System.DateTime})">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Nullable{System.TimeSpan})">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Nullable{System.Int64})">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Nullable{System.Double})">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Data.SqlTypes.SqlString)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToDateTime(System.Object)">
            <summary>
            ToDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.String)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.DateTime)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Int64)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Double)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Nullable{System.TimeSpan})">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Nullable{System.DateTime})">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Nullable{System.Int64})">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Nullable{System.Double})">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Data.SqlTypes.SqlString)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToTimeSpan(System.Object)">
            <summary>
            ToTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.String)">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.Nullable{System.Guid})">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.Data.SqlTypes.SqlString)">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.Byte[])">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.Type)">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToGuid(System.Object)">
            <summary>
            ToGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.SByte)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.String)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Int16)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Int32)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Int64)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Byte)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.UInt16)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.UInt32)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.UInt64)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Single)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Double)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Decimal)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Char)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Boolean)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Int16})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Int32})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Int64})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Byte})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.UInt16})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.UInt32})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.UInt64})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Single})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Double})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Decimal})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Char})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Nullable{System.Boolean})">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSByte(System.Object)">
            <summary>
            ToNullableSByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SByte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Int16)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.String)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.SByte)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Int32)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Int64)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Byte)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.UInt16)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.UInt32)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.UInt64)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Single)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Double)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Decimal)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Char)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Boolean)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.SByte})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Int32})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Int64})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Byte})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.UInt16})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.UInt32})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.UInt64})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Single})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Double})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Decimal})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Char})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Nullable{System.Boolean})">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt16(System.Object)">
            <summary>
            ToNullableInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>Int16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Int32)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.String)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.SByte)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Int16)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Int64)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Byte)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.UInt16)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.UInt32)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.UInt64)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Single)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Double)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Decimal)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Char)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Boolean)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.SByte})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Int16})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Int64})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Byte})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.UInt16})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.UInt32})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.UInt64})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Single})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Double})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Decimal})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Char})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Nullable{System.Boolean})">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt32(System.Object)">
            <summary>
            ToNullableInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>Int32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Int64)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.String)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.SByte)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Int16)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Int32)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Byte)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.UInt16)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.UInt32)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.UInt64)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Single)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Double)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Decimal)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Char)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Boolean)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.DateTime)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.TimeSpan)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.SByte})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Int16})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Int32})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Byte})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.UInt16})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.UInt32})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.UInt64})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Single})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Double})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Decimal})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Char})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.Boolean})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.DateTime})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Nullable{System.TimeSpan})">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableInt64(System.Object)">
            <summary>
            ToNullableInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>Int64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Byte)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.String)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.SByte)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Int16)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Int32)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Int64)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.UInt16)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.UInt32)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.UInt64)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Single)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Double)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Decimal)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Char)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Boolean)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.SByte})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Int16})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Int32})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Int64})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.UInt16})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.UInt32})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.UInt64})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Single})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Double})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Decimal})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Char})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Nullable{System.Boolean})">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableByte(System.Object)">
            <summary>
            ToNullableByte
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.UInt16)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.String)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.SByte)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Int16)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Int32)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Int64)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Byte)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.UInt32)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.UInt64)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Single)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Double)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Decimal)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Char)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Boolean)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.SByte})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Int16})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Int32})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Int64})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Byte})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.UInt32})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.UInt64})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Single})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Double})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Decimal})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Char})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Nullable{System.Boolean})">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt16(System.Object)">
            <summary>
            ToNullableUInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt16? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.UInt32)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.String)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.SByte)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Int16)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Int32)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Int64)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Byte)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.UInt16)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.UInt64)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Single)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Double)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Decimal)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Char)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Boolean)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.SByte})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Int16})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Int32})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Int64})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Byte})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.UInt16})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.UInt64})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Single})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Double})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Decimal})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Char})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Nullable{System.Boolean})">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt32(System.Object)">
            <summary>
            ToNullableUInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt32? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.UInt64)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.String)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.SByte)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Int16)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Int32)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Int64)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Byte)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.UInt16)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.UInt32)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Single)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Double)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Decimal)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Char)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Boolean)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.SByte})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Int16})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Int32})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Int64})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Byte})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.UInt16})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.UInt32})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Single})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Double})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Decimal})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Char})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Nullable{System.Boolean})">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableUInt64(System.Object)">
            <summary>
            ToNullableUInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>UInt64? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Char)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.String)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.SByte)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Int16)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Int32)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Int64)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Byte)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.UInt16)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.UInt32)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.UInt64)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Single)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Double)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Decimal)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Boolean)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.SByte})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Int16})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Int32})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Int64})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Byte})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.UInt16})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.UInt32})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.UInt64})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Single})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Double})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Decimal})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Nullable{System.Boolean})">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableChar(System.Object)">
            <summary>
            ToNullableChar
            </summary>
            <param name="p">value to convert</param>
            <returns>Char? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Single)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.String)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.SByte)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Int16)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Int32)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Int64)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Byte)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.UInt16)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.UInt32)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.UInt64)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Double)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Decimal)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Char)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Boolean)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.SByte})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Int16})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Int32})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Int64})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Byte})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.UInt16})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.UInt32})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.UInt64})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Double})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Decimal})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Char})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Nullable{System.Boolean})">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableSingle(System.Object)">
            <summary>
            ToNullableSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>Single? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Double)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.String)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.SByte)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Int16)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Int32)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Int64)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Byte)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.UInt16)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.UInt32)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.UInt64)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Single)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Decimal)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Char)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Boolean)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.DateTime)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.TimeSpan)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.SByte})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Int16})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Int32})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Int64})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Byte})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.UInt16})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.UInt32})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.UInt64})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Single})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Decimal})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Char})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.Boolean})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.DateTime})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Nullable{System.TimeSpan})">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDouble(System.Object)">
            <summary>
            ToNullableDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>Double? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Boolean)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.String)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.SByte)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Int16)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Int32)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Int64)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Byte)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.UInt16)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.UInt32)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.UInt64)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Single)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Double)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Decimal)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Char)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.SByte})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Int16})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Int32})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Int64})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Byte})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.UInt16})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.UInt32})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.UInt64})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Single})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Double})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Decimal})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Nullable{System.Char})">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableBoolean(System.Object)">
            <summary>
            ToNullableBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>Boolean? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Decimal)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.String)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.SByte)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Int16)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Int32)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Int64)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Byte)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.UInt16)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.UInt32)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.UInt64)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Single)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Double)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Char)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Boolean)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.SByte})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Int16})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Int32})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Int64})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Byte})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.UInt16})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.UInt32})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.UInt64})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Single})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Double})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Char})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Nullable{System.Boolean})">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDecimal(System.Object)">
            <summary>
            ToNullableDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>Decimal? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.DateTime)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.String)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.TimeSpan)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Int64)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Double)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Nullable{System.TimeSpan})">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Nullable{System.Int64})">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Nullable{System.Double})">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableDateTime(System.Object)">
            <summary>
            ToNullableDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>DateTime? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.TimeSpan)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.String)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.DateTime)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Int64)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Double)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Nullable{System.DateTime})">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Nullable{System.Int64})">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Nullable{System.Double})">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableTimeSpan(System.Object)">
            <summary>
            ToNullableTimeSpan
            </summary>
            <param name="p">value to convert</param>
            <returns>TimeSpan? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.Guid)">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.String)">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.Data.SqlTypes.SqlString)">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.Type)">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.Byte[])">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToNullableGuid(System.Object)">
            <summary>
            ToNullableGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>Guid? that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.String)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.SByte)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Int16)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Int32)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Int64)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Byte)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.UInt16)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.UInt32)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.UInt64)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Single)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Double)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Boolean)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Decimal)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Char)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.TimeSpan)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.DateTime)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Guid)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Char[])">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.SByte})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Int16})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Int32})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Int64})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Byte})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.UInt16})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.UInt32})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.UInt64})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Single})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Double})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Boolean})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Decimal})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Char})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.TimeSpan})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.DateTime})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Nullable{System.Guid})">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlChars)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Type)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlString(System.Object)">
            <summary>
            ToSqlString
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlString that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Byte)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.String)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.SByte)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Int16)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Int32)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Int64)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.UInt16)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.UInt32)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.UInt64)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Single)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Double)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Decimal)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Char)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Boolean)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Byte})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.SByte})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Int16})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Int32})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Int64})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.UInt16})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.UInt32})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.UInt64})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Single})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Double})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Boolean})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Decimal})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Nullable{System.Char})">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlByte(System.Object)">
            <summary>
            ToSqlByte
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlByte that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Int16)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.String)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.SByte)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Int32)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Int64)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Byte)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.UInt16)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.UInt32)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.UInt64)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Single)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Double)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Decimal)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Char)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Boolean)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Int16})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.SByte})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Int32})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Int64})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Byte})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.UInt16})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.UInt32})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.UInt64})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Single})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Double})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Boolean})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Decimal})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Nullable{System.Char})">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt16(System.Object)">
            <summary>
            ToSqlInt16
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt16 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Int32)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.String)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.SByte)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Int16)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Int64)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Byte)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.UInt16)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.UInt32)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.UInt64)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Single)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Double)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Decimal)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Char)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Boolean)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Int32})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.SByte})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Int16})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Int64})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Byte})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.UInt16})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.UInt32})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.UInt64})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Single})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Double})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Boolean})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Decimal})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Nullable{System.Char})">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt32(System.Object)">
            <summary>
            ToSqlInt32
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt32 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Int64)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.String)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.SByte)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Int16)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Int32)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Byte)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.UInt16)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.UInt32)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.UInt64)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Single)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Double)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Decimal)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Char)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Boolean)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.DateTime)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.TimeSpan)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Int64})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.SByte})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Int16})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Int32})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Byte})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.UInt16})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.UInt32})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.UInt64})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Single})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Double})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Boolean})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Decimal})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.Char})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.DateTime})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Nullable{System.TimeSpan})">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlInt64(System.Object)">
            <summary>
            ToSqlInt64
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlInt64 that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Single)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.String)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.SByte)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Int16)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Int32)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Int64)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Byte)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.UInt16)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.UInt32)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.UInt64)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Double)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Decimal)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Char)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Boolean)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Single})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.SByte})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Int16})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Int32})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Int64})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Byte})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.UInt16})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.UInt32})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.UInt64})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Double})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Boolean})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Nullable{System.Decimal})">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlSingle(System.Object)">
            <summary>
            ToSqlSingle
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlSingle that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Double)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.String)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.SByte)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Int16)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Int32)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Int64)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Byte)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.UInt16)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.UInt32)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.UInt64)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Single)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Decimal)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Char)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Boolean)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.DateTime)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.TimeSpan)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Double})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.SByte})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Int16})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Int32})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Int64})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Byte})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.UInt16})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.UInt32})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.UInt64})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Single})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Boolean})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.Decimal})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.DateTime})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Nullable{System.TimeSpan})">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDouble(System.Object)">
            <summary>
            ToSqlDouble
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDouble that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Decimal)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.String)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.SByte)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Int16)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Int32)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Int64)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Byte)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.UInt16)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.UInt32)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.UInt64)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Single)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Double)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Char)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Boolean)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Decimal})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.SByte})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Int16})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Int32})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Int64})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Byte})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.UInt16})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.UInt32})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.UInt64})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Single})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Double})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Nullable{System.Boolean})">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDecimal(System.Object)">
            <summary>
            ToSqlDecimal
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDecimal that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Decimal)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.String)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.SByte)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Int16)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Int32)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Int64)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Byte)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.UInt16)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.UInt32)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.UInt64)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Single)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Double)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Char)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Boolean)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Decimal})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.SByte})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Int16})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Int32})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Int64})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Byte})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.UInt16})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.UInt32})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.UInt64})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Single})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Double})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Nullable{System.Boolean})">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlMoney(System.Object)">
            <summary>
            ToSqlMoney
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlMoney that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Boolean)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.String)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.SByte)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Int16)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Int32)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Int64)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Byte)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.UInt16)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.UInt32)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.UInt64)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Single)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Double)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Decimal)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Char)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Boolean})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.SByte})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Int16})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Int32})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Int64})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Byte})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.UInt16})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.UInt32})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.UInt64})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Single})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Double})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Decimal})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Nullable{System.Char})">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBoolean(System.Object)">
            <summary>
            ToSqlBoolean
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBoolean that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.String)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.DateTime)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.TimeSpan)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Int64)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Double)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Nullable{System.DateTime})">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Nullable{System.TimeSpan})">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Nullable{System.Int64})">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Nullable{System.Double})">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlDateTime(System.Object)">
            <summary>
            ToSqlDateTime
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlDateTime that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Guid)">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.String)">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Nullable{System.Guid})">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Data.SqlTypes.SqlBytes)">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Type)">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Byte[])">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlGuid(System.Object)">
            <summary>
            ToSqlGuid
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlGuid that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBinary(System.Byte[])">
            <summary>
            ToSqlBinary
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBinary that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBinary(System.Guid)">
            <summary>
            ToSqlBinary
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBinary that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBinary(System.Nullable{System.Guid})">
            <summary>
            ToSqlBinary
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBinary that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBinary(System.Data.SqlTypes.SqlBytes)">
            <summary>
            ToSqlBinary
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBinary that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBinary(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToSqlBinary
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBinary that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBinary(System.Object)">
            <summary>
            ToSqlBinary
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBinary that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBytes(System.Byte[])">
            <summary>
            ToSqlBytes
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBytes that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBytes(System.IO.Stream)">
            <summary>
            ToSqlBytes
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBytes that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBytes(System.Guid)">
            <summary>
            ToSqlBytes
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBytes that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBytes(System.Nullable{System.Guid})">
            <summary>
            ToSqlBytes
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBytes that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBytes(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToSqlBytes
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBytes that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBytes(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToSqlBytes
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBytes that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlBytes(System.Object)">
            <summary>
            ToSqlBytes
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlBytes that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.String)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Char[])">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.SByte)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Int16)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Int32)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Int64)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Byte)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.UInt16)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.UInt32)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.UInt64)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Single)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Double)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Boolean)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Decimal)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Char)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.TimeSpan)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.DateTime)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Guid)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.SByte})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Int16})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Int32})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Int64})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Byte})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.UInt16})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.UInt32})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.UInt64})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Single})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Double})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Boolean})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Decimal})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Char})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.TimeSpan})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.DateTime})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Nullable{System.Guid})">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlByte)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlInt16)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlInt32)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlInt64)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlSingle)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlDouble)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlMoney)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Type)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlChars(System.Object)">
            <summary>
            ToSqlChars
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlChars that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.String)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.IO.Stream)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Xml.XmlReader)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Char[])">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Byte[])">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Data.SqlTypes.SqlString)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Data.SqlTypes.SqlChars)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Data.SqlTypes.SqlBytes)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToSqlXml(System.Object)">
            <summary>
            ToSqlXml
            </summary>
            <param name="p">value to convert</param>
            <returns>SqlXml that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.String)">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.Char[])">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.Guid)">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.Nullable{System.Guid})">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.Data.SqlTypes.SqlString)">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.Data.SqlTypes.SqlChars)">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToType(System.Object)">
            <summary>
            ToType
            </summary>
            <param name="p">value to convert</param>
            <returns>Type that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToStream(System.Guid)">
            <summary>
            ToStream
            </summary>
            <param name="p">value to convert</param>
            <returns>Stream that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToStream(System.Byte[])">
            <summary>
            ToStream
            </summary>
            <param name="p">value to convert</param>
            <returns>Stream that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToStream(System.Nullable{System.Guid})">
            <summary>
            ToStream
            </summary>
            <param name="p">value to convert</param>
            <returns>Stream that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToStream(System.Data.SqlTypes.SqlBytes)">
            <summary>
            ToStream
            </summary>
            <param name="p">value to convert</param>
            <returns>Stream that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToStream(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToStream
            </summary>
            <param name="p">value to convert</param>
            <returns>Stream that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToStream(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToStream
            </summary>
            <param name="p">value to convert</param>
            <returns>Stream that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToStream(System.Object)">
            <summary>
            ToStream
            </summary>
            <param name="p">value to convert</param>
            <returns>Stream that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByteArray(System.IO.Stream)">
            <summary>
            ToByteArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByteArray(System.Guid)">
            <summary>
            ToByteArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByteArray(System.Nullable{System.Guid})">
            <summary>
            ToByteArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByteArray(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToByteArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByteArray(System.Data.SqlTypes.SqlBytes)">
            <summary>
            ToByteArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByteArray(System.Data.SqlTypes.SqlGuid)">
            <summary>
            ToByteArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToByteArray(System.Object)">
            <summary>
            ToByteArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Byte[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToCharArray(System.String)">
            <summary>
            ToCharArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Char[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToCharArray(System.Data.SqlTypes.SqlString)">
            <summary>
            ToCharArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Char[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToCharArray(System.Data.SqlTypes.SqlChars)">
            <summary>
            ToCharArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Char[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToCharArray(System.Object)">
            <summary>
            ToCharArray
            </summary>
            <param name="p">value to convert</param>
            <returns>Char[] that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.String)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.Data.SqlTypes.SqlString)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.Data.SqlTypes.SqlXml)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.Data.SqlTypes.SqlChars)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.Data.SqlTypes.SqlBinary)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.IO.Stream)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.IO.TextReader)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.Char[])">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.Byte[])">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="M:NLib.Utils.Converts.ToXmlReader(System.Object)">
            <summary>
            ToXmlReader
            </summary>
            <param name="p">value to convert</param>
            <returns>XmlReader that convert from parater value</returns>
        </member>
        <member name="T:NLib.Utils.NullableConvert`2">
            <summary>
            Nullable Convert (internal class).
            </summary>
            <typeparam name="T">Destination data type.</typeparam>
            <typeparam name="P">Source data type.</typeparam>
        </member>
        <member name="M:NLib.Utils.NullableConvert`2.FromNullable(System.Nullable{`1})">
            <summary>
            From Nullable.
            </summary>
            <param name="p">The parent.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.NullableConvert`2.From(`1)">
            <summary>
            From
            </summary>
            <param name="p">The parent.</param>
            <returns></returns>
        </member>
        <member name="T:NLib.Utils.Convert`2">
            <summary>
            Converts a base data type to another base data type.
            </summary>
            <typeparam name="P">Source data type.</typeparam>
            <typeparam name="T">Destination data type.</typeparam>
        </member>
        <member name="F:NLib.Utils.Convert`2.From">
            <summary>
             The Converter instance.
            </summary>
        </member>
        <member name="T:NLib.Utils.Convert`2.ConvertMethod">
            <summary>
            Represents a method that converts an object from one type to another type.
            </summary>
            <param name="p">A value to convert to the target type.</param>
            <returns>The <typeparamref name="T"/> that represents the converted <paramref name="p"/>.</returns>
        </member>
        <member name="M:NLib.Utils.Convert`2.FromArray(`1[])">
            <summary>Converts an array of one type to an array of another type.</summary>
            <returns>An array of the target type containing the converted elements from the source array.</returns>
            <param name="src">The one-dimensional, zero-based <see cref="T:System.Array"></see> to convert to a target type.</param>
            <exception cref="T:System.ArgumentNullException">array is null.-or-converter is null.</exception>
        </member>
        <member name="M:NLib.Utils.Convert`2.GetConverter">
            <summary>
             Initializes converter instance.
            </summary>
            <returns>Converter instance.</returns>
        </member>
        <member name="T:NLib.Utils.ConvertTo`1">
            <summary>
            Converts a base data type to another base data type.
            </summary>
            <typeparam name="T">Destination data type.</typeparam>
        </member>
        <member name="M:NLib.Utils.ConvertTo`1.From``1(``0)">
            <summary>Returns an <typeparamref name="T"/> whose value is equivalent to the specified value.</summary>
            <returns>The <typeparamref name="T"/> that represents the converted <paramref name="p"/>.</returns>
            <param name="p">A value to convert to the target type.</param>
        </member>
        <member name="T:NLib.Utils.EnumUtils">
            <summary>
            Enum DataType util
            </summary>
        </member>
        <member name="M:NLib.Utils.EnumUtils.GetDescription(System.Type,System.Object)">
            <summary>
            Get Enum Description
            </summary>
            <param name="enumDataType">Enum Type's insatance</param>
            <param name="value">Value in enumerate type</param>
            <returns>Description for specificed value</returns>
        </member>
        <member name="M:NLib.Utils.EnumUtils.GetDescription(System.Enum)">
            <summary>
            Get Enum Description
            </summary>
            <param name="value">Value in enumerate type</param>
            <returns>Description for specificed value</returns>
        </member>
        <member name="T:NLib.Utils.EnumDataSource">
            <summary>
            Enum Source Class
            </summary>
        </member>
        <member name="M:NLib.Utils.EnumDataSource.#ctor">
            <summary>
            hide Constructor
            </summary>
        </member>
        <member name="M:NLib.Utils.EnumDataSource.#ctor(System.Type,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="enumType">Enum Type</param>
            <param name="enumValue">Enum Field Value</param>
        </member>
        <member name="M:NLib.Utils.EnumDataSource.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="enumType">Enum Type</param>
            <param name="enumValue">Enum Field Value</param>
            <param name="enumDesc">Description for specificed emum's value</param>
        </member>
        <member name="P:NLib.Utils.EnumDataSource.Name">
            <summary>
            Get/Set Name
            </summary>
        </member>
        <member name="P:NLib.Utils.EnumDataSource.Description">
            <summary>
            Get/Set Destription
            </summary>
        </member>
        <member name="P:NLib.Utils.EnumDataSource.Value">
            <summary>
            Get/Set Value
            </summary>
        </member>
        <member name="M:NLib.Utils.EnumDataSource.ToDataSource(System.Type)">
            <summary>
            Create Enum DataSource
            </summary>
            <param name="enumDataType">Enum DataType</param>
            <returns>EnumDataSource Array that can bind to control with databinding</returns>
        </member>
        <member name="T:NLib.Utils.EnumFlagManager">
            <summary>
            Enum Flag Manager
            </summary>
        </member>
        <member name="M:NLib.Utils.EnumFlagManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Utils.EnumFlagManager.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Utils.EnumFlagManager.Size">
            <summary>
            Get Size of Enum Value
            </summary>
        </member>
        <member name="P:NLib.Utils.EnumFlagManager.EnumType">
            <summary>
            Get/Set Enum Type
            </summary>
        </member>
        <member name="M:NLib.Utils.EnumFlagManager.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.EnumFlagManager.FromString(System.String)">
            <summary>
            FromString
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NLib.Utils.EnumFlagManager.GetOnFlagNames">
            <summary>
            Get On Flag's Names
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.EnumFlagManager.GetOffFlagNames">
            <summary>
            Get Off Flag's Names
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLib.Utils.EnumFlagManager.Item(System.Object)">
            <summary>
            Indexer Access
            </summary>
        </member>
        <member name="T:NLib.Utils.FileUtils">
            <summary>
            File Utils.
            </summary>
        </member>
        <member name="M:NLib.Utils.FileUtils.GetFileHash(System.String)">
            <summary>
            Gets File Hash string.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>Returns string.Empty is something is invalid.</returns>
        </member>
        <member name="T:NLib.Utils.FrameworkUtils">
            <summary>
            The .NET Framework Utils class.
            </summary>
        </member>
        <member name="P:NLib.Utils.FrameworkUtils.NETRuntime">
            <summary>
            Gets .Net Framework Folder. Same as NLib.IO.Folders.OS.NETRuntime.
            </summary>
        </member>
        <member name="M:NLib.Utils.FrameworkUtils.Test">
            <summary>
            Test.
            </summary>
        </member>
        <member name="T:NLib.Utils.ImageUtils">
            <summary>
            Image Utils helper class.
            </summary>
        </member>
        <member name="M:NLib.Utils.ImageUtils.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.ImageUtils.GetImage(System.String)">
            <summary>
            Gets Image from file in byte array.
            </summary>
            <param name="fileName">The target file to load.</param>
            <returns>Returns image byte array.</returns>
        </member>
        <member name="M:NLib.Utils.ImageUtils.GetImage(System.Drawing.Image)">
            <summary>
            Gets Image from System.Drawing.Image in byte array.
            </summary>
            <param name="img">The instance of System.Drawing.Image.</param>
            <returns>Returns image byte array.</returns>
        </member>
        <member name="M:NLib.Utils.ImageUtils.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Get Image from embeded resource in byte array.
            </summary>
            <param name="assembly">The resource's assembly.</param>
            <param name="resourceName">
            The full resource name. The resource should set to Embeded Resource.
            </param>
            <returns>Returns image byte array.</returns>
        </member>
        <member name="M:NLib.Utils.ImageUtils.GetBitmapSource(System.Byte[])">
            <summary>
            Gets Bitmap Source from byte array.
            </summary>
            <param name="buffers">The image byte array.</param>
            <returns>
            Returns BitmapSource instance for binding with Image control.
            </returns>
        </member>
        <member name="M:NLib.Utils.ImageUtils.GetBitmapSource(System.Uri)">
            <summary>
            Gets bitmap source from Uri.
            </summary>
            <param name="uri">The source Uri.</param>
            <returns>
            Returns BitmapSource instance for binding with Image control.
            </returns>
        </member>
        <member name="M:NLib.Utils.ImageUtils.GrayScale(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Convert image to Gray Scale.
            </summary>
            <param name="image">The source image.</param>
            <returns>Returns Gray Scale BitmapSource.</returns>
        </member>
        <member name="T:NLib.Utils.NETTypeCache">
            <summary>
            NET Type Cache
            </summary>
        </member>
        <member name="P:NLib.Utils.NETTypeCache.Instance">
            <summary>
            Singelton Instance Access
            </summary>
        </member>
        <member name="M:NLib.Utils.NETTypeCache.FindType(System.String)">
            <summary>
            Find Type but not keep in cache
            </summary>
            <param name="typeName">Type name to find.</param>
            <returns>Returns match Type if found. Otherwise return null.</returns>
        </member>
        <member name="M:NLib.Utils.NETTypeCache.Contains(System.String)">
            <summary>
            Check is type is contains
            </summary>
            <param name="typeName">The Type name to checks.</param>
            <returns>Returns true if type is already in cache.</returns>
        </member>
        <member name="M:NLib.Utils.NETTypeCache.Add(System.Type)">
            <summary>
            Append type into hahs
            </summary>
            <param name="type">The type to add.</param>
        </member>
        <member name="P:NLib.Utils.NETTypeCache.Item(System.String)">
            <summary>
            Indexer access for Type.
            </summary>
            <param name="typeName">Type name to find.</param>
            <returns>Returns match Type if found. Otherwise return null.</returns>
        </member>
        <member name="T:NLib.Utils.DecimalUtils">
            <summary>
            Decimal Utils
            </summary>
        </member>
        <member name="M:NLib.Utils.DecimalUtils.ConvertToString(System.Decimal)">
            <summary>
            ConvertToString
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.DecimalUtils.GetProperValue(System.Decimal)">
            <summary>
            GetProperValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Utils.ResourceAccessAbstractOptions">
            <summary>
            Resource Access Abstract Options.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceAccessAbstractOptions.CallerType">
            <summary>
            Gets or sets caller type.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceAccessAbstractOptions.CallerAssembly">
            <summary>
            Gets the resource assembly based on Caller Type.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceAccessAbstractOptions.ResourceName">
            <summary>
            Gets or sets resource name.
            </summary>
        </member>
        <member name="T:NLib.Utils.ResourceStreamOptions">
            <summary>
            Resource Stream Options.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceStreamOptions.TargetPath">
            <summary>
            Gets or set target path.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceStreamOptions.TargetFileName">
            <summary>
            Gets or sets target file name.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceStreamOptions.TargetFullFileName">
            <summary>
            Gets the target full file name based on TargetPath and TargetFileName property.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceStreamOptions.IsValidFileName">
            <summary>
            Checks is required file's name properties is valid.
            </summary>
        </member>
        <member name="T:NLib.Utils.ResourceExecuteOptions">
            <summary>
            Resource Tool Execute Options.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceExecuteOptions.AutoCreate">
            <summary>
            Gets or sets auto create resource temp file before execute.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceExecuteOptions.AutoDelete">
            <summary>
            Gets or sets auto delete resource temp file after execute.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceExecuteOptions.ShowWindow">
            <summary>
            Gets or sets show application window or hidden it.
            </summary>
        </member>
        <member name="P:NLib.Utils.ResourceExecuteOptions.Argument">
            <summary>
            Gets or sets arguments for executing target file name.
            </summary>
        </member>
        <member name="T:NLib.Utils.ResourceAccess">
            <summary>
            IResourceAccess interface.
            </summary>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">True if in disposing process.</param>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.GetStream(NLib.Utils.ResourceStreamOptions)">
            <summary>
            Get Stream by specificed option.
            </summary>
            <param name="option">The resouce stream option.</param>
            <returns>Return Null if not found and Return Target Resource Stream is found</returns>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.GetImage(NLib.Utils.ResourceStreamOptions)">
            <summary>
            Get Stream by specificed option.
            </summary>
            <param name="option">The resouce stream option.</param>
            <returns>Return Null if not found and Return Target Resource Stream is found</returns>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.CreateFile(NLib.Utils.ResourceStreamOptions)">
            <summary>
            Create File from resource name.
            </summary>
            <param name="option">The resouce stream option.</param>
            <returns>
            Returns true if file is successfully extract from resource and save into file.
            </returns>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.DeleteFile(NLib.Utils.ResourceStreamOptions)">
            <summary>
            Delete File.
            </summary>
            <param name="option">The resouce stream option.</param>
            <returns>Returns true if file is not exists or successfully deleted.</returns>
        </member>
        <member name="M:NLib.Utils.ResourceAccess.Execute(NLib.Utils.ResourceExecuteOptions)">
            <summary>
            Execute application in hidden or background process and wail until finished.
            </summary>
            <param name="option">The resouce tool execute option.</param>
        </member>
        <member name="P:NLib.Utils.ResourceAccess.ShowException">
            <summary>
            Get/Set to show exception
            </summary>
        </member>
        <member name="T:NLib.Utils.WindowFormsResourceAccess">
            <summary>
            WindowFormsResourceAccess class.
            </summary>
        </member>
        <member name="M:NLib.Utils.WindowFormsResourceAccess.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.WindowFormsResourceAccess.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.WindowFormsResourceAccess.GetStream(NLib.Utils.ResourceStreamOptions)">
            <summary>
            Get Stream by specificed option.
            </summary>
            <param name="option">The resouce stream option.</param>
            <returns>Return Null if not found and Return Target Resource Stream is found</returns>
        </member>
        <member name="M:NLib.Utils.WindowFormsResourceAccess.GetImage(NLib.Utils.ResourceStreamOptions)">
            <summary>
            Get Stream by specificed option.
            </summary>
            <param name="option">The resouce stream option.</param>
            <returns>Return Null if not found and Return Target Resource Stream is found</returns>
        </member>
        <member name="P:NLib.Utils.WindowFormsResourceAccess.Assembly">
            <summary>
            Gets or sets assembly that contains resource.
            </summary>
        </member>
        <member name="T:NLib.Utils.WPFResourceAccess">
            <summary>
            WPFResourceAccess class.
            </summary>
        </member>
        <member name="M:NLib.Utils.WPFResourceAccess.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Utils.WPFResourceAccess.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Utils.WPFResourceAccess.Assembly">
            <summary>
            Gets or sets assembly that contains resource.
            </summary>
        </member>
        <member name="T:NLib.Utils.Radix">
            <summary>
            Radix Class. This class used to change numeric base in String Utils class
            </summary>
        </member>
        <member name="M:NLib.Utils.Radix.ChangeBase(System.UInt32,System.UInt32)">
            <summary>
            Change Base
            </summary>
            <param name="value">Value to change base</param>
            <param name="baseVal">target base value</param>
            <returns>array of value in target base</returns>
        </member>
        <member name="T:NLib.Utils.NumberToThai">
            <summary>
            Number To Thai
            </summary>
        </member>
        <member name="M:NLib.Utils.NumberToThai.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Utils.NumberToThai.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Utils.NumberToThai.Parse(System.Decimal)">
            <summary>
            Parse to string.
            </summary>
            <param name="value">The value to parse.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Utils.NumberToThai.Parse(System.String)">
            <summary>
            Parse to string.
            </summary>
            <param name="Input">The value to parse.</param>
            <returns></returns>
        </member>
        <member name="T:NLib.Utils.StringUtils">
            <summary>
            String Utils
            </summary>
        </member>
        <member name="M:NLib.Utils.StringUtils.IsNumber(System.String)">
            <summary>
            Checks string is Number.
            </summary>
            <param name="value">Value to check.</param>
            <returns>true if value can convert to number.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.IsNumber(System.String,System.Globalization.NumberStyles)">
            <summary>
            Checks string is Number.
            </summary>
            <param name="value">Value to check.</param>
            <param name="style">specificed numeric style.</param>
            <returns>true if value can convert to number.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.IsInteger(System.String)">
            <summary>
            Checks string is Integer.
            </summary>
            <param name="value">Value to check.</param>
            <returns>true if value can convert to Integer.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.IsInteger(System.String,System.Globalization.NumberStyles)">
            <summary>
            Checks string is Integer.
            </summary>
            <param name="value">Value to check.</param>
            <param name="style">specificed numeric style.</param>
            <returns>true if value can convert to Integer.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.IsBool(System.String)">
            <summary>
            Checks string is boolean.
            </summary>
            <param name="value">Value to check.</param>
            <returns>true if value can convert to Boolean.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.IsBool(System.String,System.String[],System.String[])">
            <summary>
            Checks string is boolean.
            </summary>
            <param name="value">Value to check</param>
            <param name="trueValues">value array for true value checking.</param>
            <param name="falseValues">value array for false value checking.</param>
            <returns>true if value can convert to Boolean.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.CanConvertTo(System.Object,System.Type)">
            <summary>
            Checks can convert to specificed type.
            </summary>
            <param name="value">value to convert</param>
            <param name="targetType">target type</param>
            <returns>true if value can convert to target type. otherwise return false</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.ToExcelName(System.Int32)">
            <summary>
            ToExcelName
            </summary>
            <param name="index">index to convert</param>
            <returns>Converted String</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.ToHex(System.Int32)">
            <summary>
            ToHex
            </summary>
            <param name="index">index to convert</param>
            <returns>Converted String</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.Concat(System.String,System.Object[])">
            <summary>
            Concat object array to string
            </summary>
            <param name="delimeter">Delimeter that need to append between each object</param>
            <param name="values">object array</param>
            <returns>string that concat from all object in specificed parameters</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.ToThaiCurrency(System.String)">
            <summary>
            To Thai Currency.
            </summary>
            <param name="value">Numeric Value to parse</param>
            <returns>Thai Currency string.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.ToThaiCurrency(System.Int32)">
            <summary>
            To Thai Currency.
            </summary>
            <param name="value">Decimal Value to parse</param>
            <returns>Thai Currency string.</returns>
        </member>
        <member name="M:NLib.Utils.StringUtils.ToThaiCurrency(System.Decimal)">
            <summary>
            To Thai Currency.
            </summary>
            <param name="value">Decimal Value to parse</param>
            <returns>Thai Currency string.</returns>
        </member>
        <member name="T:NLib.Logs.LogConfigManager">
            <summary>
            Log Config Manager. Used internal.
            </summary>
        </member>
        <member name="P:NLib.Logs.LogConfigManager.Instance">
            <summary>
            Singelton Access Instance.
            </summary>
        </member>
        <member name="M:NLib.Logs.LogConfigManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Logs.LogConfigManager.LoadConfig">
            <summary>
            Load Config.
            </summary>
        </member>
        <member name="M:NLib.Logs.LogConfigManager.SaveConfig">
            <summary>
            Save Config.
            </summary>
        </member>
        <member name="P:NLib.Logs.LogConfigManager.Config">
            <summary>
            Gets the config instance.
            </summary>
        </member>
        <member name="T:NLib.Logs.ILogWtiter">
            <summary>
            ILogWtiter Interface
            </summary>
        </member>
        <member name="M:NLib.Logs.ILogWtiter.WriteLine(System.String)">
            <summary>
            Write message.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="T:NLib.Logs.LogWriter">
            <summary>
            Abstract Log Writer
            </summary>
        </member>
        <member name="M:NLib.Logs.LogWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Logs.LogWriter.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:NLib.Logs.LogConsoleWriter">
            <summary>
            Log Console Writer
            </summary>
        </member>
        <member name="M:NLib.Logs.LogConsoleWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Logs.LogConsoleWriter.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Logs.LogConsoleWriter.WriteLine(System.String)">
            <summary>
            WriteLine
            </summary>
            <param name="message">Message to Write</param>
        </member>
        <member name="T:NLib.Logs.LogTextFileWriter">
            <summary>
            Log Text File Writer
            </summary>
        </member>
        <member name="M:NLib.Logs.LogTextFileWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Logs.LogTextFileWriter.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Logs.LogTextFileWriter.WriteLine(System.String)">
            <summary>
            WriteLine
            </summary>
            <param name="message">Message to Write</param>
        </member>
        <member name="P:NLib.Logs.LogTextFileWriter.FullFileName">
            <summary>
            Gets or sets Full File's Name
            </summary>
        </member>
        <member name="T:NLib.Logs.LogManager">
            <summary>
            Log Manager
            </summary>
        </member>
        <member name="P:NLib.Logs.LogManager.Instance">
            <summary>
            Singelton Access Instance.
            </summary>
        </member>
        <member name="M:NLib.Logs.LogManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Logs.LogManager.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Logs.LogManager.Write(NLib.NDebugInfo)">
            <summary>
            Write Information message to log
            </summary>
            <param name="info">The debug info</param>
        </member>
        <member name="M:NLib.Logs.LogManager.Start">
            <summary>
            Start service.
            </summary>
        </member>
        <member name="M:NLib.Logs.LogManager.Shutdown(System.Boolean)">
            <summary>
            Shutdown service.
            </summary>
            <param name="autoSaveConfig">True for auto save configuration when shutdown.</param>
        </member>
        <member name="M:NLib.Logs.LogManager.WriteEventLog(System.String,System.Exception,System.String)">
            <summary>
            Write Event Log.
            </summary>
            <param name="sourceName">The evenlog source name.</param>
            <param name="ex">The exception instance.</param>
            <param name="logName">The log name default is Application.</param>
        </member>
        <member name="P:NLib.Logs.LogManager.Config">
            <summary>
            Gets the config instance.
            </summary>
        </member>
        <member name="T:NLib.Configs.LogFileGenerateMode">
            <summary>
            Log File Generate Mode.
            </summary>
        </member>
        <member name="F:NLib.Configs.LogFileGenerateMode.Start">
            <summary>
            Generate file when application is start.
            </summary>
        </member>
        <member name="F:NLib.Configs.LogFileGenerateMode.Daily">
            <summary>
            Generate file when date changed.
            </summary>
        </member>
        <member name="T:NLib.Configs.LogFormat">
            <summary>
            Log Format.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFormat.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFormat.GetLogMessage(NLib.NDebugInfo)">
            <summary>
            Get Log Message.
            </summary>
            <param name="info">The debug info</param>
            <returns>Retruns list of format string that used for write to log output.</returns>
        </member>
        <member name="P:NLib.Configs.LogFormat.Value">
            <summary>
            Gets or sets log format. 
            The support format is contains 
            $type$ for display log type sach as Info, Error.
            $thread$ for display current thread id.
            $classname$ for display the class name.
            $methodname$ for display method name.
            $linetype$ for [+] or [ ] in case that the messsage is contain new line so the [+] will display at first line.
            $message$ for display the message.
            </summary>
        </member>
        <member name="T:NLib.Configs.LogFilter">
            <summary>
            Log Filter.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="key">The key.</param>
            <param name="enable">Is enable.</param>
        </member>
        <member name="M:NLib.Configs.LogFilter.Equals(System.Object)">
            <summary>
            Equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Configs.LogFilter.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLib.Configs.LogFilter.Key">
            <summary>
            Gets or sets is type's name.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFilter.Enable">
            <summary>
            Gets or sets is enable or disable log for specificed key.
            </summary>
        </member>
        <member name="T:NLib.Configs.LogFilterCollection">
            <summary>
            Log Filter Collection.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.Add(NLib.Configs.LogFilter)">
            <summary>
            Add LogTypeFilter instance into Collection.
            </summary>
            <param name="value">The LogTypeFilter instance.</param>
            <returns>Returns index of added LogTypeFilter.</returns>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.AddRange(NLib.Configs.LogFilter[])">
            <summary>
            Add array of LogTypeFilter into collections.
            </summary>
            <param name="values">The array of LogTypeFilter.</param>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.Remove(NLib.Configs.LogFilter)">
            <summary>
            Remove LogTypeFilter from Collection.
            </summary>
            <param name="value">The LogTypeFilter instance to remove.</param>
        </member>
        <member name="P:NLib.Configs.LogFilterCollection.Item(System.Int32)">
            <summary>
            Indexer to access LogTypeFilter instance.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.ToArray">
            <summary>
            Export all LogTypeFilter in collection to Array.
            </summary>
            <returns>Returns array of LogTypeFilter.</returns>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.GetByKey(System.String)">
            <summary>
            Get By Key.
            </summary>
            <param name="key">The Key to check.</param>
            <returns>Returns LogTypeFilter that match key.</returns>
        </member>
        <member name="M:NLib.Configs.LogFilterCollection.IsEnable(System.String)">
            <summary>
            Check Is Enable.
            </summary>
            <param name="key">The Key to check.</param>
            <returns>Returns true if key is exists in collection and set as enable.</returns>
        </member>
        <member name="T:NLib.Configs.LogFilterOptions">
            <summary>
            Log Filter Options.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilterOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilterOptions.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFilterOptions.Add(NLib.Configs.LogFilter)">
            <summary>
            Add LogTypeFilter instance into Collection.
            </summary>
            <param name="value">The LogTypeFilter instance.</param>
            <returns>Returns index of added LogTypeFilter.</returns>
        </member>
        <member name="M:NLib.Configs.LogFilterOptions.GetByKey(System.String)">
            <summary>
            Get By Key.
            </summary>
            <param name="key">The Key to check.</param>
            <returns>Returns LogTypeFilter that match key.</returns>
        </member>
        <member name="M:NLib.Configs.LogFilterOptions.IsEnable(System.String)">
            <summary>
            Check Is Enable.
            </summary>
            <param name="key">The Key to check.</param>
            <returns>Returns true if key is exists in collection and set as enable.</returns>
        </member>
        <member name="P:NLib.Configs.LogFilterOptions.AutoEnable">
            <summary>
            Gets or sets is auto enable.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFilterOptions.Filters">
            <summary>
            Get Log Filters.
            </summary>
        </member>
        <member name="T:NLib.Configs.LogFileConfig">
            <summary>
            Log File Configuration.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFileConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogFileConfig.Write(NLib.NDebugInfo)">
            <summary>
            Write Information message to all log.
            </summary>
            <param name="info">The debug info</param>
        </member>
        <member name="P:NLib.Configs.LogFileConfig.Prefix">
            <summary>
            Gets or sets file prefix. Default is app.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFileConfig.Enable">
            <summary>
            Gets or sets is log enable or disable.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFileConfig.Mode">
            <summary>
            Gets or sets log file generate mode.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFileConfig.FileSize">
            <summary>
            Gets or sets File Size. Default is 10 MB. This value used when mode is Start.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFileConfig.FileLimit">
            <summary>
            Gets or sets File Limit. Default is 10.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFileConfig.Format">
            <summary>
            Gets or sets Log format.
            </summary>
        </member>
        <member name="P:NLib.Configs.LogFileConfig.FilterOptions">
            <summary>
            Gets or sets is log filters options.
            </summary>
        </member>
        <member name="T:NLib.Configs.LogConfig">
            <summary>
            Log Config.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogConfig.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Configs.LogConfig.Write(NLib.NDebugInfo)">
            <summary>
            Write Information message to all logs
            </summary>
            <param name="info">The debug info</param>
        </member>
        <member name="P:NLib.Configs.LogConfig.FileConfigs">
            <summary>
            Gets or sets log file config list.
            </summary>
        </member>
        <member name="T:NLib.IO.NFolder">
            <summary>
            The NFolder class. This class provide wrapper function to access and work with
            application folder. This class is non serialized.
            </summary>
        </member>
        <member name="M:NLib.IO.NFolder.#ctor">
            <summary>
            Constructor. (Hide).
            </summary>
        </member>
        <member name="M:NLib.IO.NFolder.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:NLib.IO.NFolder.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.IO.NFolder.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns>Returns the hash code value.</returns>
        </member>
        <member name="M:NLib.IO.NFolder.Equals(System.Object)">
            <summary>
            Equals.
            </summary>
            <param name="obj">An object instance to compare.</param>
            <returns>Returns true if object is equals.</returns>
        </member>
        <member name="M:NLib.IO.NFolder.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents the key pair value.</returns>
        </member>
        <member name="M:NLib.IO.NFolder.IsParentExists">
            <summary>
            Check parent and auto create if required.
            </summary>
            <returns>Returns true if parent folder is exists.</returns>
        </member>
        <member name="M:NLib.IO.NFolder.Create">
            <summary>
            Create the current folder.
            </summary>
            <returns>Returns true if folder is create and can grant access by current user.</returns>
        </member>
        <member name="P:NLib.IO.NFolder.Item(System.String,System.Boolean)">
            <summary>
            Access sub folders.
            </summary>
            <param name="path">The sub folder name.</param>
            <param name="autoCreate">True for auto create if not exists.</param>
            <returns>Returns NFolder's instance for specificed sub folder.</returns>
        </member>
        <member name="M:NLib.IO.NFolder.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>
            Gets File System Infos.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>Returns array of file system in current folder.</returns>
        </member>
        <member name="M:NLib.IO.NFolder.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Gets Files.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>Returns array of file in current folder.</returns>
        </member>
        <member name="M:NLib.IO.NFolder.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Gets Directories.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>Returns array of directory in current folder.</returns>
        </member>
        <member name="P:NLib.IO.NFolder.Parent">
            <summary>
            Gets the Parent full path's name.
            </summary>
        </member>
        <member name="P:NLib.IO.NFolder.Name">
            <summary>
            Gets the Path's name. This is the sub folder in parent folder.
            </summary>
        </member>
        <member name="P:NLib.IO.NFolder.FullName">
            <summary>
            Gets the Full Path Name.
            </summary>
        </member>
        <member name="P:NLib.IO.NFolder.IsExists">
            <summary>
            Checks is folder exists.
            </summary>
        </member>
        <member name="M:NLib.IO.NFolder.Folder(System.String,System.Boolean)">
            <summary>
            Create new folder access object.
            </summary>
            <param name="path">The folder full path name.</param>
            <param name="createIfNotExits">Auto create if not exists.</param>
            <returns>Returns new NFolder instance for specificed path.</returns>
        </member>
        <member name="T:NLib.IO.BitwiseOps">
            <summary>
            Bitwise Operation class. Provide functions for bitwise operations
            and memory's buffer functions.
            </summary>
        </member>
        <member name="M:NLib.IO.BitwiseOps.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.Collections.BitArray)">
            <summary>
            To Binary String.
            </summary>
            <param name="bits">The source bit array.</param>
            <returns>Returns binary string that represents the value in bit array.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.Byte)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.SByte)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.UInt16)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.Int16)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.UInt32)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.Int32)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.UInt64)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToString(System.Int64)">
            <summary>
            To Binary String.
            </summary>
            <param name="value">The source value.</param>
            <returns>Returns binary string that represents the value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.Byte)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.SByte)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.Int16)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.UInt16)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.Int32)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.UInt32)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.Int64)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToBitArray(System.UInt64)">
            <summary>
            Convert value To BitArray.
            </summary>
            <param name="value">The source value to convert.</param>
            <returns>
            Returns bit array that fill with bool values that match source value.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToByte(System.String)">
            <summary>
            Convert string to Byte.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns Byte value that convert from string. 
            If error occur the zero value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToByte(System.String,System.Byte)">
            <summary>
            Convert string to Byte.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns Byte value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToSByte(System.String)">
            <summary>
            Convert string to SByte.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns SByte value that convert from string. 
            If error occur the zero value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToSByte(System.String,System.SByte)">
            <summary>
            Convert string to SByte.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns SByte value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToUInt16(System.String)">
            <summary>
            Convert string to UInt16.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns UInt16 value that convert from string. 
            If error occur the zero value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToUInt16(System.String,System.UInt16)">
            <summary>
            Convert string to UInt16.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns UInt16 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToInt16(System.String)">
            <summary>
            Convert string to Int16.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns Int16 value that convert from string. 
            If error occur the zero value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToInt16(System.String,System.Int16)">
            <summary>
            Convert string to Int16.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns Int16 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToUInt32(System.String)">
            <summary>
            Convert string to UInt32.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns UInt32 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToUInt32(System.String,System.UInt32)">
            <summary>
            Convert string to UInt32.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns UInt32 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToInt32(System.String)">
            <summary>
            Convert string to Int32.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns Int32 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToInt32(System.String,System.Int32)">
            <summary>
            Convert string to Int32.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns Int32 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToUInt64(System.String)">
            <summary>
            Convert string to UInt64.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns UInt64 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToUInt64(System.String,System.UInt64)">
            <summary>
            Convert string to UInt64.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns UInt64 value that convert from string. 
            If error occur the zero value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToInt64(System.String)">
            <summary>
            Convert string to Int64.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            Returns Int64 value that convert from string. 
            If error occur the zero value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.ToInt64(System.String,System.Int64)">
            <summary>
            Convert string to Int64.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns Int64 value that convert from string. 
            If error occur the default value will return.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.Byte,System.UInt32)">
            <summary>
            Rotate right operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.SByte,System.UInt32)">
            <summary>
            Rotate right operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.UInt16,System.UInt32)">
            <summary>
            Rotate right operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.Int16,System.UInt32)">
            <summary>
            Rotate right operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.UInt32,System.UInt32)">
            <summary>
            Rotate right operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.Int32,System.UInt32)">
            <summary>
            Rotate right operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.UInt64,System.UInt32)">
            <summary>
            Rotate right operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.Int64,System.UInt32)">
            <summary>
            Rotate right operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate right from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Ror(System.Byte[],System.UInt32)">
            <summary>
            Rotate right operation on byte array.
            </summary>
            <param name="values">The source value array.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>
            Returns array of byte that each byte rotate right bit from source array.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.Byte,System.UInt32)">
            <summary>
            Rotate left operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.SByte,System.UInt32)">
            <summary>
            Rotate left operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.UInt16,System.UInt32)">
            <summary>
            Rotate left operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.Int16,System.UInt32)">
            <summary>
            Rotate left operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.UInt32,System.UInt32)">
            <summary>
            Rotate left operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.Int32,System.UInt32)">
            <summary>
            Rotate left operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.UInt64,System.UInt32)">
            <summary>
            Rotate left operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.Int64,System.UInt32)">
            <summary>
            Rotate left operation.
            Please beware sign flag will cause rotate value misplace.
            </summary>
            <param name="value">The source value.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>Returns bit rotate left from source value.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Rol(System.Byte[],System.UInt32)">
            <summary>
            Rotate left operation on byte array.
            </summary>
            <param name="values">The source value array.</param>
            <param name="nums">The number of bit to rotate.</param>
            <returns>
            Returns array of byte that each byte rotate left bit from source array.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Xor(System.Byte,System.Byte)">
            <summary>
            Xor with specificed mask.
            </summary>
            <param name="value">The source value.</param>
            <param name="mask">The mask value.</param>
            <returns>Returns result of value xor with mask.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.Xor(System.Byte[],System.Byte[])">
            <summary>
            Xor byte array with mask array.
            </summary>
            <param name="values">The byte array to mask.</param>
            <param name="masks">The mask array.</param>
            <returns>
            Returns byte array that generated from value array that xor with mask array.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.CreateByteArray(System.UInt32)">
            <summary>
            Create byte array.
            </summary>
            <param name="size">Size of block in bytes.</param>
            <returns>
            Returns byte array that fill with zero value.
            If error occur null value returns.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.CreateByteArray(System.UInt32,System.Byte)">
            <summary>
            Create byte array.
            </summary>
            <param name="size">Size of block in bytes.</param>
            <param name="defaultValue">The default value on each byte.</param>
            <returns>
            Returns byte array that fill with default value.
            If error occur null value returns.
            </returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.FillByteArray(System.Byte[],System.Byte)">
            <summary>
            Fill byte array with specificed value.
            </summary>
            <param name="buffers">The byte array to fill.</param>
            <param name="value">The value to fill.</param>
            <returns>Returns number of byte fill. If error -1 returns.</returns>
        </member>
        <member name="M:NLib.IO.BitwiseOps.CreateRandomByteArray(System.UInt32)">
            <summary>
            Create Byte array with fill with random value.
            </summary>
            <param name="size">Size of block in bytes.</param>
            <returns>
            Returns byte array that fill with random value.
            If error occur null value returns.
            </returns>
        </member>
        <member name="T:NLib.IO.Files">
            <summary>
            Files utility class.
            </summary>
        </member>
        <member name="M:NLib.IO.Files.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Files.Create(System.String,System.Boolean)">
            <summary>
            Create New Empty File.
            </summary>
            <param name="fileName">The File's Name.</param>
            <param name="replace">True if file is already exists and force to replace it.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="M:NLib.IO.Files.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Move or rename file with can access by all users.
            </summary>
            <param name="sourceFileName">The source file's name.</param>
            <param name="targetFileName">The target file's name.</param>
            <param name="overwrite">True to force overwrite file.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="M:NLib.IO.Files.Move(System.String,System.String)">
            <summary>
            Move or rename file with can access by all users.
            </summary>
            <param name="sourceFileName">The file's name to rename or move.</param>
            <param name="newFileName">The new file's name to rename or move.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="M:NLib.IO.Files.Delete(System.String)">
            <summary>
            Delete File.
            </summary>
            <param name="fileName">The File's Name.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="M:NLib.IO.Files.Exists(System.String)">
            <summary>
            Checks is file is exists.
            </summary>
            <param name="fileName">The file's name.</param>
            <returns>Returns true if file is exists.</returns>
        </member>
        <member name="M:NLib.IO.Files.Grant(System.String,System.Security.Principal.SecurityIdentifier)">
            <summary>
            Grant permission to public access to target file.
            </summary>
            <param name="fileName">The target file name.</param>
            <param name="identity">The target identity default is NT User.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="T:NLib.IO.Folders">
            <summary>
            Folders utility class.
            </summary>
        </member>
        <member name="T:NLib.IO.Folders.OS">
            <summary>
            Access various Window's common system folders.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.OS.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.OS.GetDirectories">
            <summary>
            Get Wellknown Windows's directories.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLib.IO.Folders.OS.SystemDirectory">
            <summary>
            Get System Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.OS.Windows">
            <summary>
            Get Windows Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.OS.ProgramFiles">
            <summary>
            Get Program Files Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.OS.CommonProgramFiles">
            <summary>
            Get Common Program Files Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.OS.NETRuntime">
            <summary>
            Gets the directory that .NET Runtime is installed. 
            Used for access .NET framework tools.
            </summary>
        </member>
        <member name="T:NLib.IO.Folders.Users">
            <summary>
            Access various Common User's folders.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.Users.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.Users.GetDirectories">
            <summary>
            Get Wellknown User's directories.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLib.IO.Folders.Users.Desktop">
            <summary>
            Get Desktop Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Users.StartMenu">
            <summary>
            Get Start Menu Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Users.Startup">
            <summary>
            Get User's Startup Program Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Users.MyDocuments">
            <summary>
            Get the My Documents directory.
            This directory is user's "My Documents" folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Users.LocalData">
            <summary>
            Get the Local Application Data Directory.
            This directory used for stores app data for users on that machine and 
            use for non-roaming users or for machine-specific config.
            This is the directory for the current user that is only available 
            when logged on to this machine. Note Micorsoft expert is recommend 
            to used this directory to keep application data and config.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Users.RoamingData">
            <summary>
            Get the Roaming Application Data Directory.
            This directory used for stores app data for that user and 
            can be used with roaming profiles. This is the directory for the current user, 
            shared by all machines on the network. 
            </summary>
        </member>
        <member name="T:NLib.IO.Folders.Locals">
            <summary>
            Access various Local application's common folders.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.Locals.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.Locals.GetDirectories">
            <summary>
            Get Wellknown Application's directories.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLib.IO.Folders.Locals.CommonAppData">
            <summary>
            Get the Common Application Data Directory. 
            This directory used for stores app data common ALL users on that machine like 
            (DB connection information, logging settings, etc).
            This is the directory for storing information that is shared by all users 
            on all machines. 
            </summary>
        </member>
        <member name="T:NLib.IO.Folders.Assemblies">
            <summary>
            Access various Assemblies information.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.Assemblies.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.Assemblies.GetDirectories">
            <summary>
            Get Wellknown Application's directories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLib.IO.Folders.Assemblies.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
            Get Assembly Directory.
            </summary>
            <param name="callingAssembly">The calling assembly.</param>
            <returns>Return assembly full directory's name.</returns>
        </member>
        <member name="M:NLib.IO.Folders.Assemblies.GetAssemblyFileNameWithoutExtension(System.Reflection.Assembly)">
            <summary>
            Get Assembly File Name without extension (not inclide path).
            </summary>
            <param name="callingAssembly">The calling assembly.</param>
            <returns>Return assembly full file's name without extension.</returns>
        </member>
        <member name="M:NLib.IO.Folders.Assemblies.GetAssemblyFileName(System.Reflection.Assembly)">
            <summary>
            Get Assembly File Name with extension (not inclide path).
            </summary>
            <param name="callingAssembly">The calling assembly.</param>
            <returns>Return assembly full file's name.</returns>
        </member>
        <member name="P:NLib.IO.Folders.Assemblies.CurrentExecutingAssembly">
            <summary>
            Get Current Executing Assembly Directory.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Assemblies.FullName">
            <summary>
            Get Application Location Directory (where the .exe is stored).
            For .dll used GetApplicationSettingDirectory instead.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Assemblies.FileNameOnly">
            <summary>
            Get Application File Name (.exe) Without Extension.
            </summary>
        </member>
        <member name="P:NLib.IO.Folders.Assemblies.FileName">
            <summary>
            Get Application File Name (.exe) with Extension.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Folders.Create(System.String)">
            <summary>
            Create Folder with can access by all users.
            </summary>
            <param name="pathName">The path or directory's name.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="M:NLib.IO.Folders.Delete(System.String)">
            <summary>
            Delete Folder.
            </summary>
            <param name="pathName">The path or directory's name.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="M:NLib.IO.Folders.Exists(System.String)">
            <summary>
            Checks is directory is exists.
            </summary>
            <param name="pathName">The path or directory's name.</param>
            <returns>Returns true if path or directory is exists.</returns>
        </member>
        <member name="M:NLib.IO.Folders.Grant(System.String,System.Security.Principal.SecurityIdentifier)">
            <summary>
            Grant permission to public access to target path and it's sub directories.
            </summary>
            <param name="pathName">The target path name.</param>
            <param name="identity">The target identity default is NT User.</param>
            <returns>Returns result of operation.</returns>
        </member>
        <member name="M:NLib.IO.Folders.GetDirectoryName(System.String)">
            <summary>
            Get the directory's name from specificed path string.
            </summary>
            <param name="path">The path string.</param>
            <returns>Returns the directory information for the specificed path string.</returns>
        </member>
        <member name="M:NLib.IO.Folders.GetFileName(System.String)">
            <summary>
            Get the file's name from specificed path string.
            </summary>
            <param name="path">The path string.</param>
            <returns>Returns file's name with extension from specificed path string.</returns>
        </member>
        <member name="M:NLib.IO.Folders.GetFileNameWithoutExtension(System.String)">
            <summary>
            Get the file's name without extenstion from specificed path string.
            </summary>
            <param name="path">The path string.</param>
            <returns>Returns file's name without extenstion from specificed path string.</returns>
        </member>
        <member name="M:NLib.IO.Folders.GetExtension(System.String)">
            <summary>
            Get the file's extension from specificed path string.
            </summary>
            <param name="path">The path string.</param>
            <returns>Returns file's extension from specificed path string.</returns>
        </member>
        <member name="M:NLib.IO.Folders.Combine(System.String,System.String)">
            <summary>
            Combine two path string.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>Returns the combined path.</returns>
        </member>
        <member name="T:NLib.IO.Security.LogonType">
            <summary>
            Logon Type.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonType.Interactive">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonType.Network">
            <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonType.Batch">
            <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonType.Service">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonType.Unlock">
            <summary>
            This logon type is for GINA DLLs that log on users who will be interactively using the computer.
            This logon type can generate a unique audit record that shows when the workstation was unlocked.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonType.NetworkCleartText">
            <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonType.NewCredentials">
            <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.LogonProvider">
            <summary>
            Logon Provider.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.LogonProvider.Default">
            <summary>
            Use the standard logon provider for the system.
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.BuiltinUser">
            <summary>
            Builtin User.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.BuiltinUser.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.BuiltinUser.LocalService">
            <summary>
            Local Service.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.BuiltinUser.NetworkService">
            <summary>
            Network Service.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.ImpersonationResult">
            <summary>
            Impersonation Result. The result class for LogOn process.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.ImpersonationResult.Success">
            <summary>
            True if success.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.ImpersonationResult.Error">
            <summary>
            Gets the error returns from API when not success.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.ImpersonationResult.CurrentUser">
            <summary>
            Gets to current impersonation user.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.ImpersonationUser">
            <summary>
            An impersonation class (modified from http://born2code.net/?page_id=45) that supports 
            LocalService and NetworkService logons.
            Note: To use these built-in logons the code must be running under the local system account.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A handle to an open object.</param>
            <returns><c>True</c> when succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.LogonUser(System.String,System.String,System.String,NLib.IO.Security.LogonType,NLib.IO.Security.LogonProvider,System.IntPtr@)">
            <summary>
            Attempts to log a user on to the local computer.
            </summary>
            <param name="username">This is the name of the user account to log on to. 
            If you use the user principal name (UPN) format, user@DNSdomainname, the 
            domain parameter must be <c>null</c>.</param>
            <param name="domain">Specifies the name of the domain or server whose 
            account database contains the lpszUsername account. If this parameter 
            is <c>null</c>, the user name must be specified in UPN format. If this 
            parameter is ".", the function validates the account by using only the 
            local account database.</param>
            <param name="password">The password</param>
            <param name="logonType">The logon type</param>
            <param name="logonProvider">The logon provides</param>
            <param name="userToken">The out parameter that will contain the user 
            token when method succeeds.</param>
            <returns><c>True</c> when succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.DuplicateToken(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Creates a new access token that duplicates one already in existence.
            </summary>
            <param name="token">Handle to an access token.</param>
            <param name="impersonationLevel">The impersonation level.</param>
            <param name="duplication">Reference to the token to duplicate.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.ImpersonateLoggedOnUser(System.IntPtr)">
            <summary>
            The ImpersonateLoggedOnUser function lets the calling thread impersonate the 
            security context of a logged-on user. The user is represented by a token handle.
            </summary>
            <param name="userToken">Handle to a primary or impersonation access token that represents a logged-on user.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="F:NLib.IO.Security.ImpersonationUser._disposed">
            <summary>
            <c>true</c> if disposed; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.ImpersonationUser._impersonationContext">
            <summary>
            Holds the created impersonation context and will be used
            for reverting to previous user.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:NLib.IO.Security.ImpersonationUser"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources and will revent to the previous user when
            the impersonation still exists.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources and will revent to the previous user when
            the impersonation still exists.
            </summary>
            <param name="disposing">Specify <c>true</c> when calling the method directly
            or indirectly by a user’s code; Otherwise <c>false</c>.
            </param>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.LogOn(NLib.IO.Security.BuiltinUser)">
            <summary>
            LogOn. impersonates as a built in service account.
            </summary>
            <param name="builtinUser">The built in user to impersonate - either
            Local Service or Network Service. These users can only be impersonated
            by code running as System.</param>
            <returns>Retturns Impersonation LogOn Result.</returns>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.LogOn(System.String,System.String,System.String)">
            <summary>
            LogOn. impersonates with the specified credentials.
            </summary>
            <param name="domain">The name of the domain or server whose account 
            database contains the lpszUsername account. If this parameter is 
            <c>null</c>, the user name must be specified in UPN format. If this 
            parameter is ".", the function validates the account by using only the 
            local account database.</param>
            <param name="username">his is the name of the user account to log on 
            to. If you use the user principal name (UPN) format, 
            user@DNS_domain_name, the lpszDomain parameter must be <c>null</c>.</param>
            <param name="password">The plaintext password for the user account.</param>
            <returns>Retturns Impersonation LogOn Result.</returns>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.LogOn(System.String,System.String,System.String,NLib.IO.Security.LogonType,NLib.IO.Security.BuiltinUser)">
            <summary>
            LogOn (Main internal methods).
            </summary>
            <param name="username">his is the name of the user account to log on 
            to. If you use the user principal name (UPN) format, 
            user@DNS_domain_name, the lpszDomain parameter must be <c>null</c>.</param>
            <param name="domain">The name of the domain or server whose account 
            database contains the lpszUsername account. If this parameter is 
            <c>null</c>, the user name must be specified in UPN format. If this 
            parameter is ".", the function validates the account by using only the 
            local account database.</param>
            <param name="password">The plaintext password for the user account.</param>
            <param name="logonType">The Logon Type.</param>
            <param name="builtinUser">The Buildin User.</param>
            <returns>Retturns Impersonation LogOn Result.</returns>
        </member>
        <member name="M:NLib.IO.Security.ImpersonationUser.Revert">
            <summary>
            Reverts to the previous user.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.LogOnUser">
            <summary>
            LogOn User.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.LogOnUser.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.LogOnUser.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.Current">
            <summary>
            Gets Current User Identity.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.LogOnName">
            <summary>
            Gets Current User Log On Name.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.AuthenticationType">
            <summary>
            Gets User Authentication Type.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.IsAnonymous">
            <summary>
            Checks is Anonymous user.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.IsAuthenticated">
            <summary>
            Checks is Authenticated user.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.IsGuest">
            <summary>
            Checks is Guest user.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.IsSystem">
            <summary>
            Checks is System user.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.LogOnUser.Members">
            <summary>
            Gets Current user's member groups
            </summary>
        </member>
        <member name="T:NLib.IO.Security.FolderPermissionResult">
            <summary>
            Folder Permission Result. 
            The result class for folder permission operations.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FolderPermissionResult.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.PathName">
            <summary>
            Gets (or internal sets) target folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.OwnerShip">
            <summary>
            Gets the owner of file or folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.ChangePermission">
            <summary>
            Gets (or internal sets) that current user can chance permisssion 
            for file or folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.Create">
            <summary>
            Gets (or internal sets) that current user can create file or folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.Delete">
            <summary>
            Gets (or internal sets) that current user can delete file or folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.ListDirectory">
            <summary>
            Gets (or internal sets) can get list the contents of target folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.Exists">
            <summary>
            Checks if folder exists.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.IsPublic">
            <summary>
            Checks is folder allow to create file/folder and sub-directories
            and allow to delete file/folder and sub-directories and 
            allow to list its file and sub-directories contents.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermissionResult.Groups">
            <summary>
            Gets avaliable groups.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.FolderPermission">
            <summary>
            Folder Permission.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.GetOwnerShip">
            <summary>
            Gets current ownership on target file system object.
            </summary>
            <returns>Returns NTUser that take ownership on specificed file system object.</returns>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.GetUserGroups">
            <summary>
            Gets avaliable user's groups that can access folder.
            </summary>
            <returns>Returns avaliable user's groups that can access folder.</returns>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.CheckPermissions(System.Security.AccessControl.FileSystemRights)">
            <summary>
            Check Access Control rights for specificed user on target file or folder.
            </summary>
            <param name="requiredPermissions">
            The required permissions for target file or folder.
            </param>
            <returns>Returns true if required permissions is allow.</returns>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.GetPermissions">
            <summary>
            Gets Folder access permissions.
            </summary>
            <returns>Returns the avaliable permissions for target folder.</returns>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.GrantPermissions(System.Security.Principal.IdentityReference)">
            <summary>
            Grants access premissions for folder with default FileSystemRights for
            public users.
            </summary>
            <param name="identity">The identity like Everyone or Users or User's identity name.</param>
            <returns>Returns premissions after grant to rechecked is grant success.</returns>
        </member>
        <member name="M:NLib.IO.Security.FolderPermission.GrantPermissions(System.Security.Principal.IdentityReference,System.Security.AccessControl.FileSystemRights)">
            <summary>
            Grants access premissions for folder.
            </summary>
            <param name="identity">The identity like Everyone or Users or User's identity name.</param>
            <param name="rightsToGrant">The FileSystemRights to grants.</param>
            <returns>Returns premissions after grant to rechecked is grant success.</returns>
        </member>
        <member name="P:NLib.IO.Security.FolderPermission.Current">
            <summary>
            Gets Current User Identity.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermission.PathName">
            <summary>
            Gets or sets target path name to checks or grants permission or rights.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FolderPermission.Exists">
            <summary>
            Checks if folder exists.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.FilePermissionResult">
            <summary>
            File Permission Result.
            The result class for file permission operations.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FilePermissionResult.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.FileName">
            <summary>
            Gets (or internal sets) target file.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.OwnerShip">
            <summary>
            Gets the owner of file or folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.ChangePermission">
            <summary>
            Gets (or internal sets) that current user can chance permisssion 
            for file or folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.Delete">
            <summary>
            Gets (or internal sets) that current user can delete file or folder.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.Read">
            <summary>
            Gets (or internal sets) that current user can read file.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.Write">
            <summary>
            Gets (or internal sets) that current user can create/append/write file.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.Execute">
            <summary>
            Gets (or internal sets) that current user can read and execute file.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.Exists">
            <summary>
            Checks if folder exists.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.IsPublic">
            <summary>
            Checks is file is allow to Read-Write and execute.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermissionResult.Groups">
            <summary>
            Gets avaliable groups.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.FilePermission">
            <summary>
            File Permission.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.GetOwnerShip">
            <summary>
            Gets current ownership on target file system object.
            </summary>
            <returns>Returns NTUser that take ownership on specificed file system object.</returns>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.GetUserGroups">
            <summary>
            Gets avaliable user's groups that can access file.
            </summary>
            <returns>Returns avaliable user's groups that can access file.</returns>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.CheckPermissions(System.Security.AccessControl.FileSystemRights)">
            <summary>
            Check Access Control permissions for specificed user on 
            target file or folder.
            </summary>
            <param name="requiredPermissions">
            The required permissions for target file or folder.
            </param>
            <returns>Returns true if required permissions is allow.</returns>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.GetPermissions">
            <summary>
            Gets File Access Permissions.
            </summary>
            <returns>Returns the avaliable permissions for target file.</returns>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.GrantPermissions(System.Security.Principal.IdentityReference)">
            <summary>
            Grants access permissions for file with default FileSystemRights for
            public users.
            </summary>
            <param name="identity">The identity like Everyone or Users or User's identity name.</param>
            <returns>Returns permissions after grant to rechecked is grant success.</returns>
        </member>
        <member name="M:NLib.IO.Security.FilePermission.GrantPermissions(System.Security.Principal.IdentityReference,System.Security.AccessControl.FileSystemRights)">
            <summary>
            Grants access permissions for file.
            </summary>
            <param name="identity">The identity like Everyone or Users or User's identity name.</param>
            <param name="rightsToGrant">The FileSystemRights to grants.</param>
            <returns>Returns permissions after grant to rechecked is grant success.</returns>
        </member>
        <member name="P:NLib.IO.Security.FilePermission.Current">
            <summary>
            Gets Current User Identity.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermission.FileName">
            <summary>
            Gets or sets target file name to checks or grants permission or rights.
            </summary>
        </member>
        <member name="P:NLib.IO.Security.FilePermission.Exists">
            <summary>
            Checks if file exists.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.UAC">
            <summary>
            UAC class. Provide methods for checks and grants access permission to
            files and folders.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.UAC.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.UAC.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.IO.Security.UAC.GetFolderPermission(System.String)">
            <summary>
            Gets Folder Permission.
            </summary>
            <param name="pathName">Target Path or Folder Name.</param>
            <returns>Returns instance of FolderPermission.</returns>
        </member>
        <member name="M:NLib.IO.Security.UAC.GetFilePermission(System.String)">
            <summary>
            Gets File Permission.
            </summary>
            <param name="fileName">Target File Name.</param>
            <returns>Returns instance of FilePermission.</returns>
        </member>
        <member name="P:NLib.IO.Security.UAC.User">
            <summary>
            Gets Current LogOn User information.
            </summary>
        </member>
        <member name="T:NLib.IO.Security.UAC.BuildInGroups">
            <summary>
            Access Build In Groups.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.UAC.BuildInGroups.NTUser">
            <summary>
            Build In Identifier for NT Domain/Users.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.UAC.BuildInGroups.NTAdmin">
            <summary>
            Build In Identifier for NT Domain/Administrators.
            </summary>
        </member>
        <member name="F:NLib.IO.Security.UAC.BuildInGroups.EveryOne">
            <summary>
            Build In Identifier for EveryOne.
            </summary>
        </member>
        <member name="T:NLib.ConsoleController">
            <summary>
            Console Controller.
            </summary>
        </member>
        <member name="P:NLib.ConsoleController.Instance">
            <summary>
            Singelton Access instance of Window application controller.
            </summary>
        </member>
        <member name="M:NLib.ConsoleController.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.ConsoleController.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.ConsoleController.Setup(NLib.EnvironmentOptions)">
            <summary>
            Setup application environment's options.
            </summary>
            <param name="option">The environment's options.</param>
        </member>
        <member name="M:NLib.ConsoleController.Shutdown(System.Int32)">
            <summary>
            Shutdown. No auto kill process.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.ConsoleController.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Shutdown with auto kill process.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.ConsoleController.Shutdown(System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Shutdown
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="autoKillInMs">The time to force process auto 
            kill in millisecond. if this parameter is less than 100 ms. 
            so no auto kill process running.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:NLib.ConsoleController.IsRunning">
            <summary>
            Checks is application is running.
            </summary>
        </member>
        <member name="P:NLib.ConsoleController.IsExit">
            <summary>
            Check is application is exit.
            </summary>
        </member>
        <member name="P:NLib.ConsoleController.HasMoreInstance">
            <summary>
            Checks is application has more instance than one.
            </summary>
        </member>
        <member name="T:NLib.IApplicationController">
            <summary>
            The IApplicationManager.
            </summary>
        </member>
        <member name="M:NLib.IApplicationController.Shutdown(System.Int32)">
            <summary>
            Shutdown. No auto kill process.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.IApplicationController.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Shutdown with auto kill process.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.IApplicationController.Shutdown(System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Shutdown application manager.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="autoKillInMs">The time to force process auto 
            kill in millisecond. if this parameter is less than 100 ms. 
            so no auto kill process running.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:NLib.IApplicationController.IsExit">
            <summary>
            Checks is the application is in exit state.
            </summary>
        </member>
        <member name="P:NLib.IApplicationController.HasMoreInstance">
            <summary>
            Checks is application has more instance than one.
            </summary>
        </member>
        <member name="T:NLib.WinAppContoller">
            <summary>
            Windows Application Contoller.
            </summary>
        </member>
        <member name="P:NLib.WinAppContoller.Instance">
            <summary>
            Singelton Access instance of Window application controller.
            </summary>
        </member>
        <member name="M:NLib.WinAppContoller.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.WinAppContoller.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.WinAppContoller.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Is disposing.</param>
        </member>
        <member name="M:NLib.WinAppContoller.ExitThreadCore">
            <summary>
            ExitThreadCore.
            </summary>
        </member>
        <member name="M:NLib.WinAppContoller.OnMainFormClosed(System.Object,System.EventArgs)">
            <summary>
            OnMainFormClosed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:NLib.WinAppContoller.Run(System.Windows.Forms.Form)">
            <summary>
            Run
            </summary>
            <param name="form">The form instance</param>
        </member>
        <member name="M:NLib.WinAppContoller.Exit">
            <summary>
            Exit an application.
            </summary>
        </member>
        <member name="M:NLib.WinAppContoller.Setup(NLib.EnvironmentOptions)">
            <summary>
            Setup application environment's options.
            </summary>
            <param name="option">The environment's options.</param>
        </member>
        <member name="M:NLib.WinAppContoller.Shutdown(System.Int32)">
            <summary>
            Shutdown. No auto kill process.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.WinAppContoller.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Shutdown with auto kill process.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.WinAppContoller.Shutdown(System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Shutdown
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="autoKillInMs">The time to force process auto 
            kill in millisecond. if this parameter is less than 100 ms. 
            so no auto kill process running.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:NLib.WinAppContoller.IsRunning">
            <summary>
            Checks is application is running.
            </summary>
        </member>
        <member name="P:NLib.WinAppContoller.IsExit">
            <summary>
            Check is application is exit.
            </summary>
        </member>
        <member name="P:NLib.WinAppContoller.HasMoreInstance">
            <summary>
            Checks is application has more instance than one.
            </summary>
        </member>
        <member name="T:NLib.ServiceProcess.NServiceInstaller">
            <summary>
            This is a custom project installer.
            Applies a unique name to the service using the /name switch
            Sets description to the service using the /desc switch
            Sets user name and password using the /user and /password switches
            Allows the use of a local account using the /account switch
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.CallInstallUtil(System.String)">
            <summary>
            Run InstallUtil with specific params
            </summary>
            <param name="installUtilArguments">CommandLine params</param>
            <returns>Status of installation</returns>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.GenerateServiceInstallerArgs">
            <summary>
            Generate Service Installer args in install process.
            </summary>
            <returns>Returns arugments that need for InstallUtil.exe</returns>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.GenerateServiceInstallerArgs(System.String)">
            <summary>
            Generate Service Installer args in install process.
            </summary>
            <param name="logFilePath">The logfile full file name.</param>
            <returns>Returns arugments that need for InstallUtil.exe</returns>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.GenerateServiceUninstallerArgs">
            <summary>
            Generate Service Installer args in uninstall process.
            </summary>
            <returns>Returns arugments that need for InstallUtil.exe</returns>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.GenerateServiceUninstallerArgs(System.String)">
            <summary>
            Generate Service Installer args in uninstall process.
            </summary>
            <param name="logFilePath">The logfile full file name.</param>
            <returns>Returns arugments that need for InstallUtil.exe</returns>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.OnBeforeInstall(System.Collections.IDictionary)">
            <summary>
            This method is run before the install process.
            This method is overriden to set the following parameters:
            service name (/name switch)
            service description (/desc switch)
            account type (/account switch)
            for a user account user name (/user switch)
            for a user account password (/password switch)
            Note that when using a user account,
            if the user name or password is not set,
            the installing user is prompted for the credentials to use.
            </summary>
            <PARAM name="savedState">The save state dictionary list.</PARAM>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.OnBeforeUninstall(System.Collections.IDictionary)">
            <summary>
            Uninstall based on the service name
            </summary>
            <PARAM name="savedState">The save state dictionary list.</PARAM>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.OnCommitted(System.Collections.IDictionary)">
            <summary>
            OnCommitted.
            </summary>
            <PARAM name="savedState">The save state dictionary list.</PARAM>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.Service">
            <summary>
            Gets to service instance.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.GetContextParameter(System.String)">
            <summary>
            Return the value of the parameter in dicated by key
            </summary>
            <PARAM name="key">Context parameter key</PARAM>
            <returns>Context parameter specified by key</returns>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Run">
            <summary>
            Run the service.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Stop">
            <summary>
            Stop the service.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Install">
            <summary>
            Install service.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Install(System.Boolean)">
            <summary>
            Install service.
            </summary>
            <param name="useInstallUtil">Use installutil.exe to install service.</param>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Uninstall">
            <summary>
            Uninstall service.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Uninstall(System.Boolean)">
            <summary>
            Uninstall service.
            </summary>
            <param name="useInstallUtil">Use installutil.exe to uninstall service.</param>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.ServiceName">
            <summary>
            Gets or sets Service Name that shown in service manager.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.DisplayName">
            <summary>
            Gets or sets Service Display Name that shown in service manager.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.Description">
            <summary>
            Gets or sets Service Description that shown in service manager.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.StartType">
            <summary>
            Gets or sets Service Start Type.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.Account">
            <summary>
            Gets or sets Service Startup Account.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.UserName">
            <summary>
            Gets or sets User Name if required to start/stop service.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.Password">
            <summary>
            Gets or sets Password if required to start/stop service.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInstaller.ServiceAssembly">
            <summary>
            Gets the service assembly.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Install(System.Reflection.Assembly)">
            <summary>
            Install service.
            </summary>
            <param name="serviceAssembly">The service assembly.</param>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceInstaller.Uninstall(System.Reflection.Assembly)">
            <summary>
            Uninstall service.
            </summary>
            <param name="serviceAssembly">The service assembly.</param>
        </member>
        <member name="T:NLib.ServiceProcess.NServiceBase">
            <summary>
            NLib Window Service Base abstract class.
            </summary>
        </member>
        <member name="T:NLib.ServiceProcess.NServiceStatus">
            <summary>
            The NServiceStatus class.
            </summary>
        </member>
        <member name="F:NLib.ServiceProcess.NServiceStatus.None">
            <summary>
            None. Service is not response or in pending state.
            </summary>
        </member>
        <member name="F:NLib.ServiceProcess.NServiceStatus.Running">
            <summary>
            Service is runing
            </summary>
        </member>
        <member name="F:NLib.ServiceProcess.NServiceStatus.Stop">
            <summary>
            Service is stop
            </summary>
        </member>
        <member name="T:NLib.ServiceProcess.NServiceName">
            <summary>
            The NServiceName class.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceName.ServiceName">
            <summary>
            Gets or sets service name.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceName.FileName">
            <summary>
            Gets or sets executable file name.
            </summary>
        </member>
        <member name="T:NLib.ServiceProcess.NServiceInfo">
            <summary>
            The NServiceInfo class.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInfo.ServiceName">
            <summary>
            Gets or sets Service Name
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInfo.FileName">
            <summary>
            Gets or sets executable file name.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInfo.Status">
            <summary>
            Gets or sets Service status.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInfo.IsInstalled">
            <summary>
            Checks is service is installed.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceInfo.StatusColor">
            <summary>
            Gets Status Color brush.
            </summary>
        </member>
        <member name="T:NLib.ServiceProcess.NServiceMonitor">
            <summary>
            The NServiceMonitor class.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.Start">
            <summary>
            Start service.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.Shutdown">
            <summary>
            Shutdown service.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.Install(System.String)">
            <summary>
            Install window service.
            </summary>
            <param name="serviceExecutableName">The service execcutable file name.</param>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.Uninstall(System.String)">
            <summary>
            Uninstall window service.
            </summary>
            <param name="serviceExecutableName">The service execcutable file name.</param>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.InstallAll">
            <summary>
            Install all services.
            </summary>
        </member>
        <member name="M:NLib.ServiceProcess.NServiceMonitor.UninstallAll">
            <summary>
            Uninstall all services.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceMonitor.ServiceNames">
            <summary>
            Access service name to monitor.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceMonitor.ServiceInformations">
            <summary>
            Gets last service status array.
            </summary>
        </member>
        <member name="P:NLib.ServiceProcess.NServiceMonitor.InstalledServiceInformations">
            <summary>
            Gets last installed service status array.
            </summary>
        </member>
        <member name="E:NLib.ServiceProcess.NServiceMonitor.ScanConpleted">
            <summary>
            ScanConpleted event. Occur when service scanning is completed.
            </summary>
        </member>
        <member name="T:NLib.WinServiceContoller">
            <summary>
            Windows Services Contoller.
            </summary>
        </member>
        <member name="P:NLib.WinServiceContoller.Instance">
            <summary>
            Singelton Access instance of Window application controller.
            </summary>
        </member>
        <member name="M:NLib.WinServiceContoller.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.WinServiceContoller.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.WinServiceContoller.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NLib.WinServiceContoller.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Is disposing.</param>
        </member>
        <member name="M:NLib.WinServiceContoller.Run(NLib.ServiceProcess.NServiceInstaller,System.String[])">
            <summary>
            Run
            </summary>
            <param name="serviceInstaller">
            The service manager with attach the actual service to run.
            </param>
            <param name="args">
            The service parameter like -install or -uninstall
            </param>
        </member>
        <member name="M:NLib.WinServiceContoller.Setup(NLib.EnvironmentOptions)">
            <summary>
            Setup application environment's options.
            </summary>
            <param name="option">The environment's options.</param>
        </member>
        <member name="M:NLib.WinServiceContoller.Shutdown(System.Int32)">
            <summary>
            Shutdown. No auto kill process.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.WinServiceContoller.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Shutdown with auto kill process.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.WinServiceContoller.Shutdown(System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Shutdown
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="autoKillInMs">The time to force process auto 
            kill in millisecond. if this parameter is less than 100 ms. 
            so no auto kill process running.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:NLib.WinServiceContoller.IsRunning">
            <summary>
            Checks is application is running.
            </summary>
        </member>
        <member name="P:NLib.WinServiceContoller.IsExit">
            <summary>
            Check is application is exit.
            </summary>
        </member>
        <member name="P:NLib.WinServiceContoller.HasMoreInstance">
            <summary>
            Checks is application has more instance than one.
            </summary>
        </member>
        <member name="T:NLib.WpfAppContoller">
            <summary>
            WPF Application Contoller.
            </summary>
        </member>
        <member name="P:NLib.WpfAppContoller.Instance">
            <summary>
            Singelton Access instance of Window application controller.
            </summary>
        </member>
        <member name="M:NLib.WpfAppContoller.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.WpfAppContoller.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.WpfAppContoller.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:NLib.WpfAppContoller._mainWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Window Closing Handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The cancel event args.</param>
        </member>
        <member name="M:NLib.WpfAppContoller.Run(System.Windows.Window)">
            <summary>
            Run
            </summary>
            <param name="window">The window instance</param>
        </member>
        <member name="M:NLib.WpfAppContoller.Exit">
            <summary>
            Exit an application.
            </summary>
        </member>
        <member name="M:NLib.WpfAppContoller.Setup(NLib.EnvironmentOptions)">
            <summary>
            Setup application environment's options.
            </summary>
            <param name="option">The environment's options.</param>
        </member>
        <member name="M:NLib.WpfAppContoller.Shutdown(System.Int32)">
            <summary>
            Shutdown. No auto kill process.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.WpfAppContoller.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Shutdown with auto kill process.
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NLib.WpfAppContoller.Shutdown(System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Shutdown
            </summary>
            <param name="autokill">True for autokill</param>
            <param name="autoKillInMs">The time to force process auto 
            kill in millisecond. if this parameter is less than 100 ms. 
            so no auto kill process running.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:NLib.WpfAppContoller.IsRunning">
            <summary>
            Checks is application is running.
            </summary>
        </member>
        <member name="P:NLib.WpfAppContoller.IsExit">
            <summary>
            Check is application is exit.
            </summary>
        </member>
        <member name="P:NLib.WpfAppContoller.HasMoreInstance">
            <summary>
            Checks is application has more instance than one.
            </summary>
        </member>
        <member name="T:NLib.NAppFolder">
            <summary>
            Application Root's folder location for keep data like config, logs, resources, image, etc.
            </summary>
        </member>
        <member name="F:NLib.NAppFolder.LocalUser">
            <summary>
            Use current user profile folder as root directory to keep file and folders.
            </summary>
        </member>
        <member name="F:NLib.NAppFolder.ProgramData">
            <summary>
            Use Commmon Program's Data folder as root directory to keep file and folders.
            </summary>
        </member>
        <member name="F:NLib.NAppFolder.WindowsRootDrive">
            <summary>
            Use root of drive that windows installed as root directory to keep file and folders.
            </summary>
        </member>
        <member name="F:NLib.NAppFolder.Application">
            <summary>
            Use appliation location as root directory to keep file and folders.
            </summary>
        </member>
        <member name="F:NLib.NAppFolder.Custom">
            <summary>
            Use custom path as root directory to keep file and folders.
            </summary>
        </member>
        <member name="T:NLib.NAppInformation">
            <summary>
            The Application Information.
            </summary>
        </member>
        <member name="M:NLib.NAppInformation.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.NAppInformation.CompanyName">
            <summary>
            Gets or sets Company Name. This value is used for create root path
            for all applications that made from the same company.
            </summary>
        </member>
        <member name="P:NLib.NAppInformation.ProductName">
            <summary>
            Gets Application or Product Name.
            This value is used for create sub directory for current application in company root path.
            </summary>
        </member>
        <member name="P:NLib.NAppInformation.Version">
            <summary>
            Gets or sets Product Version.
            </summary>
        </member>
        <member name="P:NLib.NAppInformation.Minor">
            <summary>
            Gets or sets Product Minor Version.
            </summary>
        </member>
        <member name="P:NLib.NAppInformation.Build">
            <summary>
            Gets or sets Product Build number.
            </summary>
        </member>
        <member name="P:NLib.NAppInformation.LastUpdate">
            <summary>
            Gets or sets Product Last Update Date.
            </summary>
        </member>
        <member name="P:NLib.NAppInformation.DisplayText">
            <summary>
            Gets display text for product info.
            </summary>
        </member>
        <member name="T:NLib.NAppStorage">
            <summary>
            NAppStorage class. This class provide information about root folder for keep application data.
            </summary>
        </member>
        <member name="M:NLib.NAppStorage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.NAppStorage.StorageType">
            <summary>
            Gets or sets application's runtime root data's folder.
            </summary>
        </member>
        <member name="P:NLib.NAppStorage.CustomFolder">
            <summary>
            Gets or sets application's runtime custom root data's folder.
            </summary>
        </member>
        <member name="T:NLib.NAppBehaviors">
            <summary>
            NAppBehaviors class. This class provide application behaviors like single instance, etc.
            </summary>
        </member>
        <member name="M:NLib.NAppBehaviors.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.NAppBehaviors.IsSingleAppInstance">
            <summary>
            Gets or sets is current application can allow only single application instance.
            </summary>
        </member>
        <member name="P:NLib.NAppBehaviors.EnableDebuggers">
            <summary>
            Gets or sets is EnableDebuggers is enable or disable. This value should always be true.
            </summary>
        </member>
        <member name="T:NLib.EnvironmentOptions">
            <summary>
            Enviroment Options class.
            </summary>
        </member>
        <member name="M:NLib.EnvironmentOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.EnvironmentOptions.AppInfo">
            <summary>
            Gets or sets the application information instance.
            </summary>
        </member>
        <member name="P:NLib.EnvironmentOptions.Storage">
            <summary>
            Gets or sets the application data storage instance.
            </summary>
        </member>
        <member name="P:NLib.EnvironmentOptions.Behaviors">
            <summary>
            Gets or sets the application behaviors instance.
            </summary>
        </member>
        <member name="M:NLib.EnvironmentOptions.IsValid(NLib.EnvironmentOptions)">
            <summary>
            Checks is an environment options is valid.
            </summary>
            <param name="option">An environment options instance.</param>
            <returns>Returns true if environment options instance is valid.</returns>
        </member>
        <member name="T:NLib.CommonAppFolders">
            <summary>
            Common App Folders abstract class.
            </summary>
        </member>
        <member name="M:NLib.CommonAppFolders.OnSetup">
            <summary>
            OnSetup. Occur when Setup method is called.
            </summary>
        </member>
        <member name="M:NLib.CommonAppFolders.Valid">
            <summary>
            Checks is all required variables that used for create folders is valid.
            </summary>
            <returns>Returns true if all variables is valid.</returns>
        </member>
        <member name="M:NLib.CommonAppFolders.Setup(NLib.EnvironmentOptions)">
            <summary>
            Setup Environment options.
            </summary>
            <param name="option">The Environment options instance.</param>
        </member>
        <member name="P:NLib.CommonAppFolders.Options">
            <summary>
            Gets the Environment Options.
            </summary>
        </member>
        <member name="T:NLib.CompanyFolders">
            <summary>
            The Company related's data folders.
            </summary>
        </member>
        <member name="M:NLib.CompanyFolders.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.CompanyFolders.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.CompanyFolders.GetRootFolder">
            <summary>
            Gets the Root folder that used for common places to keep all
            applications data for the same company.
            </summary>
        </member>
        <member name="M:NLib.CompanyFolders.OnSetup">
            <summary>
            OnSetup. Occur when Setup method is called.
            </summary>
        </member>
        <member name="P:NLib.CompanyFolders.Root">
            <summary>
            Gets the root folder full name.
            </summary>
        </member>
        <member name="P:NLib.CompanyFolders.Item(System.String,System.Boolean)">
            <summary>
            Indexer access sub folder in Company folder.
            </summary>
            <param name="subfolder">The sub folder path.</param>
            <param name="autoCreateIfNotExist">True for auto create.</param>
            <returns>Returns instance of NFolder that link to the sub folder.</returns>
        </member>
        <member name="P:NLib.CompanyFolders.Configs">
            <summary>
            Gets the Company common configs folder that used for all applications.
            </summary>
        </member>
        <member name="P:NLib.CompanyFolders.Temp">
            <summary>
            Gets the Company common temp folder that used for all applications.
            </summary>
        </member>
        <member name="P:NLib.CompanyFolders.Share">
            <summary>
            Gets the Company common share folder that used for all applications.
            </summary>
        </member>
        <member name="P:NLib.CompanyFolders.Data">
            <summary>
            Gets the Company common data folder that used for all applications.
            </summary>
        </member>
        <member name="P:NLib.CompanyFolders.Products">
            <summary>
            Gets the Company common products folder that used for all applications.
            </summary>
        </member>
        <member name="T:NLib.ProductFolders">
            <summary>
            The Product related's data folders.
            </summary>
        </member>
        <member name="M:NLib.ProductFolders.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.ProductFolders.#ctor(NLib.CompanyFolders)">
            <summary>
            Constructor.
            </summary>
            <param name="companyFolders">The company folders instance.</param>
        </member>
        <member name="M:NLib.ProductFolders.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.ProductFolders.OnSetup">
            <summary>
            OnSetup. Occur when Setup method is called.
            </summary>
        </member>
        <member name="P:NLib.ProductFolders.Item(System.String,System.Boolean)">
            <summary>
            Indexer access sub folder in current application folder.
            </summary>
            <param name="subfolder">The sub folder path.</param>
            <param name="autoCreateIfNotExist">True for auto create.</param>
            <returns>Returns instance of NFolder that link to the sub folder.</returns>
        </member>
        <member name="P:NLib.ProductFolders.Configs">
            <summary>
            Gets the program common configs folder that used for current application.
            </summary>
        </member>
        <member name="P:NLib.ProductFolders.Logs">
            <summary>
            Gets the program common logs folder that used for current application.
            </summary>
        </member>
        <member name="P:NLib.ProductFolders.Temp">
            <summary>
            Gets the program common temp folder that used for all applications.
            </summary>
        </member>
        <member name="P:NLib.ProductFolders.PlugIns">
            <summary>
            Gets the program common Plug In(s) folder that used for all applications.
            </summary>
        </member>
        <member name="P:NLib.ProductFolders.Data">
            <summary>
            Gets the program common Data folder that used for all applications.
            </summary>
        </member>
        <member name="T:NLib.Environments">
            <summary>
            Application's Environments class.
            </summary>
        </member>
        <member name="P:NLib.Environments.AppInstance">
            <summary>
            Gets App Instance. Used for checks is allow to run only one instance.
            </summary>
        </member>
        <member name="M:NLib.Environments.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Environments.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Environments.InitAppFolders">
            <summary>
            Init Application Data root folder and setup or create Company folder with auto grant
            access secruity.
            </summary>
        </member>
        <member name="M:NLib.Environments.Setup(NLib.EnvironmentOptions)">
            <summary>
            Setup Essential values for application environments. 
            This value should set at first time before application
            start or run.
            </summary>
            <param name="option">The Environment's option.</param>
        </member>
        <member name="P:NLib.Environments.Options">
            <summary>
            Gets the Enviroment Options.
            </summary>
        </member>
        <member name="P:NLib.Environments.Company">
            <summary>
            Gets the company folder. This is the root folder for keep all folders and fles that
            work with application for specificed company. This value is exists after an options
            was setup.
            </summary>
        </member>
        <member name="P:NLib.Environments.Product">
            <summary>
            Gets the current product folder. This is the root folder for current product.
            </summary>
        </member>
        <member name="P:NLib.Environments.HasMoreInstance">
            <summary>
            Checks that the is application is running more than one instance.
            </summary>
        </member>
        <member name="T:NLib.NGC">
            <summary>
            Helper for Control Garbage Collector
            </summary>
        </member>
        <member name="T:NLib.NGC.Units">
            <summary>
            Units constant class
            </summary>
        </member>
        <member name="F:NLib.NGC.Units.Byte">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:NLib.NGC.Units.KB">
            <summary>
            Kilobyte
            </summary>
        </member>
        <member name="F:NLib.NGC.Units.MB">
            <summary>
            Megabyte
            </summary>
        </member>
        <member name="F:NLib.NGC.Units.GB">
            <summary>
            Gigabyte
            </summary>
        </member>
        <member name="F:NLib.NGC.MinimumBarrier">
            <summary>
            Minimum Memory Barrier 512 MB
            </summary>
        </member>
        <member name="M:NLib.NGC.FreeGC">
            <summary>
            Force Free Garbage Collector
            </summary>
            <example>
            <code lang="C#">
            private void button1_Click(object sender, EventArgs e)
            {
               ...
               // Call for Get Data From database.
               DataTable table = GetDataTable();
            
                ... do some operation
            
                .. after finished.
                if (table != null)
                {
                    table.Dispose(); // Dispose table to free resource.
                }
                table = null;
            
               // Force Garbage Collector to free resource.
               NGC.FreeGC();
               ...
            }
            </code>
            </example>
        </member>
        <member name="M:NLib.NGC.FreeGC(System.Object)">
            <summary>
            Force Free Garbage Collector
            </summary>
            <param name="value">object reference to release memory</param>
            <example>
            <code lang="C#">
            private void button1_Click(object sender, EventArgs e)
            {
               ...
               // Call for Get Data From database.
               DataTable table = GetDataTable();
            
                ... do some operation
            
                .. after finished.
                if (table != null)
                {
                    table.Dispose(); // Dispose table to free resource.
                }
            
               // Force Garbage Collector to free resource.
               NGC.FreeGC(table);
               table = null;
               ...
            }
            </code>
            </example>
        </member>
        <member name="P:NLib.NGC.MemoryBarrier">
            <summary>
            Get/Set Memory Barrier (-1) for not check memory barrier.
            </summary>
        </member>
        <member name="P:NLib.NGC.TotalMemory">
            <summary>
            Get Total Memory allocation in bytes.
            </summary>
        </member>
        <member name="P:NLib.NGC.EnableDetailDebug">
            <summary>
            Get/Set Show Detail Debug.
            </summary>
        </member>
        <member name="E:NLib.NGC.OnOutOfMemory">
            <summary>
            OnOutOfMemory event. Occur when FreeGC Method is force to free memory and the allocate memory still
            over than limit memory barrier.
            </summary>
        </member>
        <member name="T:NLib.MessageTypes">
            <summary>
            The Message Types enums.
            </summary>
        </member>
        <member name="F:NLib.MessageTypes.Info">
            <summary>
            Interesting runtime events.
            Expect these to be immediately visible on a console, 
            so be conservative and keep to a minimum.
            </summary>
        </member>
        <member name="F:NLib.MessageTypes.Error">
            <summary>
            Other runtime errors or unexpected conditions.
            Expect these to be immediately visible on a status console.
            </summary>
        </member>
        <member name="T:NLib.NVariableInfo">
            <summary>
            NVariableInfo class. This class is used for keep pair of variable's name and it's value.
            </summary>
        </member>
        <member name="M:NLib.NVariableInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.NVariableInfo.#ctor(System.String,System.Object,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The variable's name.</param>
            <param name="value">The variable's value.</param>
            <param name="format">The format for variable value.</param>
        </member>
        <member name="M:NLib.NVariableInfo.Equals(System.Object)">
            <summary>
            Equals. see Object.Equals for more information.
            </summary>
            <param name="obj">see Object.Equals for more information.</param>
            <returns>Returns true if object is equal.</returns>
        </member>
        <member name="M:NLib.NVariableInfo.GetHashCode">
            <summary>
            GetHashCode. see Object.Equals for more information.
            </summary>
            <returns>Returns hash code. see Object.GetHashCode for more information.</returns>
        </member>
        <member name="M:NLib.NVariableInfo.ToString">
            <summary>
            ToString.
            </summary>
            <returns>Returns string that represents an object.</returns>
        </member>
        <member name="P:NLib.NVariableInfo.Name">
            <summary>
            Gets or sets the variable name.
            </summary>
        </member>
        <member name="P:NLib.NVariableInfo.Value">
            <summary>
            Gets or sets the variable value.
            </summary>
        </member>
        <member name="P:NLib.NVariableInfo.Format">
            <summary>
            Gets or sets variable's format.
            </summary>
        </member>
        <member name="M:NLib.NVariableInfo.Create(System.String,System.Object,System.String)">
            <summary>
            Create.
            </summary>
            <param name="name">The variable's name.</param>
            <param name="value">The variable's value.</param>
            <param name="format">The variable's format.</param>
            <returns>Returns new instance of VariableInfo.</returns>
        </member>
        <member name="T:NLib.NDebugInfo">
            <summary>
            NDebugInfo class. This is base classs for all debug information.
            </summary>
        </member>
        <member name="M:NLib.NDebugInfo.GetDebugString">
            <summary>
            Gets debug string.
            </summary>
            <returns>Returns debug string.</returns>
        </member>
        <member name="P:NLib.NDebugInfo.CreateTime">
            <summary>
            Gets the debug message create time.
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.ThreadId">
            <summary>
            Gets create thread id.
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.DebugType">
            <summary>
            Gets or sets the debug message type.
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.CallingMethod">
            <summary>
            Gets or sets the calling method.
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.MethodName">
            <summary>
             Gets the the calling method in string.
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.DeclaringType">
            <summary>
            Gets the declare type that is the owner of calling method.
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.ClassFullName">
            <summary>
             Gets the declare type that is the owner of calling method in string (include namespace).
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.ClassName">
            <summary>
             Gets the declare type that is the owner of calling method in string (not include namespace).
            </summary>
        </member>
        <member name="P:NLib.NDebugInfo.Message">
            <summary>
            Gets debug message.
            </summary>
        </member>
        <member name="T:NLib.NDebugInfo`1">
            <summary>
            NDebugInfo of T class. This is base classs for all debug information and provide the proeprty
            to access the source instance of the debug string.
            </summary>
            <typeparam name="T">The target instance type.</typeparam>
        </member>
        <member name="M:NLib.NDebugInfo`1.GetDebugString">
            <summary>
            Gets debug string.
            </summary>
            <returns>Returns debug string.</returns>
        </member>
        <member name="P:NLib.NDebugInfo`1.Value">
            <summary>
            Gets or sets the instance value that is source of debug string.
            </summary>
        </member>
        <member name="T:NLib.NDebugMessage">
            <summary>
            NDebugMessage class. This class is is used for the source of debug is string.
            </summary>
        </member>
        <member name="M:NLib.NDebugMessage.Create(System.Reflection.MethodBase,NLib.MessageTypes,System.String)">
            <summary>
            Create.
            </summary>
            <param name="med">The calling method.</param>
            <param name="debugType">The debug type.</param>
            <param name="value">The debug source instance.</param>
            <returns>Return instance of NDebugMessage.</returns>
        </member>
        <member name="T:NLib.NDebugException">
            <summary>
            NDebugException class. This class is is used for the source of debug is exception.
            </summary>
        </member>
        <member name="M:NLib.NDebugException.GetDebugString">
            <summary>
            Gets debug string.
            </summary>
            <returns>Returns debug string.</returns>
        </member>
        <member name="M:NLib.NDebugException.Create(System.Reflection.MethodBase,System.Exception)">
            <summary>
            Create.
            </summary>
            <param name="med">The calling method.</param>
            <param name="value">The debug source instance.</param>
            <returns>Return instance of NDebugException.</returns>
        </member>
        <member name="T:NLib.NDebugVariable">
            <summary>
            NDebugVariable class. This class is is used for the source of debug is NVariableInfo.
            </summary>
        </member>
        <member name="M:NLib.NDebugVariable.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.NDebugVariable.GetDebugString">
            <summary>
            Gets debug string.
            </summary>
            <returns>Returns debug string.</returns>
        </member>
        <member name="M:NLib.NDebugVariable.Create(System.Reflection.MethodBase,NLib.MessageTypes,NLib.NVariableInfo[])">
            <summary>
            Create.
            </summary>
            <param name="med">The calling method.</param>
            <param name="debugType">The debug type.</param>
            <param name="values">The array of debug source instance.</param>
            <returns>Return instance of NDebugVariable.</returns>
        </member>
        <member name="M:NLib.NDebugVariable.Create(System.Reflection.MethodBase,NLib.MessageTypes,System.String,System.Object,System.String)">
            <summary>
            Create.
            </summary>
            <param name="med">The calling method.</param>
            <param name="debugType">The debug type.</param>
            <param name="name">The variable's name.</param>
            <param name="value">The variable's value.</param>
            <param name="format">The format for variable's value.</param>
            <returns>Return instance of NDebugVariable.</returns>
        </member>
        <member name="T:NLib.NDebugEventHandler">
            <summary>
            NDebugEventHandler delegate.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The DebugEventArgs instance.</param>
        </member>
        <member name="T:NLib.NDebugEventArgs">
            <summary>
            NDebugEventArgs class.
            </summary>
        </member>
        <member name="M:NLib.NDebugEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.NDebugEventArgs.#ctor(NLib.NDebugger,NLib.NDebugInfo)">
            <summary>
            Constructor
            </summary>
            <param name="debugger">The debugger instance.</param>
            <param name="info">The debug info instance.</param>
        </member>
        <member name="M:NLib.NDebugEventArgs.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.NDebugEventArgs.Debugger">
            <summary>
            Gets debugger instance.
            </summary>
        </member>
        <member name="P:NLib.NDebugEventArgs.Info">
            <summary>
            Gets debug info.
            </summary>
        </member>
        <member name="T:NLib.NDebugger">
            <summary>
            NDebugger class. 
            This class is cannot created by user code.
            </summary>
        </member>
        <member name="M:NLib.NDebugger.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.NDebugger.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="debuggerName">The debugger name.</param>
        </member>
        <member name="M:NLib.NDebugger.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.NDebugger.Equals(System.Object)">
            <summary>
            Equals. see Object.Equals for more information.
            </summary>
            <param name="obj">see Object.Equals for more information.</param>
            <returns>Returns true if object is equal.</returns>
        </member>
        <member name="M:NLib.NDebugger.GetHashCode">
            <summary>
            GetHashCode. see Object.Equals for more information.
            </summary>
            <returns>Returns hash code. see Object.GetHashCode for more information.</returns>
        </member>
        <member name="M:NLib.NDebugger.Debug(NLib.NDebugInfo)">
            <summary>
            Debug
            </summary>
            <param name="info">The debug information.</param>
        </member>
        <member name="P:NLib.NDebugger.DebuggerName">
            <summary>
            Gets debugger name.
            </summary>
        </member>
        <member name="E:NLib.NDebugger.OnDebug">
            <summary>
            OnDebug event. Occur when the debug information is arrived.
            </summary>
        </member>
        <member name="T:NLib.DebugManager">
            <summary>
            Debug Manager class. Provide common places to debugging.
            </summary>
        </member>
        <member name="P:NLib.DebugManager.Instance">
            <summary>
            Singleton access instance.
            </summary>
        </member>
        <member name="M:NLib.DebugManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.DebugManager.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.DebugManager.BeginDebug(System.String)">
            <summary>
            Begin Debug.
            </summary>
            <param name="debuggerName">The debugger's name.</param>
            <returns>Returns new instance of RunTime Debugger.</returns>
        </member>
        <member name="M:NLib.DebugManager.EndDebug(System.String)">
            <summary>
            End Debug.
            </summary>
            <param name="debuggerName">The debugger's name.</param>
        </member>
        <member name="M:NLib.DebugManager.Debug(NLib.NDebugInfo)">
            <summary>
            Debug
            </summary>
            <param name="info">The debug information.</param>
        </member>
        <member name="M:NLib.DebugManager.Info(System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            Write Info to all debugger.
            </summary>
            <param name="callingMethod">
            The proper way to set this value is used
            System.Reflection.MethodBase.GetCurrentMethod() to read 
            the calling method.
            </param>
            <param name="message">
            The info message. This value cannot be null or empty or contains only whitespace.
            </param>
            <param name="args">The optional args for info message.</param>
        </member>
        <member name="M:NLib.DebugManager.Error(System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="callingMethod">
            The proper way to set this value is used
            System.Reflection.MethodBase.GetCurrentMethod() to read 
            the calling method.
            </param>
            <param name="message">
            The error message. This value cannot be null or empty or contains only whitespace.
            </param>
            <param name="args">The optional args for error message.</param>
        </member>
        <member name="M:NLib.DebugManager.Error(System.Reflection.MethodBase,System.Exception)">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="callingMethod">
            The proper way to set this value is used
            System.Reflection.MethodBase.GetCurrentMethod() to read 
            the calling method.
            </param>
            <param name="ex">The Exception instance. This value cannot be null.</param>
        </member>
        <member name="M:NLib.DebugManager.Dump(System.Reflection.MethodBase,NLib.NVariableInfo[])">
            <summary>
            Write Dump Variables to all debugger.
            </summary>
            <param name="callingMethod">
            The proper way to set this value is used
            System.Reflection.MethodBase.GetCurrentMethod() to read 
            the calling method.
            </param>
            <param name="vars">The list of variable info.</param>
        </member>
        <member name="P:NLib.DebugManager.IsEnable">
            <summary>
            Gets or sets is debugger is enable or  disable.
            </summary>
        </member>
        <member name="T:NLib.NResult`1">
            <summary>
            NResult class.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:NLib.NResult`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.NResult`1.Result">
            <summary>
            Gets or sets result instance.
            </summary>
        </member>
        <member name="P:NLib.NResult`1.Err">
            <summary>
            Gets or sets error instance.
            </summary>
        </member>
        <member name="P:NLib.NResult`1.HasError">
            <summary>
            Checks is error instance is exits.
            </summary>
        </member>
        <member name="M:NLib.NResult`1.op_Implicit(NLib.NResult{`0})~`0">
            <summary>
            implicit convert to T
            </summary>
            <param name="value">The NResult instance.</param>
            <returns>Returns value that represent data in T instance.</returns>
        </member>
        <member name="T:NLib.OperationResult`1">
            <summary>
            OperationResult class.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:NLib.OperationResult`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NLib.OperationResult`1.Success">
            <summary>
            Gets or sets is success. 
            Note. In some case the Result may be null but operation is success.
            </summary>
        </member>
        <member name="M:NLib.OperationResult`1.op_Implicit(NLib.OperationResult{`0})~`0">
            <summary>
            implicit convert to T.
            </summary>
            <param name="value">The OperationResult instance.</param>
            <returns>string that represent data in T instance.</returns>
        </member>
        <member name="M:NLib.OperationResult`1.op_Implicit(NLib.OperationResult{`0})~System.Boolean">
            <summary>
            implicit convert to bool.
            </summary>
            <param name="value">The OperationResult instance.</param>
            <returns>string that represent data in T instance.</returns>
        </member>
        <member name="T:NLib.Collections.ISort">
            <summary>
            Summary description for ISort.
            </summary>
        </member>
        <member name="M:NLib.Collections.ISort.Sort(System.Collections.IList)">
            <summary>
            Sort IList
            </summary>
            <param name="list">IList instance that need to sort</param>
        </member>
        <member name="T:NLib.Collections.ISwap">
            <summary>
            Object swapper interface
            </summary>
        </member>
        <member name="M:NLib.Collections.ISwap.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Swap IList
            </summary>
            <param name="array">IList Instance to swap</param>
            <param name="left">index of left object</param>
            <param name="right">index of right object</param>
        </member>
        <member name="M:NLib.Collections.ISwap.Assign(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Assign
            </summary>
            <param name="array">IList Instance to assign</param>
            <param name="left">index of left object</param>
            <param name="right">index of right object</param>
        </member>
        <member name="M:NLib.Collections.ISwap.Assign(System.Collections.IList,System.Int32,System.Object)">
            <summary>
            Assign
            </summary>
            <param name="array">IList Instance to assign</param>
            <param name="left">index of left object</param>
            <param name="obj">object to assign</param>
        </member>
        <member name="T:NLib.Collections.DefaultSwap">
            <summary>
            Default swap class
            </summary>
        </member>
        <member name="M:NLib.Collections.DefaultSwap.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Swap IList
            </summary>
            <param name="array">IList Instance to swap</param>
            <param name="left">index of left object</param>
            <param name="right">index of right object</param>
        </member>
        <member name="M:NLib.Collections.DefaultSwap.Assign(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Assign
            </summary>
            <param name="array">IList Instance to assign</param>
            <param name="left">index of left object</param>
            <param name="right">index of right object</param>
        </member>
        <member name="M:NLib.Collections.DefaultSwap.Assign(System.Collections.IList,System.Int32,System.Object)">
            <summary>
            Assign
            </summary>
            <param name="array">IList Instance to assign</param>
            <param name="left">index of left object</param>
            <param name="obj">object to assign</param>
        </member>
        <member name="T:NLib.Collections.AbstractSorter">
            <summary>
            Abstract base class for Swap sort algorithms.
            </summary>
            <remarks>
            <para>
            This class serves as a base class for swap based sort algorithms.
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Collections.AbstractSorter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.AbstractSorter.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor with comparer and swaper
            </summary>
            <param name="comparer">Comparer instance</param>
            <param name="swapper">Swaper instance</param>
        </member>
        <member name="P:NLib.Collections.AbstractSorter.Comparer">
            <summary>
            Gets or sets the <see cref="T:System.Collections.IComparer"/> object
            </summary>
            <value>
            Comparer object
            </value>
            <exception cref="T:System.ArgumentNullException">
            Set property, the value is a null reference
            </exception>
        </member>
        <member name="P:NLib.Collections.AbstractSorter.Swapper">
            <summary>
            Gets or set the swapper object
            </summary>
            <value>
            The <see cref="T:NLib.Collections.ISwap"/> swapper.
            </value>
            <exception cref="T:System.ArgumentNullException">Swapper is a null reference</exception>
        </member>
        <member name="M:NLib.Collections.AbstractSorter.Sort(System.Collections.IList)">
            <summary>
            Sort IList Instance
            </summary>
            <param name="list">IList Instance</param>
        </member>
        <member name="T:NLib.Collections.BubbleSort">
            <summary>
            Bubble sort sequential algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.BubbleSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.BubbleSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.BubbleSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.BiDirectionalBubbleSort">
            <summary>
            Bi Directional Bubble sort sequential algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.BiDirectionalBubbleSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.BiDirectionalBubbleSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.BiDirectionalBubbleSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.InPlaceMergeSort">
            <summary>
            InPlace Merge Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.InPlaceMergeSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.InPlaceMergeSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.InPlaceMergeSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.DoubleStorageMergeSort">
            <summary>
            Double Storage Merge Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.DoubleStorageMergeSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.DoubleStorageMergeSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.DoubleStorageMergeSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.QuickSort">
            <summary>
            Quick Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.QuickSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.QuickSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.QuickSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="array">The array to sort.</param>
        </member>
        <member name="M:NLib.Collections.QuickSort.Sort(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Sort Array (IList) with specificed lower and upper bound
            </summary>
            <param name="array">Array to Sort</param>
            <param name="lower">Lower bound index</param>
            <param name="upper">Upper bound index</param>
        </member>
        <member name="T:NLib.Collections.ArrayQuickSort">
            <summary>
            Array Quick Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.ArrayQuickSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.ArrayQuickSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.ArrayQuickSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="array">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.FastQuickSort">
            <summary>
            Fast Quick Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.FastQuickSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.FastQuickSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.FastQuickSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="M:NLib.Collections.FastQuickSort.QuickSort(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            This is a generic version of C.A.R Hoare's Quick Sort 
            algorithm.  This will handle arrays that are already
            sorted, and arrays with duplicate keys.
            </summary>
            <remarks>
            If you think of a one dimensional array as going from
            the lowest index on the left to the highest index on the right
            then the parameters to this function are lowest index or
            left and highest index or right.  The first time you call
            this function it will be with the parameters 0, a.length - 1.
            </remarks>
            <param name="list">list to sort</param>
            <param name="l">left boundary of array partition</param>
            <param name="r">right boundary of array partition</param>
        </member>
        <member name="T:NLib.Collections.HybridBubbleQuickSort">
            <summary>
            Hybrid Bubble Fast Quick Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.HybridBubbleQuickSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.HybridBubbleQuickSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.HybridBubbleQuickSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.HeapSort">
            <summary>
            Heap Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.HeapSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.HeapSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.HeapSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.InsertionSort">
            <summary>
            Insertion Sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.InsertionSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.InsertionSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.InsertionSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.OddEvenTransportSort">
            <summary>
            Odd-Even Transport sort parralel algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.OddEvenTransportSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.OddEvenTransportSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.OddEvenTransportSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.ShakerSort">
            <summary>
            Shaker sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.ShakerSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.ShakerSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.ShakerSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.ShearSort">
            <summary>
            Shear sort parralel algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.ShearSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.ShearSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.ShearSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.ShellSort">
            <summary>
            Shell sort algorithm
            </summary>
        </member>
        <member name="M:NLib.Collections.ShellSort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.ShellSort.#ctor(System.Collections.IComparer,NLib.Collections.ISwap)">
            <summary>
            Constructor
            </summary>
            <param name="comparer">comparer object instance</param>
            <param name="swapper">swaper object instance</param>
        </member>
        <member name="M:NLib.Collections.ShellSort.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="list">The array to sort.</param>
        </member>
        <member name="T:NLib.Collections.ComparableComparer">
            <summary>
            Default <see cref="T:System.IComparable"/> object comparer.
            </summary>
        </member>
        <member name="M:NLib.Collections.ComparableComparer.Compare(System.IComparable,System.Object)">
            <summary>
            Compare
            </summary>
            <param name="x">IComparable instance</param>
            <param name="y">object to compare</param>
            <returns>0 if both object is equal. less than zero if x less than y and otherwise return value greater than zero</returns>
        </member>
        <member name="M:NLib.Collections.ComparableComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            IComparer.Compare
            </summary>
            <param name="x">object x to compare</param>
            <param name="y">object y to compare</param>
            <returns>See IComparer.Compare</returns>
        </member>
        <member name="T:NLib.Collections.ObjectComparer">
            <summary>
            General Object Comparer
            </summary>
        </member>
        <member name="M:NLib.Collections.ObjectComparer.#ctor(System.String[],System.Boolean[])">
            <summary>
            Constructor
            </summary>
            <param name="fields">field list to compare</param>
            <param name="descending">descending field list</param>
        </member>
        <member name="M:NLib.Collections.ObjectComparer.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="fields">field list to compare</param>
        </member>
        <member name="M:NLib.Collections.ObjectComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare
            </summary>
            <param name="x">object 1 to compare</param>
            <param name="y">object 2 to compare</param>
            <returns>see IComparer.Compare</returns>
        </member>
        <member name="T:NLib.Collections.MultiPropertyComparer">
            <summary>
            Multi Property Comparer
            </summary>
        </member>
        <member name="M:NLib.Collections.MultiPropertyComparer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.MultiPropertyComparer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Collections.MultiPropertyComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare object
            </summary>
            <param name="objA">Object A to Compare</param>
            <param name="objB">Object B to Compare</param>
            <returns>0 - A equal to B, -1 A less than B, 1 A greater than B</returns>
        </member>
        <member name="M:NLib.Collections.MultiPropertyComparer.PropertyCompare(System.Object,System.Object)">
            <summary>
            Compare object's property
            </summary>
            <param name="x">Object x to Compare</param>
            <param name="y">Object y to Compare</param>
            <returns>0 - x equal to y, -1 x less than y, 1 x greater than y</returns>
        </member>
        <member name="P:NLib.Collections.MultiPropertyComparer.CaseSensitive">
            <summary>
            Get/Set Compare with Case Sensitive or not
            </summary>
        </member>
        <member name="P:NLib.Collections.MultiPropertyComparer.Properties">
            <summary>
            Get/Set List of Property Name to Compares
            </summary>
        </member>
        <member name="P:NLib.Collections.MultiPropertyComparer.Descending">
            <summary>
            Get/Set List of Property Name that required to sort Descending (z to a)
            </summary>
        </member>
        <member name="P:NLib.Collections.MultiPropertyComparer.UsedPropertyAccess">
            <summary>
            Get/Set Use internal property access for fast access proeprty
            </summary>
        </member>
        <member name="T:NLib.Collections.EnhanceMultiPropertyComparer">
            <summary>
            Enhance Multi Property Comparer
            </summary>
        </member>
        <member name="M:NLib.Collections.EnhanceMultiPropertyComparer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Collections.EnhanceMultiPropertyComparer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Collections.EnhanceMultiPropertyComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare object
            </summary>
            <param name="objA">Object A to Compare</param>
            <param name="objB">Object B to Compare</param>
            <returns>0 - A equal to B, -1 A less than B, 1 A greater than B</returns>
        </member>
        <member name="M:NLib.Collections.EnhanceMultiPropertyComparer.PropertyCompare(System.Object,System.Object)">
            <summary>
            Compare object's property
            </summary>
            <param name="x">Object x to Compare</param>
            <param name="y">Object y to Compare</param>
            <returns>0 - x equal to y, -1 x less than y, 1 x greater than y</returns>
        </member>
        <member name="P:NLib.Collections.EnhanceMultiPropertyComparer.CaseSensitive">
            <summary>
            Get/Set Compare with Case Sensitive or not
            </summary>
        </member>
        <member name="P:NLib.Collections.EnhanceMultiPropertyComparer.Properties">
            <summary>
            Get/Set List of Property Name to Compares
            </summary>
        </member>
        <member name="P:NLib.Collections.EnhanceMultiPropertyComparer.Descending">
            <summary>
            Get/Set List of Property Name that required to sort Descending (z to a)
            </summary>
        </member>
        <member name="P:NLib.Collections.EnhanceMultiPropertyComparer.UsedDynamicAccess">
            <summary>
            Get/Set Use internal dynamic access for fast access proeprty
            </summary>
        </member>
        <member name="T:NLib.Collections.SortedManager">
            <summary>
            IList Sort Manager Helper Class
            </summary>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.String[])">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="SortedBy">sorted property list</param>
            <returns>sorted list (same instance as source)</returns>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.String[],System.Boolean)">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="SortedBy">sorted property list</param>
            <param name="usePropertyAccess">used property access instead of reflection</param>
            <returns>sorted list (same instance as source)</returns>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.String[],System.String[])">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="SortedBy">sorted property list</param>
            <param name="Descending">property that sorted Descending</param>
            <returns>sorted list (same instance as source)</returns>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.String[],System.String[],System.Boolean)">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="SortedBy">sorted property list</param>
            <param name="Descending">property that sorted Descending</param>
            <param name="usePropertyAccess">used property access instead of reflection</param>
            <returns>sorted list (same instance as source)</returns>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.Type,System.String[])">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="elementType">element type in list</param>
            <param name="SortedBy">sorted property list</param>
            <returns>sorted list (new instance of list will created)</returns>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.Type,System.String[],System.Boolean)">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="elementType">element type in list</param>
            <param name="SortedBy">sorted property list</param>
            <param name="usePropertyAccess">used property access instead of reflection</param>
            <returns>sorted list (new instance of list will created)</returns>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.Type,System.String[],System.String[])">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="elementType">element type in list</param>
            <param name="SortedBy">sorted property list</param>
            <param name="Descending">property that sorted Descending</param>
            <returns>sorted list (new instance of list will created)</returns>
        </member>
        <member name="M:NLib.Collections.SortedManager.Sort(System.Collections.IList,System.Type,System.String[],System.String[],System.Boolean)">
            <summary>
            Sort Data in List
            </summary>
            <param name="datasource">source list</param>
            <param name="elementType">element type in list</param>
            <param name="SortedBy">sorted property list</param>
            <param name="Descending">property that sorted Descending</param>
            <param name="usePropertyAccess">used property access instead of reflection</param>
            <returns>sorted list (new instance of list will created)</returns>
        </member>
        <member name="T:NLib.IOStatus">
            <summary>
            IOStatus enum.
            </summary>
        </member>
        <member name="F:NLib.IOStatus.Success">
            <summary>
            Operation is success.
            </summary>
        </member>
        <member name="F:NLib.IOStatus.Error">
            <summary>
            Operation is failed.
            </summary>
        </member>
        <member name="T:NLib.IOOperationResult">
            <summary>
            IOOperationResult class.
            </summary>
        </member>
        <member name="P:NLib.IOOperationResult.Success">
            <summary>
            Checks is operation is success or not.
            </summary>
        </member>
        <member name="T:NLib.KeyValue">
            <summary>
            KeyValue class. Used for keep reference name and full path name.
            </summary>
        </member>
        <member name="M:NLib.KeyValue.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.KeyValue.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The unique name.</param>
            <param name="value">The value associate with the name.</param>
        </member>
        <member name="P:NLib.KeyValue.Name">
            <summary>
            Get the Reference name or common name.
            </summary>
        </member>
        <member name="P:NLib.KeyValue.Value">
            <summary>
            Get the Value associated with the specificed name.
            </summary>
        </member>
        <member name="T:NLib.ProcessProgressEventHandler">
            <summary>
            Process Progress EventHandler
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The Event Args.</param>
        </member>
        <member name="T:NLib.ProcessProgressEventArgs">
            <summary>
            Process Progress EventArgs
            </summary>
        </member>
        <member name="M:NLib.ProcessProgressEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.ProcessProgressEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="processName">The Pprocess Name</param>
            <param name="methodName">The Execute Method Name.</param>
            <param name="processIndex">The process index in list that has same process name.</param>
            <param name="processCount">The process count that has same process name.</param>
            <param name="retryTime">The retry time.</param>
            <param name="retryMax">The retry max.</param>
        </member>
        <member name="M:NLib.ProcessProgressEventArgs.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.ProcessProgressEventArgs.ProcessName">
            <summary>
            Get the process name on operation.
            </summary>
        </member>
        <member name="P:NLib.ProcessProgressEventArgs.MethodName">
            <summary>
            Get Operation Method Name.
            </summary>
        </member>
        <member name="P:NLib.ProcessProgressEventArgs.ProcessIndex">
            <summary>
            Get current process index.
            </summary>
        </member>
        <member name="P:NLib.ProcessProgressEventArgs.NumberOfProcess">
            <summary>
            Get Number of process that has same process name.
            </summary>
        </member>
        <member name="P:NLib.ProcessProgressEventArgs.Retry">
            <summary>
            Get the retry time.
            </summary>
        </member>
        <member name="P:NLib.ProcessProgressEventArgs.MaxRetry">
            <summary>
            Get the maximum retry time.
            </summary>
        </member>
        <member name="T:NLib.ProcessOperationExceptionEventHandler">
            <summary>
            Process Operation Exception EventHandler
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The Event Args.</param>
        </member>
        <member name="T:NLib.ProcessOperationExceptionEventArgs">
            <summary>
            Process Operation Exception EventArgs
            </summary>
        </member>
        <member name="M:NLib.ProcessOperationExceptionEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.ProcessOperationExceptionEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="processName">The Pprocess Name</param>
            <param name="methodName">The Execute Method Name.</param>
            <param name="ex">The Exception instance.</param>
        </member>
        <member name="M:NLib.ProcessOperationExceptionEventArgs.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.ProcessOperationExceptionEventArgs.ProcessName">
            <summary>
            Get the process name on operation.
            </summary>
        </member>
        <member name="P:NLib.ProcessOperationExceptionEventArgs.MethodName">
            <summary>
            Get Operation Method Name.
            </summary>
        </member>
        <member name="P:NLib.ProcessOperationExceptionEventArgs.Exception">
            <summary>
            Get Exception Instance.
            </summary>
        </member>
        <member name="T:NLib.ProcessManager">
            <summary>
            Process Manager
            </summary>
        </member>
        <member name="P:NLib.ProcessManager.Instance">
            <summary>
            Get Application Process Manager Instance
            </summary>
        </member>
        <member name="M:NLib.ProcessManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.ProcessManager.GetProcesses">
            <summary>
            Get All Process
            </summary>
            <returns>all process avaliable at current time</returns>
        </member>
        <member name="M:NLib.ProcessManager.GetProcessNames">
            <summary>
            GetProcessNames
            </summary>
            <returns>all process's name avaliable at current time</returns>
        </member>
        <member name="M:NLib.ProcessManager.GetProcessByName(System.String)">
            <summary>
            Is Process Exists
            </summary>
            <param name="processName">Target Process's Name</param>
            <returns>all process that match process's name</returns>
        </member>
        <member name="M:NLib.ProcessManager.Kill(System.String)">
            <summary>
            Kill Process
            </summary>
            <param name="processName">Target Process's Name</param>
            <returns>Return true if process is killed.</returns>
        </member>
        <member name="M:NLib.ProcessManager.KillConsoleIME">
            <summary>
            Kill Console IME process.
            </summary>
        </member>
        <member name="M:NLib.ProcessManager.KillWithWMI(System.String)">
            <summary>
            Kill Process With WMI
            </summary>
            <param name="processName">Target Process's Name</param>
            <returns>Return true if process is killed.</returns>
        </member>
        <member name="M:NLib.ProcessManager.Run(System.String)">
            <summary>
            Run
            </summary>
            <param name="applicationName">Application's Name to start</param>
            <returns>true if process is started</returns>
        </member>
        <member name="M:NLib.ProcessManager.Run(System.String,System.String[])">
            <summary>
            Run
            </summary>
            <param name="applicationName">Application's Name to start</param>
            <param name="args">optional argument to send to application</param>
            <returns>true if process is started</returns>
        </member>
        <member name="M:NLib.ProcessManager.Run(System.String,System.String[],System.Diagnostics.ProcessWindowStyle)">
            <summary>
            Run
            </summary>
            <param name="applicationName">Application's Name to start</param>
            <param name="args">optional argument to send to application</param>
            <param name="style">Process window style</param>
            <returns>true if process is started</returns>
        </member>
        <member name="P:NLib.ProcessManager.MaximumRetryLoop">
            <summary>
            Get Maximum retry loop.
            </summary>
        </member>
        <member name="E:NLib.ProcessManager.OnKill">
            <summary>
            OnKill event. Occur when kill method is call.
            </summary>
        </member>
        <member name="E:NLib.ProcessManager.OnException">
            <summary>
            OnException event. Occur when exception is occur.
            </summary>
        </member>
        <member name="T:NLib.Reflection.ReflectionConsts">
            <summary>
            Reflection Consts class. Provide common place to keep constant and message.
            </summary>
        </member>
        <member name="T:NLib.Reflection.ReflectionConsts.Errors">
            <summary>
            The Error Message.
            </summary>
        </member>
        <member name="F:NLib.Reflection.ReflectionConsts.Errors.InitBadName">
            <summary>
            Bad Name Error Message.
            </summary>
        </member>
        <member name="F:NLib.Reflection.ReflectionConsts.Errors.InitBadIndex">
            <summary>
            Bad Index Error Message.
            </summary>
        </member>
        <member name="F:NLib.Reflection.ReflectionConsts.Errors.InvalidOpGetName">
            <summary>
            Invalid Access By Name.
            </summary>
        </member>
        <member name="F:NLib.Reflection.ReflectionConsts.Errors.InvalidOpGetIndex">
            <summary>
            Invalid Access By Index.
            </summary>
        </member>
        <member name="F:NLib.Reflection.ReflectionConsts.Errors.NotExpectedType">
            <summary>
            Not expected type.
            </summary>
        </member>
        <member name="F:NLib.Reflection.ReflectionConsts.Errors.NoSuchMethod">
            <summary>
            Failed to get type for specificed method
            </summary>
        </member>
        <member name="T:NLib.Reflection.GenericBinder">
            <Summary>
            Selects a member from a list of candidates, and performs type conversion
            from actual argument type to formal argument type.
            </Summary>
        </member>
        <member name="M:NLib.Reflection.GenericBinder.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="genericMethodDefinition">Specificed is generic method definition.</param>
        </member>
        <member name="M:NLib.Reflection.GenericBinder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
            <summary>
            Bind To Method. For more inforamtion <see cref="T:System.Reflection.Binder"/>.
            </summary>
            <param name="bindingAttr">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="match">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="args">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="modifiers">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="culture">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="names">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="state">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <returns>For more inforamtion <see cref="T:System.Reflection.Binder"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.GenericBinder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Bind To Field. For more inforamtion <see cref="T:System.Reflection.Binder"/>.
            </summary>
            <param name="bindingAttr">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="match">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="value">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="culture">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <returns>For more inforamtion <see cref="T:System.Reflection.Binder"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.GenericBinder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Select Method. For more inforamtion <see cref="T:System.Reflection.Binder"/>.
            </summary>
            <param name="bindingAttr">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="matchMethods">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="parameterTypes">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="modifiers">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <returns>For more inforamtion <see cref="T:System.Reflection.Binder"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.GenericBinder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Select Property. For more inforamtion <see cref="T:System.Reflection.Binder"/>.
            </summary>
            <param name="bindingAttr">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="match">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="returnType">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="indexes">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="modifiers">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <returns>For more inforamtion <see cref="T:System.Reflection.Binder"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.GenericBinder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Change Type. For more inforamtion <see cref="T:System.Reflection.Binder"/>.
            </summary>
            <param name="value">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="type">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="culture">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <returns>For more inforamtion <see cref="T:System.Reflection.Binder"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.GenericBinder.ReorderArgumentArray(System.Object[]@,System.Object)">
            <summary>
            Reorder Argument Array.
            </summary>
            <param name="args">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
            <param name="state">For more inforamtion <see cref="T:System.Reflection.Binder"/>.</param>
        </member>
        <member name="P:NLib.Reflection.GenericBinder.Generic">
            <summary>
            Get Generic Binder instance.
            </summary>
        </member>
        <member name="P:NLib.Reflection.GenericBinder.NonGeneric">
            <summary>
            Get Non Generic Binder instance.
            </summary>
        </member>
        <member name="T:NLib.Reflection.Common.NameOrIndexParameter">
            <summary>
            This argument adapter class allows either names (strings) or
            indices (ints) to be passed to a function.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The Name.</param>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">object to compare</param>
            <returns>true if object is equal</returns>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.GetHashCode">
            <summary>
            Get Hash code
            </summary>
            <returns>Return hash code value.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.ToString">
            <summary>
            ToString
            </summary>
            <returns>string that represent object instamce</returns>
        </member>
        <member name="P:NLib.Reflection.Common.NameOrIndexParameter.ByName">
            <summary>
            Is Parameter is initialized by Name
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.NameOrIndexParameter.Name">
            <summary>
            Get Name
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.NameOrIndexParameter.Index">
            <summary>
            Get Index
            </summary>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.FromStringArray(System.String[])">
            <summary>
            Assign From String Array
            </summary>
            <param name="names">The Name array.</param>
            <returns>Return NameOrIndexParameter array.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.FromIndexArray(System.Int32[])">
            <summary>
            Assign From Index Array
            </summary>
            <param name="indices">The Index array.</param>
            <returns>Return NameOrIndexParameter array.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.op_Implicit(System.String)~NLib.Reflection.Common.NameOrIndexParameter">
            <summary>
            Convert string to NameOrIndexParameter
            </summary>
            <param name="name">Name to convert</param>
            <returns>new instance of NameOrIndexParameter</returns>
        </member>
        <member name="M:NLib.Reflection.Common.NameOrIndexParameter.op_Implicit(System.Int32)~NLib.Reflection.Common.NameOrIndexParameter">
            <summary>
            Convert int to NameOrIndexParameter
            </summary>
            <param name="index">index to convert</param>
            <returns>new instance of NameOrIndexParameter</returns>
        </member>
        <member name="T:NLib.Reflection.Common.FakeMethodInfo">
            <summary>
            Fake Method Info Abstract class.
            </summary>
        </member>
        <member name="T:NLib.Reflection.Common.FakeMethodInfo.CustomAttributeProvider">
            <summary>
            Custom Attribute Provider
            </summary>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.CustomAttributeProvider.GetCustomAttributes(System.Boolean)">
            <summary>
            Get Custom Attributes
            </summary>
            <param name="inherit">True for search in chain.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.CustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Get Custom Attributes
            </summary>
            <param name="attributeType"></param>
            <param name="inherit">True for search in chain.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.CustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
            <summary>
            IsDefined.
            </summary>
            <param name="attributeType">The attribute.</param>
            <param name="inherit">True for search in chain.</param>
            <returns>Return in this class always return false.</returns>
        </member>
        <member name="F:NLib.Reflection.Common.FakeMethodInfo._pair">
            <summary>
            Access associated MethodInfo.
            </summary>
        </member>
        <member name="F:NLib.Reflection.Common.FakeMethodInfo._property">
            <summary>
            Access associated PropertyInfo.
            </summary>
        </member>
        <member name="F:NLib.Reflection.Common.FakeMethodInfo._customAttributeProvider">
            <summary>
            The custom attribute provider.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.#ctor(System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            Constructor
            </summary>
            <param name="propertyInfo">The property information instance.</param>
            <param name="pair">The Method Info instance.</param>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.Attributes">
            <summary>
            Get Method Attributes.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.CallingConvention">
            <summary>
            Get Calling Conventions.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.DeclaringType">
            <summary>
            Get Declaring Type.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.GetBaseDefinition">
            <summary>
            Get Base Definition.
            </summary>
            <returns>Return method information instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Get Custom Attributes.
            </summary>
            <param name="inherit">True for chain search.</param>
            <returns>Return custom attributes for specificed property.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Get Custom Attributes.
            </summary>
            <param name="attributeType">The attribute type to search for.</param>
            <param name="inherit">True for chain search.</param>
            <returns>Return custom attributes for specificed property.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.GetMethodImplementationFlags">
            <summary>
            Get Method Implementation Flags
            </summary>
            <returns>Return MethodImplAttributes instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Invoke.
            </summary>
            <param name="obj">The target object.</param>
            <param name="invokeAttr">The Binding Flags.</param>
            <param name="binder">The Binder instance.</param>
            <param name="parameters">The parameters.</param>
            <param name="culture">The CultureInfo instance.</param>
            <returns>Return object that return from invocation.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeMethodInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            Check Is Defined speficifed attribute.
            </summary>
            <param name="attributeType">The speficifed attribute.</param>
            <param name="inherit">True for chain search.</param>
            <returns>Return In this class this method always return false.</returns>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.MemberType">
            <summary>
            Get Member Type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.MethodHandle">
            <summary>
            Get Method Handle.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.ReflectedType">
            <summary>
            Get Reflected Type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.ReturnTypeCustomAttributes">
            <summary>
            Get Custom Attribute for Return Type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeMethodInfo.ReturnParameter">
            <summary>
            Get Return parameter.
            </summary>
        </member>
        <member name="T:NLib.Reflection.Common.FakeParameterInfo">
            <summary>
            FakeParameterInfo class.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Common.FakeParameterInfo.#ctor(System.String,System.Type,System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="name">The parameter's name.</param>
            <param name="type">The parameter's type.</param>
            <param name="memberInfo">The Member info instance.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:NLib.Reflection.Common.FakeParameterInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Constructor
            </summary>
            <param name="method">The method info instance.</param>
        </member>
        <member name="P:NLib.Reflection.Common.FakeParameterInfo.Attributes">
            <summary>
            Get Parameter's Attributes.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeParameterInfo.DefaultValue">
            <summary>
            Get Default Value. Alway return DBNull.Value.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Common.FakeParameterInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Get Custom Attributes.
            </summary>
            <param name="inherit">True for search chain.</param>
            <returns>Return Custom Attributes.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Get Custom Attributes.
            </summary>
            <param name="attributeType">The attribute type to serach for.</param>
            <param name="inherit">True for search chain.</param>
            <returns>Return Custom Attributes.</returns>
        </member>
        <member name="M:NLib.Reflection.Common.FakeParameterInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            Is Defined.
            </summary>
            <param name="attributeType">The attribute type to serach for.</param>
            <param name="inherit">True for search chain.</param>
            <returns>Return true if match.</returns>
        </member>
        <member name="P:NLib.Reflection.Common.FakeParameterInfo.Member">
            <summary>
            Get MemberInfo instance.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeParameterInfo.Name">
            <summary>
            Get Parameter's Name.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeParameterInfo.ParameterType">
            <summary>
            Get Parameter's Type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Common.FakeParameterInfo.Position">
            <summary>
            Get Position. Alway return 0.
            </summary>
        </member>
        <member name="T:NLib.Reflection.DelegateInvoker">
            <summary>
            The Delegate Invoker. This class contains static method to invoke delegate without concern about
            cross thread problem.
            </summary>
        </member>
        <member name="M:NLib.Reflection.DelegateInvoker.__Invoke(System.Delegate,System.Object[])">
            <summary>
            Invoke Delegate.
            </summary>
            <param name="del">delegate to invoke</param>
            <param name="args">args for delegate</param>
            <returns>Return result of invocation.</returns>
        </member>
        <member name="M:NLib.Reflection.DelegateInvoker.DoEvents">
            <summary>
            Application DoEvents.
            </summary>
        </member>
        <member name="M:NLib.Reflection.DelegateInvoker.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the 
            UI object's underlying window handle, with the specified list of arguments.
            </summary>
            <param name="del">
            A delegate to a method that takes parameters of the same number and type that 
            are contained in the args parameter.
            </param>
            <param name="args">
            An array of objects to pass as arguments to the specified method. 
            This parameter can be null if the method takes no arguments. 
            </param>
            <returns>
            An Object that contains the return value from the delegate being invoked, 
            or null if the delegate has no return value.
            </returns>
        </member>
        <member name="T:NLib.Reflection.Cache">
            <summary>
            Cache for Dynamic IL access
            </summary>
        </member>
        <member name="T:NLib.Reflection.Cache.IL">
            <summary>
            Imediate Language (IL) wrapper clase
            </summary>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="t">Target Type</param>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            EmitCastToReference
            </summary>
            <param name="il">ILGenerator instance</param>
            <param name="type">Type to cast</param>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            EmitBoxIfNeeded
            </summary>
            <param name="il">ILGenerator instance</param>
            <param name="type">Type to cast</param>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            EmitFastInt
            </summary>
            <param name="il">ILGenerator instance</param>
            <param name="value">int value</param>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.MethodInvoker(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Get Method Invoker
            </summary>
            <param name="methodInfo">Method info instance</param>
            <param name="paramTypes">Type of parameters</param>
            <returns>Method delegate</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.PropertyGetInvoker(System.Reflection.PropertyInfo)">
            <summary>
            Get Property Get Invoker
            </summary>
            <param name="propInfo">PropertyInfo instance</param>
            <returns>Get Invoker delegate</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.PropertySetInvoker(System.Reflection.PropertyInfo)">
            <summary>
            Get Property Set Invoker
            </summary>
            <param name="propInfo">PropertyInfo instance</param>
            <returns>Set Invoker delegate</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.GetConstructorInvoker">
            <summary>
            Get Constructor Invoker
            </summary>
            <returns>Constructor delegate</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.IL.GetConstructorInvoker(System.Object[])">
            <summary>
            Get Constructor Invoker
            </summary>
            <param name="Params">Constructor's parameters</param>
            <returns>Paramterised Constructor delegate</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.Create(System.Type)">
            <summary>
            Create new instance of Type
            </summary>
            <param name="t">Target Type</param>
            <returns>new instance of target type</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.Create(System.Type,System.Object[])">
            <summary>
            Create new instance of Type
            </summary>
            <param name="t">Target Type</param>
            <param name="Params"></param>
            <returns>new instance of target type</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.GetProperty(System.Type,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Get Property
            </summary>
            <param name="t">Target Type</param>
            <param name="instance">Object instance</param>
            <param name="info">PropertyInfo instance</param>
            <returns>value that get from specificed property</returns>
        </member>
        <member name="M:NLib.Reflection.Cache.SetProperty(System.Type,System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Set Property
            </summary>
            <param name="t">Target Type</param>
            <param name="instance">Object instance</param>
            <param name="info">PropertyInfo instance</param>
            <param name="Value">value that set to specificed property</param>
        </member>
        <member name="M:NLib.Reflection.Cache.CallMethod(System.Type,System.Object,System.Reflection.MethodInfo,System.Type[],System.Object[])">
            <summary>
            Call Method
            </summary>
            <param name="t">Target Type</param>
            <param name="instance">Object instance</param>
            <param name="info">MethodInfo instance</param>
            <param name="ParamTypes">Type of Parameters</param>
            <param name="Params">Value of Parameters</param>
            <returns>result that return from specificed method.</returns>
        </member>
        <member name="T:NLib.Reflection.DynamicAccess">
            <summary>
            Encapsulates a dynamic access instance of an object
            </summary>
            <remarks>
            This class is used as an alternative to the System.Reflection classes and methods
            to access a Type's properties and Methods at runtime, based on data retrieved from
            runtime configuration. It generates and cache's they Type's MSIL code at runtime, 
            providing much more efficient access to the object's members than Reflection can.
            <para>
            An instance of this class can be used to construct an instance of the dynamic access class,
            and/or to call both either instance or static methods on the class. This is particularly 
            useful when all you have is an interface returned from some unknown plug-in, but the plug-in
            requires other properties in order to operate correctly.
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.#ctor(System.Type)">
            <summary>
            Dynamic Access object constructor, when only the type of the object required is known.
            </summary>
            <param name="t">The type of object the caller requires an new instance of.</param>
            <remarks>
            This constructor will generate and call the IL required to create an instance of an
            object of Type t. This call is considerably faster than using reflection to perform
            the same job, particularly as the generated IL is cached to reuse whenever another
            instance of the object is required.
            <example>
            <code>
            Type t;
            
            t = SomeType;
            DynamicAccess someType = new DynamicAccess(t);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.#ctor(System.Type,System.Object[])">
            <summary>
            DynamicAccess object parameterised constructor, where the unknown object's constructor
            requires parameters.
            </summary>
            <param name="t">The type of object the caller requires an instance of</param>
            <param name="Params">Parameters reuired for type t's constructor</param>
            <remarks>
            This constructor will generate and call the IL required to create an instance of an
            object of Type t, passing the supplied parameters to the appropriate constructor. 
            This call is considerably faster than using reflection to perform the same job,
            particularly as the generated IL is cached to reuse whenever another
            instance of the object is required.
            <para>
            Note that the types of the parameters passed into this constructor must match exactly
            the signature of required object's constructor parameters, otherwise the call will fail.
            </para>
            <para>
            This type of constructor is particularly useful when it is known that a type that 
            implements a known interface takes a parameterised constructor. The follwing example 
            constructs an object that implements IMyPlugin where the Type has been retrieved from
            an attribute on the class. It has been agreed that the plugins will be able to accept
            a configuration file's path as a constructor parameter, in order to initialise its 
            custom properties.
            <example>
            <code>
            Attribute attr = Attribute.GetCustomAttribute(MyPluginAssembly, typeof(PluginImplementationAttribute));
            Type t = attr.PluginImplentationType;
            String path = MySettingsPath;
            
            DynamicAccess MyPluginInstance = new DynamicAccess(t, path);
            IMyPlugin iPlugin = (IMyPlugin)MyPluginInstance.Instance;
            </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.#ctor(System.Object)">
            <summary>
            Creates a DynamicAccess object from an existing instance of the type
            </summary>
            <param name="Instance">The object you want to call Latebound methods and properties on</param>
            <remarks>
            This type of latebound constructor is usefule when a plugin returns an interface pointer
            to a constructed object. The resulting latebound object will then allow the caller to
            call other properties and methods on the object that are not included in the interface.
            <example>
            <code>
            IMyPlugin myPlugin = PluginManager.CreateInstance("MyPluginName");
            DynamicAccess myLateboundInstance = new DynamicAccess(myPlugin);
            
            object myPluginProperty = myLateboundInstance["ThePropertyName"];
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:NLib.Reflection.DynamicAccess.Item(System.String)">
            <summary>
            Get/Set Property's value by specificed Property Name
            </summary>
            <param name="PropertyName">specificed Property Name to get/set value</param>
            <returns>value that stored in specificed property's name</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.Call(System.String,System.Object[])">
            <summary>
            Call Method
            </summary>
            <param name="MethodName">target method's name</param>
            <param name="Params">parameter for specificed method</param>
            <returns>value that return from specificed method.</returns>
        </member>
        <member name="P:NLib.Reflection.DynamicAccess.Instance">
            <summary>
            Get Object instance
            </summary>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.Get(System.Object,System.String)">
            <summary>
            Get Value from Property
            </summary>
            <param name="instance">Object Instance</param>
            <param name="PropertyName">Property's Name</param>
            <returns>value that contain in specificed property</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.Set(System.Object,System.String,System.Object)">
            <summary>
            Set Value to Property
            </summary>
            <param name="instance">Object Instance</param>
            <param name="PropertyName">Property's Name</param>
            <param name="Value">value to assigned to property</param>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.Call(System.Object,System.String,System.Object[])">
            <summary>
            Call Method
            </summary>
            <param name="instance">Object Instance</param>
            <param name="MethodName">target method's name</param>
            <param name="Params">parameter for specificed method</param>
            <returns>value that return from specificed method.</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.CallStatic(System.Type,System.String,System.Object[])">
            <summary>
            Call Static Method
            </summary>
            <param name="t">Target Type</param>
            <param name="MethodName">Static Method's Name</param>
            <param name="Params">Method Parameters</param>
            <returns>value that return from method</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.GetStatic(System.Type,System.String)">
            <summary>
            Get Value from Static Property
            </summary>
            <param name="t">Target Type</param>
            <param name="PropertyName">Property's Name</param>
            <returns>value that contain in specificed property</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.SetStatic(System.Type,System.String,System.Object)">
            <summary>
            Set Value to Static Property
            </summary>
            <param name="t">Target Type</param>
            <param name="PropertyName">Property's Name</param>
            <param name="Value">value to assigned to property</param>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.Create(System.Type)">
            <summary>
            Create New instance
            </summary>
            <param name="t">Type of object</param>
            <returns>return new object instance</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess.Create(System.Type,System.Object[])">
            <summary>
            Create New instance
            </summary>
            <param name="t">Type of object</param>
            <param name="Params">constructor parameters</param>
            <returns>return new object instance</returns>
        </member>
        <member name="T:NLib.Reflection.DynamicAccess`1">
            <summary>
            Encapsulates a dynamic access instance of an object. Generic Version
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <remarks>
            This class is used as an alternative to the System.Reflection classes and methods
            to access a Type's properties and Methods at runtime, based on data retrieved from
            runtime configuration. It generates and cache's they Type's MSIL code at runtime, 
            providing much more efficient access to the object's members than Reflection can.
            <para>
            An instance of this class can be used to construct an instance of the dynamic access class,
            and/or to call both either instance or static methods on the class. This is particularly 
            useful when all you have is an interface returned from some unknown plug-in, but the plug-in
            requires other properties in order to operate correctly.
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.#ctor">
            <summary>
            Dynamic Access object constructor, when only the type of the object required is known.
            </summary>
            <remarks>
            This constructor will generate and call the IL required to create an instance of an
            object of Type t. This call is considerably faster than using reflection to perform
            the same job, particularly as the generated IL is cached to reuse whenever another
            instance of the object is required.
            <example>
            <code>
            Type t;
            
            t = SomeType;
            DynamicAccess someType = new DynamicAccess(t);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.#ctor(System.Object[])">
            <summary>
            DynamicAccess object parameterised constructor, where the unknown object's constructor
            requires parameters.
            </summary>
            <param name="Params">Parameters reuired for type t's constructor</param>
            <remarks>
            This constructor will generate and call the IL required to create an instance of an
            object of Type t, passing the supplied parameters to the appropriate constructor. 
            This call is considerably faster than using reflection to perform the same job,
            particularly as the generated IL is cached to reuse whenever another
            instance of the object is required.
            <para>
            Note that the types of the parameters passed into this constructor must match exactly
            the signature of required object's constructor parameters, otherwise the call will fail.
            </para>
            <para>
            This type of constructor is particularly useful when it is known that a type that 
            implements a known interface takes a parameterised constructor. The follwing example 
            constructs an object that implements IMyPlugin where the Type has been retrieved from
            an attribute on the class. It has been agreed that the plugins will be able to accept
            a configuration file's path as a constructor parameter, in order to initialise its 
            custom properties.
            <example>
            <code>
            Attribute attr = Attribute.GetCustomAttribute(MyPluginAssembly, typeof(PluginImplementationAttribute));
            Type t = attr.PluginImplentationType;
            String path = MySettingsPath;
            
            DynamicAccess MyPluginInstance = new DynamicAccess(t, path);
            IMyPlugin iPlugin = (IMyPlugin)MyPluginInstance.Instance;
            </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.#ctor(System.Object)">
            <summary>
            Creates a DynamicAccess object from an existing instance of the type
            </summary>
            <param name="Instance">The object you want to call Latebound methods and properties on</param>
            <remarks>
            This type of latebound constructor is usefule when a plugin returns an interface pointer
            to a constructed object. The resulting latebound object will then allow the caller to
            call other properties and methods on the object that are not included in the interface.
            <example>
            <code>
            IMyPlugin myPlugin = PluginManager.CreateInstance("MyPluginName");
            DynamicAccess myLateboundInstance = new DynamicAccess(myPlugin);
            
            object myPluginProperty = myLateboundInstance["ThePropertyName"];
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:NLib.Reflection.DynamicAccess`1.Item(System.String)">
            <summary>
            Get/Set Property's value by specificed Property Name
            </summary>
            <param name="PropertyName">specificed Property Name to get/set value</param>
            <returns>value that stored in specificed property's name</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.Call(System.String,System.Object[])">
            <summary>
            Call Method
            </summary>
            <param name="MethodName">target method's name</param>
            <param name="Params">parameter for specificed method</param>
            <returns>value that return from specificed method.</returns>
        </member>
        <member name="P:NLib.Reflection.DynamicAccess`1.Instance">
            <summary>
            Get Object instance
            </summary>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.Get(System.Object,System.String)">
            <summary>
            Get Value from Property
            </summary>
            <param name="instance">Object Instance</param>
            <param name="PropertyName">Property's Name</param>
            <returns>value that contain in specificed property</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.Set(System.Object,System.String,System.Object)">
            <summary>
            Set Value to Property
            </summary>
            <param name="instance">Object Instance</param>
            <param name="PropertyName">Property's Name</param>
            <param name="Value">value to assigned to property</param>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.Call(System.Object,System.String,System.Object[])">
            <summary>
            Call Method
            </summary>
            <param name="instance">Object Instance</param>
            <param name="MethodName">target method's name</param>
            <param name="Params">parameter for specificed method</param>
            <returns>value that return from specificed method.</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.CallStatic(System.String,System.Object[])">
            <summary>
            Call Static Method
            </summary>
            <param name="MethodName">Static Method's Name</param>
            <param name="Params">Method Parameters</param>
            <returns>value that return from method</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.GetStatic(System.String)">
            <summary>
            Get Value from Static Property
            </summary>
            <param name="PropertyName">Property's Name</param>
            <returns>value that contain in specificed property</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.SetStatic(System.String,System.Object)">
            <summary>
            Set Value to Static Property
            </summary>
            <param name="PropertyName">Property's Name</param>
            <param name="Value">value to assigned to property</param>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.Create">
            <summary>
            Create New instance
            </summary>
            <returns>return new object instance</returns>
        </member>
        <member name="M:NLib.Reflection.DynamicAccess`1.Create(System.Object[])">
            <summary>
            Create New instance
            </summary>
            <param name="Params">constructor parameters</param>
            <returns>return new object instance</returns>
        </member>
        <member name="T:NLib.Reflection.Emit.AssemblyAssist">
            <summary>
            Assembly Assist. A wrapper around the <see cref="P:NLib.Reflection.Emit.AssemblyAssist.AssemblyBuilder"/> and <see cref="P:NLib.Reflection.Emit.AssemblyAssist.ModuleBuilder"/> classes.
            </summary>
            <seealso cref="T:System.Reflection.Emit.AssemblyBuilder">AssemblyBuilder Class</seealso>
            <seealso cref="T:System.Reflection.Emit.ModuleBuilder">ModuleBuilder Class</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.#ctor(System.String,System.String)">
            <summary>
            Constructor. Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.AssemblyAssist"/> class
            with the specified parameters.
            </summary>
            <param name="assemblyName">The Assembly's Name</param>
            <param name="moduleName">The Module's Name</param>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.AssemblyAssist.AssemblyBuilder">
            <summary>
            Gets Assembly Builder.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.AssemblyAssist.AssemblyName">
            <summary>
            Gets Assembly Name.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.AssemblyAssist.ModuleName">
            <summary>
            Get Module's Name
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.AssemblyAssist.ModuleBuilder">
            <summary>
            Gets ModuleBuilder.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.op_Implicit(NLib.Reflection.Emit.AssemblyAssist)~System.Reflection.Emit.AssemblyBuilder">
            <summary>
            Converts the supplied <see cref="T:NLib.Reflection.Emit.AssemblyAssist"/> instance to a <see cref="P:NLib.Reflection.Emit.AssemblyAssist.AssemblyBuilder"/>.
            </summary>
            <param name="assemblyAssist">The <see cref="T:NLib.Reflection.Emit.AssemblyAssist"/> instance.</param>
            <returns>An <see cref="P:NLib.Reflection.Emit.AssemblyAssist.AssemblyBuilder"/> instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.op_Implicit(NLib.Reflection.Emit.AssemblyAssist)~System.Reflection.Emit.ModuleBuilder">
            <summary>
            Converts the supplied <see cref="T:NLib.Reflection.Emit.AssemblyAssist"/> instance to a <see cref="P:NLib.Reflection.Emit.AssemblyAssist.ModuleBuilder"/>.
            </summary>
            <param name="assemblyAssist">The <see cref="T:NLib.Reflection.Emit.AssemblyAssist"/> instance.</param>
            <returns>A <see cref="P:NLib.Reflection.Emit.AssemblyAssist.ModuleBuilder"/> instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.DefineType(System.String)">
            <summary>
            Constructs a <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance for a type with the specified name.
            </summary>
            <param name="name">The full path of the type.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
            ModuleBuilder.DefineType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.DefineType(System.String,System.Type)">
            <summary>
            Constructs a <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance for a type with the specified name 
            and base type.
            </summary>
            <param name="name">The full path of the type.</param>
            <param name="parent">The Type that the defined type extends.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
            ModuleBuilder.DefineType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
            <summary>
            Constructs a <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance for a type with the specified name, 
            its attributes, and base type.
            </summary>
            <param name="name">The full path of the type.</param>
            <param name="attrs">The attribute to be associated with the type.</param>
            <param name="parent">The Type that the defined type extends.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
            ModuleBuilder.DefineType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.DefineType(System.String,System.Type,System.Type[])">
            <summary>
            Constructs a <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance for a type with the specified name, 
            base type,
            and the interfaces that the defined type implements.
            </summary>
            <param name="name">The full path of the type.</param>
            <param name="parent">The Type that the defined type extends.</param>
            <param name="interfaces">The list of interfaces that the type implements.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            ModuleBuilder.DefineType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.AssemblyAssist.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            <summary>
            Constructs a <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance for a type with the specified name, its attributes, base type,
            and the interfaces that the defined type implements.
            </summary>
            <param name="name">The full path of the type.</param>
            <param name="attrs">The attribute to be associated with the type.</param>
            <param name="parent">The Type that the defined type extends.</param>
            <param name="interfaces">The list of interfaces that the type implements.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">ModuleBuilder.DefineType Method</seealso>
        </member>
        <member name="T:NLib.Reflection.Emit.TypeAssist">
            <summary>
            Type Assist. A wrapper around the <see cref="P:NLib.Reflection.Emit.TypeAssist.TypeBuilder"/> class.
            </summary>
            <seealso cref="T:System.Reflection.Emit.TypeBuilder">TypeBuilder Class</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.#ctor(NLib.Reflection.Emit.AssemblyAssist,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Constructor. Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.TypeAssist"/> class
            with the specified parameters.
            </summary>
            <param name="assemblyAssist">Associated <see cref="T:NLib.Reflection.Emit.AssemblyAssist"/> instance.</param>
            <param name="typeBuilder">A <see cref="P:NLib.Reflection.Emit.TypeAssist.TypeBuilder"/> instance.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.TypeAssist.TypeInitializer">
            <summary>
            Gets the initializer for this type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.TypeAssist.IsTypeInitializerDefined">
            <summary>
            Returns true if the initializer for this type has a body.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.TypeAssist.DefaultConstructor">
            <summary>
            Gets the default constructor for this type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.TypeAssist.IsDefaultConstructorDefined">
            <summary>
            Returns true if the default constructor for this type has a body.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.TypeAssist.OverriddenMethods">
            <summary>
            Retrieves the map of base type methods overridden by this type.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="attributes">The attributes of the method. </param>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The types of the parameters of the method.</param>
            <returns>The defined method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="attributes">The attributes of the method. </param>
            <param name="callingConvention">The <see cref="T:System.Reflection.CallingConventions">calling convention</see> of the method.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The types of the parameters of the method.</param>
            <returns>The defined method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type)">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="attributes">The attributes of the method. </param>
            <param name="returnType">The return type of the method.</param>
            <returns>The defined method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.String,System.Reflection.MethodAttributes)">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="attributes">The attributes of the method. </param>
            <returns>The defined method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="attributes">The attributes of the method. </param>
            <returns>The defined method assist instance.</returns>
            <param name="callingConvention">The calling convention of the method.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineGenericMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type,System.Type[])">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="attributes">The attributes of the method. </param>
            <param name="callingConvention">The <see cref="T:System.Reflection.CallingConventions">calling convention</see> of the method.</param>
            <param name="genericArguments">Generic arguments of the method.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The types of the parameters of the method.</param>
            <returns>The defined (generic) method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.String,System.Reflection.MethodInfo,System.Reflection.MethodAttributes)">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="methodInfoDeclaration">The method whose declaration is to be used.</param>
            <param name="attributes">The attributes of the method. </param>
            <returns>The defined method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.String,System.Reflection.MethodInfo)">
            <summary>
            Adds a new method to the class, with the given name and method signature.
            </summary>
            <param name="name">The name of the method. name cannot contain embedded nulls. </param>
            <param name="methodInfoDeclaration">The method whose declaration is to be used.</param>
            <returns>The defined method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineMethod(System.Reflection.MethodInfo)">
            <summary>
            Adds a new private method to the class.
            </summary>
            <param name="methodInfoDeclaration">The method whose declaration is to be used.</param>
            <returns>The defined method assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.Create">
            <summary>
            Creates a Type object for the class.
            </summary>
            <returns>Returns the new Type object for this class.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.SetCustomAttribute(System.Type)">
            <summary>
            Sets a custom attribute using a custom attribute type.
            </summary>
            <param name="attributeType">Attribute type.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.SetCustomAttribute(System.Type,System.Reflection.PropertyInfo[],System.Object[])">
            <summary>
            Sets a custom attribute using a custom attribute type
            and named properties.
            </summary>
            <param name="attributeType">Attribute type.</param>
            <param name="properties">Named properties of the custom attribute.</param>
            <param name="propertyValues">Values for the named properties of the custom attribute.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.SetCustomAttribute(System.Type,System.String,System.Object)">
            <summary>
            Sets a custom attribute using a custom attribute type
            and named property.
            </summary>
            <param name="attributeType">Attribute type.</param>
            <param name="propertyName">A named property of the custom attribute.</param>
            <param name="propertyValue">Value for the named property of the custom attribute.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
            <summary>
            Adds a new field to the class, with the given name, attributes and field type.
            </summary>
            <param name="fieldName">The name of the field. <paramref name="fieldName"/> cannot contain embedded nulls.</param>
            <param name="type">The type of the field.</param>
            <param name="attributes">The attributes of the field.</param>
            <returns>The defined field.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefinePublicConstructor(System.Type[])">
            <summary>
            Adds a new public constructor to the class, with the given parameters.
            </summary>
            <param name="parameterTypes">The types of the parameters of the method.</param>
            <returns>The defined constructor assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
            <summary>
            Adds a new constructor to the class, with the given attributes and parameters.
            </summary>
            <param name="attributes">The attributes of the field.</param>
            <param name="callingConvention">The <see cref="T:System.Reflection.CallingConventions">calling convention</see> of the method.</param>
            <param name="parameterTypes">The types of the parameters of the method.</param>
            <returns>The defined constructor assist instance.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineNestedType(System.String)">
            <summary>
            Defines a nested type given its name..
            </summary>
            <param name="name">The short name of the type.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
            TypeBuilder.DefineNestedType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineNestedType(System.String,System.Type)">
            <summary>
            Defines a public nested type given its name and the type that it extends.
            </summary>
            <param name="name">The short name of the type.</param>
            <param name="parent">The type that the nested type extends.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
            TypeBuilder.DefineNestedType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
            <summary>
            Defines a nested type given its name, attributes, and the type that it extends.
            </summary>
            <param name="name">The short name of the type.</param>
            <param name="attributes">The attributes of the type.</param>
            <param name="parent">The type that the nested type extends.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
            TypeBuilder.DefineNestedType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineNestedType(System.String,System.Type,System.Type[])">
            <summary>
            Defines a public nested type given its name, the type that it extends, and the interfaces that it implements.
            </summary>
            <param name="name">The short name of the type.</param>
            <param name="parent">The type that the nested type extends.</param>
            <param name="interfaces">The interfaces that the nested type implements.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            TypeBuilder.DefineNestedType Method</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            <summary>
            Defines a nested type given its name, attributes, the type that it extends, and the interfaces that it implements.
            </summary>
            <param name="name">The short name of the type.</param>
            <param name="attributes">The attributes of the type.</param>
            <param name="parent">The type that the nested type extends.</param>
            <param name="interfaces">The interfaces that the nested type implements.</param>
            <returns>Returns the created <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</returns>
            <seealso cref="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">ModuleBuilder.DefineType Method</seealso>
        </member>
        <member name="P:NLib.Reflection.Emit.TypeAssist.Assembly">
            <summary>
            Gets associated <see cref="T:NLib.Reflection.Emit.AssemblyAssist"/> instance.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.TypeAssist.TypeBuilder">
            <summary>
            Gets <see cref="T:System.Reflection.Emit.TypeBuilder"/> instance.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.TypeAssist.op_Implicit(NLib.Reflection.Emit.TypeAssist)~System.Reflection.Emit.TypeBuilder">
            <summary>
            Converts the supplied <see cref="T:NLib.Reflection.Emit.TypeAssist"/> to a <see cref="P:NLib.Reflection.Emit.TypeAssist.TypeBuilder"/> instance.
            </summary>
            <param name="typeAssist">The <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</param>
            <returns>A <see cref="P:NLib.Reflection.Emit.TypeAssist.TypeBuilder"/> instance.</returns>
        </member>
        <member name="T:NLib.Reflection.Emit.MethodAssistBase">
            <summary>
            Base class for wrappers around methods and constructors.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssistBase.#ctor(NLib.Reflection.Emit.TypeAssist)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.MethodAssist"/> class
            with the specified parameters.
            </summary>
            <param name="typeAssist">Associated <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</param>
        </member>
        <member name="P:NLib.Reflection.Emit.MethodAssistBase.Type">
            <summary>
            Gets associated <see cref="T:NLib.Reflection.Emit.TypeAssist"/>.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.MethodAssistBase.Emitter">
            <summary>
            Gets <see cref="T:NLib.Reflection.Emit.EmitAssist"/> instance.
            </summary>
        </member>
        <member name="T:NLib.Reflection.Emit.MethodAssist">
            <summary>
            Method Assist. A wrapper around the <see cref="P:NLib.Reflection.Emit.MethodAssist.MethodBuilder"/> class.
            </summary>
            <seealso cref="T:System.Reflection.Emit.MethodBuilder">MethodBuilder Class</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssist.#ctor(NLib.Reflection.Emit.TypeAssist,System.Reflection.Emit.MethodBuilder)">
            <summary>
            Constructor. Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.MethodAssist"/> class
            with the specified parameters.
            </summary>
            <param name="typeAssist">Associated <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</param>
            <param name="methodBuilder">A <see cref="P:NLib.Reflection.Emit.MethodAssist.MethodBuilder"/></param>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssist.#ctor(NLib.Reflection.Emit.TypeAssist,System.Reflection.Emit.MethodBuilder,System.Type[],System.Type,System.Type[])">
            <summary>
            Constructor. Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.MethodAssist"/> class
            with the specified parameters.
            </summary>
            <param name="typeAssist">Associated <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</param>
            <param name="methodBuilder">A <see cref="P:NLib.Reflection.Emit.MethodAssist.MethodBuilder"/></param>
            <param name="genericArguments">Generic arguments of the method.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The types of the parameters of the method.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssist.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssist.SetCustomAttribute(System.Type)">
            <summary>
            Sets a custom attribute using a custom attribute type.
            </summary>
            <param name="attributeType">Attribute type.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssist.SetCustomAttribute(System.Type,System.Reflection.PropertyInfo[],System.Object[])">
            <summary>
            Sets a custom attribute using a custom attribute type
            and named properties.
            </summary>
            <param name="attributeType">Attribute type.</param>
            <param name="properties">Named properties of the custom attribute.</param>
            <param name="propertyValues">Values for the named properties of the custom attribute.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssist.SetCustomAttribute(System.Type,System.String,System.Object)">
            <summary>
            Sets a custom attribute using a custom attribute type
            and named property.
            </summary>
            <param name="attributeType">Attribute type.</param>
            <param name="propertyName">A named property of the custom attribute.</param>
            <param name="propertyValue">Value for the named property of the custom attribute.</param>
        </member>
        <member name="P:NLib.Reflection.Emit.MethodAssist.Emitter">
            <summary>
            Gets <see cref="T:NLib.Reflection.Emit.EmitAssist"/> instance.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.MethodAssist.MethodBuilder">
            <summary>
            Gets MethodBuilder.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.MethodAssist.DeclaringType">
            <summary>
            Returns the type that declares this method.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.MethodAssist.OverriddenMethod">
            <summary>
            Gets or sets the base type method overridden by this method, if any.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.MethodAssist.op_Implicit(NLib.Reflection.Emit.MethodAssist)~System.Reflection.Emit.MethodBuilder">
            <summary>
            Converts the supplied <see cref="T:NLib.Reflection.Emit.MethodAssist"/> instance to a <see cref="P:NLib.Reflection.Emit.MethodAssist.MethodBuilder"/>.
            </summary>
            <param name="methodAssist">The <see cref="T:NLib.Reflection.Emit.MethodAssist"/> instance.</param>
            <returns>A <see cref="P:NLib.Reflection.Emit.MethodAssist.MethodBuilder"/>.</returns>
        </member>
        <member name="T:NLib.Reflection.Emit.ConstructorAssist">
            <summary>
            Constructor Assist. A wrapper around the <see cref="P:NLib.Reflection.Emit.ConstructorAssist.ConstructorBuilder"/> class.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.ConstructorAssist.#ctor(NLib.Reflection.Emit.TypeAssist,System.Reflection.Emit.ConstructorBuilder)">
            <summary>
            Constructor. Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.ConstructorAssist"/> class
            with the specified parameters.
            </summary>
            <param name="typeAssist">Associated <see cref="T:NLib.Reflection.Emit.TypeAssist"/> instance.</param>
            <param name="constructorBuilder">A <see cref="P:NLib.Reflection.Emit.ConstructorAssist.ConstructorBuilder"/></param>
        </member>
        <member name="M:NLib.Reflection.Emit.ConstructorAssist.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.ConstructorAssist.ConstructorBuilder">
            <summary>
            Gets ConstructorBuilder.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.ConstructorAssist.Emitter">
            <summary>
            Gets <see cref="T:NLib.Reflection.Emit.EmitAssist"/> instance.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.ConstructorAssist.op_Implicit(NLib.Reflection.Emit.ConstructorAssist)~System.Reflection.Emit.ConstructorBuilder">
            <summary>
            Converts the supplied <see cref="T:NLib.Reflection.Emit.ConstructorAssist"/> instance to a <see cref="T:System.Reflection.Emit.MethodBuilder"/>.
            </summary>
            <param name="constructorAssist">The <see cref="T:NLib.Reflection.Emit.ConstructorAssist"/>.</param>
            <returns>A <see cref="P:NLib.Reflection.Emit.ConstructorAssist.ConstructorBuilder"/>.</returns>
        </member>
        <member name="T:NLib.Reflection.Emit.EmitAssist">
            <summary>
            Emit Assist
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.#cctor">
            <summary>
            Constructor (static)
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.InitTypes">
            <summary>
            Initialize Types
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.FindOpCode(System.Type)">
            <summary>
            Find OpCode
            </summary>
            <param name="type">Type to find OpCode</param>
            <returns>OpCode that match specificed type (Value Type)</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/> class
            with the specified <see cref="T:System.Reflection.Emit.ILGenerator"/>.
            </summary>
            <param name="ilGenerator">The <see cref="T:System.Reflection.Emit.ILGenerator"/> to use.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.#ctor(NLib.Reflection.Emit.MethodAssistBase,System.Reflection.Emit.ILGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/> class
            with the specified <see cref="T:System.Reflection.Emit.ILGenerator"/>.
            </summary>
            <param name="methodAssist">Associated <see cref="T:NLib.Reflection.Emit.MethodAssistBase"/>.</param>
            <param name="ilGenerator">The <see cref="T:System.Reflection.Emit.ILGenerator"/> to use.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.WriteLine(System.String)">
            <summary>
            Call Console.WriteLine
            </summary>
            <param name="value">The text to display on console.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ClearLabels">
            <summary>
            Clear all labels.
            </summary>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.DefineLabel(System.String)">
            <summary>
            Define Label.
            </summary>
            <param name="labelName">The label name to add into local cache.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.MarkLabel(System.String)">
            <summary>
            Mark Label.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.beq(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq"/>, label) that
            transfers control to a target instruction if two values are equal.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq">OpCodes.Beq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.beq_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq_S"/>, label) that
            transfers control to a target instruction (short form) if two values are equal.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq_S">OpCodes.Beq_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge"/>, label) that
            transfers control to a target instruction if the first value is greater than or equal to the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge">OpCodes.Bge</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_S"/>, label) that
            transfers control to a target instruction (short form) 
            if the first value is greater than or equal to the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_S">OpCodes.Bge_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge_un(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un"/>, label) that
            transfers control to a target instruction if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un">OpCodes.Bge_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge_un_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S"/>, label) that
            transfers control to a target instruction (short form) if if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S">OpCodes.Bge_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt">OpCodes.Bgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_S">OpCodes.Bgt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt_un(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un">OpCodes.Bgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt_un_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">OpCodes.Bgt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble">OpCodes.Ble</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_S">OpCodes.Ble_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble_un(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un">OpCodes.Ble_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble_un_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S">OpCodes.Ble_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt"/>, label) that
            transfers control to a target instruction if the first value is less than the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt">OpCodes.Blt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_S">OpCodes.Blt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt_un(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un"/>, label) that
            transfers control to a target instruction if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un">OpCodes.Blt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt_un_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S">OpCodes.Blt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bne_un(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un"/>, label) that
            transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un">OpCodes.Bne_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bne_un_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S"/>, label) that
            transfers control to a target instruction (short form) 
            when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S">OpCodes.Bne_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.br(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br"/>, label) that
            unconditionally transfers control to a target instruction. 
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br">OpCodes.Br</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brfalse(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse"/>, label) that
            transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse">OpCodes.Brfalse</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brfalse_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse_S"/>, label) that
            transfers control to a target instruction if value is false, a null reference, or zero. 
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse_S">OpCodes.Brfalse_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brtrue(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue"/>, label) that
            transfers control to a target instruction if value is true, not null, or non-zero.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue">OpCodes.Brtrue</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brtrue_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue_S"/>, label) that
            transfers control to a target instruction (short form) if value is true, not null, or non-zero.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue_S">OpCodes.Brtrue_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.br_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br_S"/>, label) that
            unconditionally transfers control to a target instruction (short form).
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br_S">OpCodes.Br_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.leave(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave"/>, label) that
            exits a protected region of code, unconditionally tranferring control to a specific target instruction.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave">OpCodes.Leave</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.leave_s(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave_S"/>, label) that
            exits a protected region of code, unconditionally transferring control to a target instruction (short form).
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave_S">OpCodes.Leave_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.switch(System.String[])">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Switch"/>, label[]) that
            implements a jump table.
            </summary>
            <param name="labelNames">The array of label names in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Switch">OpCodes.Switch</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.unaligned(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, label) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="labelName">The label name in local cache.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.BeginCatchBlock(System.Type)">
            <summary>
            Begins a catch block.
            </summary>
            <param name="exceptionType">The Type object that represents the exception.</param>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">ILGenerator.BeginCatchBlock Method</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.BeginExceptFilterBlock">
            <summary>
            Begins an exception block for a filtered exception.
            </summary>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">ILGenerator.BeginCatchBlock Method</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.BeginExceptionBlock">
            <summary>
            Begins an exception block for a non-filtered exception.
            </summary>
            <returns>The label for the end of the block.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.BeginFaultBlock">
            <summary>
            Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.
            </summary>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.BeginFinallyBlock">
            <summary>
            Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
            </summary>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.BeginScope">
            <summary>
            Begins a lexical scope.
            </summary>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="localType">The Type of the local variable.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.DeclareLocal(System.Type,System.Boolean)">
            <summary>
            Declares a local variable, optionally pinning the object referred to by the variable.
            </summary>
            <param name="localType">The Type of the local variable.</param>
            <param name="pinned"><b>true</b> to pin the object in memory; otherwise, <b>false</b>.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.DefineLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.EndExceptionBlock">
            <summary>
            Ends an exception block.
            </summary>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.EndScope">
            <summary>
            Ends a lexical scope.
            </summary>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.MarkLabel(System.Reflection.Emit.Label)">
            <summary>
            Marks the Microsoft intermediate language (MSIL) stream's current position 
            with the given label.
            </summary>
            <param name="loc">The label for which to set an index.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a sequence point in the Microsoft intermediate language (MSIL) stream.
            </summary>
            <param name="document">The document for which the sequence point is being defined.</param>
            <param name="startLine">The line where the sequence point begins.</param>
            <param name="startColumn">The column in the line where the sequence point begins.</param>
            <param name="endLine">The line where the sequence point ends.</param>
            <param name="endColumn">The column in the line where the sequence point ends.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ThrowException(System.Type)">
            <summary>
            Emits an instruction to throw an exception.
            </summary>
            <param name="exceptionType">The class of the type of exception to throw.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.UsingNamespace(System.String)">
            <summary>
            Specifies the namespace to be used in evaluating locals and watches for 
            the current active lexical scope.
            </summary>
            <param name="namespaceName">The namespace to be used in evaluating locals and watches for the current active lexical scope.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.add">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add"/>) that
            adds two values and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add">OpCodes.Add</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.add_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf"/>) that
            adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf">OpCodes.Add_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.add_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un"/>) that
            adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">OpCodes.Add_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.and">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.And"/>) that
            computes the bitwise AND of two values and pushes the result onto the evalution stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.And">OpCodes.And</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.arglist">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Arglist"/>) that
            returns an unmanaged pointer to the argument list of the current method.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Arglist">OpCodes.Arglist</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.beq(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq"/>, label) that
            transfers control to a target instruction if two values are equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq">OpCodes.Beq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.beq_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq_S"/>, label) that
            transfers control to a target instruction (short form) if two values are equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq_S">OpCodes.Beq_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge"/>, label) that
            transfers control to a target instruction if the first value is greater than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge">OpCodes.Bge</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_S"/>, label) that
            transfers control to a target instruction (short form) 
            if the first value is greater than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_S">OpCodes.Bge_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un"/>, label) that
            transfers control to a target instruction if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un">OpCodes.Bge_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bge_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S"/>, label) that
            transfers control to a target instruction (short form) if if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S">OpCodes.Bge_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt">OpCodes.Bgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_S">OpCodes.Bgt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un">OpCodes.Bgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bgt_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">OpCodes.Bgt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble">OpCodes.Ble</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_S">OpCodes.Ble_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un">OpCodes.Ble_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ble_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S">OpCodes.Ble_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt"/>, label) that
            transfers control to a target instruction if the first value is less than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt">OpCodes.Blt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_S">OpCodes.Blt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un"/>, label) that
            transfers control to a target instruction if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un">OpCodes.Blt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.blt_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S">OpCodes.Blt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bne_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un"/>, label) that
            transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un">OpCodes.Bne_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.bne_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S"/>, label) that
            transfers control to a target instruction (short form) 
            when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S">OpCodes.Bne_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.box(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Box"/>, type) that
            converts a value type to an object reference.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.boxIfValueType(System.Type)">
            <summary>
            Converts a value type to an object reference if the value is a value type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.br(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br"/>, label) that
            unconditionally transfers control to a target instruction. 
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br">OpCodes.Br</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.break">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Break"/>) that
            signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Break">OpCodes.Break</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brfalse(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse"/>, label) that
            transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse">OpCodes.Brfalse</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brfalse_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse_S"/>, label) that
            transfers control to a target instruction if value is false, a null reference, or zero. 
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse_S">OpCodes.Brfalse_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brtrue(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue"/>, label) that
            transfers control to a target instruction if value is true, not null, or non-zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue">OpCodes.Brtrue</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.brtrue_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue_S"/>, label) that
            transfers control to a target instruction (short form) if value is true, not null, or non-zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue_S">OpCodes.Brtrue_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.br_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br_S"/>, label) that
            unconditionally transfers control to a target instruction (short form).
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br_S">OpCodes.Br_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.call(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.call(System.Reflection.ConstructorInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, constructorInfo) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="constructorInfo">The constructor to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.call(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.call(System.Type,System.String,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.call(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.calli(System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, <see cref="T:System.Runtime.InteropServices.CallingConvention"/>, Type, Type[]) that
            calls the method indicated on the evaluation stack (as a pointer to an entry point) 
            with arguments described by a calling convention using an unmanaged calling convention.
            </summary>
            <param name="unmanagedCallConv">The unmanaged calling convention to be used.</param>
            <param name="returnType">The Type of the result.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">ILGenerator.EmitCalli</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.calli(System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <summary>
            Calls ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, <see cref="T:System.Runtime.InteropServices.CallingConvention"/>, Type, Type[], Type[]) that
            calls the method indicated on the evaluation stack (as a pointer to an entry point)
            with arguments described by a calling convention using a managed calling convention.
            </summary>
            <param name="callingConvention">The managed calling convention to be used.</param>
            <param name="returnType">The Type of the result.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <param name="optionalParameterTypes">The types of the optional arguments for vararg calls.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">ILGenerator.EmitCalli</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.callvirt(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.callvirt(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.callvirt(System.Type,System.String,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.callvirt(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.callvirt(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.callvirtNoGenerics(System.Type,System.String,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The non-generic method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.castclass(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Castclass"/>, type) that
            attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Castclass">OpCodes.Castclass</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.castType(System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class 
            or to unbox if the type is a value type.
            </summary>
            <param name="type">A Type</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ceq">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ceq"/>) that
            compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ceq">OpCodes.Ceq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.cgt">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt"/>) that
            compares two values. If the first value is greater than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt">OpCodes.Cgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.cgt_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt_Un"/>) that
            compares two unsigned or unordered values.
            If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">OpCodes.Cgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.constrained(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Constrained"/>) that
            constrains the type on which a virtual method call is made.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">OpCodes.Constrained</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ckfinite">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ckfinite"/>) that
            throws <see cref="T:System.ArithmeticException"/> if value is not a finite number.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ckfinite">OpCodes.Ckfinite</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.clt">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt"/>) that
            compares two values. If the first value is less than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt">OpCodes.Clt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.clt_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt_Un"/>) that
            compares the unsigned or unordered values value1 and value2.
            If value1 is less than value2, then the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt_Un">OpCodes.Clt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I"/>) that
            converts the value on top of the evaluation stack to natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I">OpCodes.Conv_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I1"/>) that
            converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I1">OpCodes.Conv_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I2"/>) that
            converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I2">OpCodes.Conv_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I4"/>) that
            converts the value on top of the evaluation stack to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I4">OpCodes.Conv_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I8"/>) that
            converts the value on top of the evaluation stack to int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I8">OpCodes.Conv_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.conv(System.Type)">
            <summary>
            Converts the value on top of the evaluation stack to the specified type.
            </summary>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I"/>) that
            converts the signed value on top of the evaluation stack to signed natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">OpCodes.Conv_Ovf_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1"/>) that
            converts the signed value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">OpCodes.Conv_Ovf_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i1_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">OpCodes.Conv_Ovf_I1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2"/>) that
            converts the signed value on top of the evaluation stack to signed int16 and extending it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">OpCodes.Conv_Ovf_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i2_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">OpCodes.Conv_Ovf_I2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4"/>) that
            converts the signed value on top of the evaluation tack to signed int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">OpCodes.Conv_Ovf_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i4_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">OpCodes.Conv_Ovf_I4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8"/>) that
            converts the signed value on top of the evaluation stack to signed int64,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">OpCodes.Conv_Ovf_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i8_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">OpCodes.Conv_Ovf_I8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_i_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">OpCodes.Conv_Ovf_I_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U"/>) that
            converts the signed value on top of the evaluation stack to unsigned natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">OpCodes.Conv_Ovf_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1"/>) that
            converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">OpCodes.Conv_Ovf_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u1_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">OpCodes.Conv_Ovf_U1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2"/>) that
            converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">OpCodes.Conv_Ovf_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u2_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">OpCodes.Conv_Ovf_U2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4"/>) that
            Converts the signed value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">OpCodes.Conv_Ovf_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u4_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">OpCodes.Conv_Ovf_U4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8"/>) that
            converts the signed value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">OpCodes.Conv_Ovf_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u8_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">OpCodes.Conv_Ovf_U8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_ovf_u_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">OpCodes.Conv_Ovf_U_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R4"/>) that
            converts the value on top of the evaluation stack to float32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R4">OpCodes.Conv_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R8"/>) that
            converts the value on top of the evaluation stack to float64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R8">OpCodes.Conv_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_r_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un"/>) that
            converts the unsigned integer value on top of the evaluation stack to float32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un">OpCodes.Conv_R_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_u">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U"/>) that
            converts the value on top of the evaluation stack to unsigned natural int, and extends it to natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U">OpCodes.Conv_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U1"/>) that
            converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U1">OpCodes.Conv_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U2"/>) that
            converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U2">OpCodes.Conv_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U4"/>) that
            converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U4">OpCodes.Conv_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.conv_u8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U8"/>) that
            converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U8">OpCodes.Conv_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.cpblk">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpblk"/>) that
            copies a specified number bytes from a source address to a destination address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpblk">OpCodes.Cpblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.cpobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpobj"/>, type) that
            copies the value type located at the address of an object (type &amp;, * or natural int) 
            to the address of the destination object (type &amp;, * or natural int).
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpobj">OpCodes.Cpobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.div">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div"/>) that
            divides two values and pushes the result as a floating-point (type F) or
            quotient (type int32) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div">OpCodes.Div</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.div_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div_Un"/>) that
            divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div_Un">OpCodes.Div_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.dup">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Dup"/>) that
            copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Dup">OpCodes.Dup</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.endfilter">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfilter"/>) that
            transfers control from the filter clause of an exception back to
            the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfilter">OpCodes.Endfilter</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.endfinally">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfinally"/>) that
            transfers control from the fault or finally clause of an exception block back to
            the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfinally">OpCodes.Endfinally</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.initblk">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initblk"/>) that
            initializes a specified block of memory at a specific address to a given size and initial value.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initblk">OpCodes.Initblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.initobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initobj"/>, type) that
            initializes all the fields of the object at a specific address to a null reference or 
            a 0 of the appropriate primitive type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initobj">OpCodes.Initobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.isinst(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Isinst"/>, type) that
            tests whether an object reference (type O) is an instance of a particular class.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Isinst">OpCodes.Isinst</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.jmp(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Jmp"/>, methodInfo) that
            exits current method and jumps to specified method.
            </summary>
            <param name="methodInfo">The method to be jumped.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Jmp">OpCodes.Jmp</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarg(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short) that
            loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldargEx(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Loads an argument onto the stack.
            </summary>
            <param name="parameterInfo">A <see cref="T:System.Reflection.ParameterInfo"/> representing a parameter.</param>
            <param name="box">True, if parameter must be converted to a reference.</param>
            <seealso cref="M:NLib.Reflection.Emit.EmitAssist.ldarg(System.Reflection.ParameterInfo)"/>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarg(System.Int32)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short) or 
            ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte) that
            loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarg(System.Reflection.ParameterInfo)">
            <summary>
            Loads an argument onto the stack.
            </summary>
            <param name="parameterInfo">A <see cref="T:System.Reflection.ParameterInfo"/> representing a parameter.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarga(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga"/>, short) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga">OpCodes.Ldarga</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarga_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga_S"/>, byte) that
            load an argument address, in short form, onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga_S">OpCodes.Ldarga_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarga(System.Int32)">
            <summary>
            Load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarga(System.Reflection.ParameterInfo)">
            <summary>
            Loads an argument address onto the stack.
            </summary>
            <param name="parameterInfo">A <see cref="T:System.Reflection.ParameterInfo"/> representing a parameter.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldarg_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_0"/>) that
            loads the argument at index 0 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_0">OpCodes.Ldarg_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldarg_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_1"/>) that
            loads the argument at index 1 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_1">OpCodes.Ldarg_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldarg_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_2"/>) that
            loads the argument at index 2 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_2">OpCodes.Ldarg_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldarg_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_3"/>) that
            loads the argument at index 3 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_3">OpCodes.Ldarg_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldarg_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte) that
            loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <param name="index">Index of the argument value that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_S">OpCodes.Ldarg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldc_bool(System.Boolean)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/> or <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>) that
            pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="b">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldc_i4(System.Int32)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4"/>, int) that
            pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/>) that
            pushes the integer value of 0 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>) that
            pushes the integer value of 1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">OpCodes.Ldc_I4_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2"/>) that
            pushes the integer value of 2 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">OpCodes.Ldc_I4_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3"/>) that
            pushes the integer value of 3 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">OpCodes.Ldc_I4_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4"/>) that
            pushes the integer value of 4 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">OpCodes.Ldc_I4_4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_5">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5"/>) that
            pushes the integer value of 5 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_6">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6"/>) that
            pushes the integer value of 6 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">OpCodes.Ldc_I4_6</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_7">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7"/>) that
            pushes the integer value of 7 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">OpCodes.Ldc_I4_7</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8"/>) that
            pushes the integer value of 8 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">OpCodes.Ldc_I4_8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldc_i4_m1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1"/>) that
            pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">OpCodes.Ldc_I4_M1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldc_i4_(System.Int32)">
            <summary>
            Calls the best form of ILGenerator.Emit(Ldc_I4_X) that
            pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="M:NLib.Reflection.Emit.EmitAssist.ldc_i4(System.Int32)"/>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldc_i4_s(System.SByte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S"/>, byte) that
            pushes the supplied int8 value onto the evaluation stack as an int32, short form.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">OpCodes.Ldc_I4_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldc_i8(System.Int64)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I8"/>, long) that
            pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I8">OpCodes.Ldc_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldc_r4(System.Single)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R4"/>, float) that
            pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R4">OpCodes.Ldc_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldc_r8(System.Double)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R8"/>, double) that
            pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R8">OpCodes.Ldc_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldelema(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelema"/>, type) that
            loads the address of the array element at a specified array index onto the top of the evaluation stack 
            as type &amp; (managed pointer).
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelema">OpCodes.Ldelema</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I"/>) that
            loads the element with type natural int at a specified array index onto the top of the evaluation stack 
            as a natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I">OpCodes.Ldelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1"/>) that
            loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1">OpCodes.Ldelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2"/>) that
            loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2">OpCodes.Ldelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4"/>) that
            loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4">OpCodes.Ldelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8"/>) that
            loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8">OpCodes.Ldelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4"/>) that
            loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4">OpCodes.Ldelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8"/>) that
            loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8">OpCodes.Ldelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref"/>) that
            loads the element containing an object reference at a specified array index 
            onto the top of the evaluation stack as type O (object reference).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">OpCodes.Ldelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1"/>) that
            loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1">OpCodes.Ldelem_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2"/>) that
            loads the element with type unsigned int16 at a specified array index 
            onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2">OpCodes.Ldelem_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldelem_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4"/>) that
            loads the element with type unsigned int32 at a specified array index 
            onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4">OpCodes.Ldelem_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldfld"/>, fieldInfo) that
            finds the value of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldfld">OpCodes.Ldfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldflda(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldflda"/>, fieldInfo) that
            finds the address of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldflda">OpCodes.Ldflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldftn(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldftn"/>, methodInfo) that
            pushes an unmanaged pointer (type natural int) to the native code implementing a specific method 
            onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldftn">OpCodes.Ldftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I"/>) that
            loads a value of type natural int as a natural int onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I">OpCodes.Ldind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I1"/>) that
            loads a value of type int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I1">OpCodes.Ldind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I2"/>) that
            loads a value of type int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I2">OpCodes.Ldind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I4"/>) that
            loads a value of type int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I4">OpCodes.Ldind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I8"/>) that
            loads a value of type int64 as an int64 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I8">OpCodes.Ldind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R4"/>) that
            loads a value of type float32 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R4">OpCodes.Ldind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R8"/>) that
            loads a value of type float64 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R8">OpCodes.Ldind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref"/>) that
            loads an object reference as a type O (object reference) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref">OpCodes.Ldind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U1"/>) that
            loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U1">OpCodes.Ldind_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U2"/>) that
            loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U2">OpCodes.Ldind_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldind_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U4"/>) that
            loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U4">OpCodes.Ldind_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldind(System.Type)">
            <summary>
            Loads a value of the type from a supplied address.
            </summary>
            <param name="type">A Type.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldlen">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldlen"/>) that
            pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldlen">OpCodes.Ldlen</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldloc(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, short) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the local variable value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="localBuilder">Local variable builder.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldloca(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, short) that
            loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldloca_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca_S"/>, byte) that
            loads the address of the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca_S">OpCodes.Ldloca_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldloca(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="local">A <see cref="T:System.Reflection.Emit.LocalBuilder"/> representing the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldloc_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_0"/>) that
            loads the local variable at index 0 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_0">OpCodes.Ldloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldloc_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_1"/>) that
            loads the local variable at index 1 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_1">OpCodes.Ldloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldloc_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_2"/>) that
            loads the local variable at index 2 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_2">OpCodes.Ldloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldloc_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_3"/>) that
            loads the local variable at index 3 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_3">OpCodes.Ldloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldloc_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_S"/>, byte) that
            loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_S">OpCodes.Ldloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ldnull">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldnull"/>) that
            pushes a null reference (type O) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldnull">OpCodes.Ldnull</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldobj"/>, type) that
            copies the value type object pointed to by an address to the top of the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldobj">OpCodes.Ldobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldsfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsfld"/>, fieldInfo) that
            pushes the value of a static field onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsfld">OpCodes.Ldsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldsflda(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsflda"/>, fieldInfo) that
            pushes the address of a static field onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsflda">OpCodes.Ldsflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldstrEx(System.String)">
            <summary>
            Calls <see cref="M:NLib.Reflection.Emit.EmitAssist.ldstr(System.String)"/> -or- <see cref="P:NLib.Reflection.Emit.EmitAssist.ldnull"/>,
            if given string is a null reference.
            </summary>
            <param name="str">The String to be emitted.</param>
            <seealso cref="M:NLib.Reflection.Emit.EmitAssist.ldstr(System.String)"/>
            <seealso cref="P:NLib.Reflection.Emit.EmitAssist.ldnull"/>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldstr(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldstr"/>, string) that
            pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <param name="str">The String to be emitted.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldstr">OpCodes.Ldstr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldNameOrIndex(NLib.Reflection.Common.NameOrIndexParameter)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldstr"/>, string) that
            pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <param name="nameOrIndex">The <see cref="T:NLib.Reflection.Common.NameOrIndexParameter"/> to be emitted.</param>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldtoken(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, methodInfo) that
            converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldtoken(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, fieldInfo) that
            converts a metadata token to its runtime representation, 
            pushing it onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldtoken(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, type) that
            converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ldvirtftn(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn"/>, methodInfo) that
            pushes an unmanaged pointer (type natural int) to the native code implementing a particular virtual method 
            associated with a specified object onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn">OpCodes.Ldvirtftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.leave(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave"/>, label) that
            exits a protected region of code, unconditionally tranferring control to a specific target instruction.
            </summary>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave">OpCodes.Leave</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.leave_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave_S"/>, label) that
            exits a protected region of code, unconditionally transferring control to a target instruction (short form).
            </summary>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave_S">OpCodes.Leave_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.localloc">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Localloc"/>) that
            allocates a certain number of bytes from the local dynamic memory pool and pushes the address 
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Localloc">OpCodes.Localloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.mkrefany(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mkrefany"/>, type) that
            pushes a typed reference to an instance of a specific type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mkrefany">OpCodes.Mkrefany</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.mul">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul"/>) that
            multiplies two values and pushes the result on the evaluation stack.
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul">OpCodes.Mul</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.mul_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf"/>) that
            multiplies two integer values, performs an overflow check, 
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf">OpCodes.Mul_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.mul_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un"/>) that
            multiplies two unsigned integer values, performs an overflow check, 
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">OpCodes.Mul_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.neg">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Neg"/>) that
            negates a value and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Neg">OpCodes.Neg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.newarr(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newarr"/>, type) that
            pushes an object reference to a new zero-based, one-dimensional array whose elements 
            are of a specific type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newarr">OpCodes.Newarr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.newobj(System.Reflection.ConstructorInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>, <see cref="T:System.Reflection.ConstructorInfo"/>) that
            creates a new object or a new instance of a value type,
            pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <param name="constructorInfo">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newobj">OpCodes.Newobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.newobj(System.Type,System.Type[])">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>, ConstructorInfo) that
            creates a new object or a new instance of a value type,
            pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <param name="type">A type.</param>
            <param name="parameters">An array of System.Type objects representing
            the number, order, and type of the parameters for the desired constructor.
            -or- An empty array of System.Type objects, to get a constructor that takes
            no parameters. Such an empty array is provided by the static field System.Type.EmptyTypes.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.nop">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Nop"/>) that
            fills space if opcodes are patched. No meaningful operation is performed although 
            a processing cycle can be consumed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Nop">OpCodes.Nop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.not">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Not"/>) that
            computes the bitwise complement of the integer value on top of the stack 
            and pushes the result onto the evaluation stack as the same type.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Not">OpCodes.Not</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.or">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Or"/>) that
            compute the bitwise complement of the two integer values on top of the stack and 
            pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Or">OpCodes.Or</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.pop">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Pop"/>) that
            removes the value currently on top of the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Pop">OpCodes.Pop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.readonly">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>) that
            specifies that the subsequent array address operation performs
            no type check at run time, and that it returns a managed pointer
            whose mutability is restricted.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanytype">OpCodes.Refanytype</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.refanytype">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>) that
            retrieves the type token embedded in a typed reference.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanytype">OpCodes.Refanytype</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.refanyval(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanyval"/>, type) that
            retrieves the address (type &amp;) embedded in a typed reference.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanyval">OpCodes.Refanyval</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.rem">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem"/>) that
            divides two values and pushes the remainder onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem">OpCodes.Rem</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.rem_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem_Un"/>) that
            divides two unsigned values and pushes the remainder onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem_Un">OpCodes.Rem_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.ret">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ret"/>) that
            returns from the current method, pushing a return value (if present) 
            from the caller's evaluation stack onto the callee's evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ret">OpCodes.Ret</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.rethrow">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rethrow"/>) that
            rethrows the current exception.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rethrow">OpCodes.Rethrow</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.shl">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shl"/>) that
            shifts an integer value to the left (in zeroes) by a specified number of bits,
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shl">OpCodes.Shl</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.shr">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr"/>) that
            shifts an integer value (in sign) to the right by a specified number of bits,
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr">OpCodes.Shr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.shr_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr_Un"/>) that
            shifts an unsigned integer value (in zeroes) to the right by a specified number of bits,
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr_Un">OpCodes.Shr_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.sizeof(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sizeof"/>, type) that
            pushes the size, in bytes, of a supplied value type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sizeof">OpCodes.Sizeof</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.starg(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg"/>, short) that
            stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.starg_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg_S"/>, byte) that
            stores the value on top of the evaluation stack in the argument slot at a specified index,
            short form.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg_S">OpCodes.Starg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.starg(System.Int32)">
            <summary>
            Stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I"/>) that
            replaces the array element at a given index with the natural int value 
            on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I">OpCodes.Stelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I1"/>) that
            replaces the array element at a given index with the int8 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I1">OpCodes.Stelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I2"/>) that
            replaces the array element at a given index with the int16 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I2">OpCodes.Stelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I4"/>) that
            replaces the array element at a given index with the int32 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I4">OpCodes.Stelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I8"/>) that
            replaces the array element at a given index with the int64 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I8">OpCodes.Stelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R4"/>) that
            replaces the array element at a given index with the float32 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R4">OpCodes.Stelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R8"/>) that
            replaces the array element at a given index with the float64 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R8">OpCodes.Stelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stelem_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref"/>) that
            replaces the array element at a given index with the object ref value (type O)
            on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref">OpCodes.Stelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stfld"/>, <see cref="T:System.Reflection.FieldInfo"/>) that
            replaces the value stored in the field of an object reference or pointer with a new value.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stfld">OpCodes.Stfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I"/>) that
            stores a value of type natural int at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I">OpCodes.Stind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I1"/>) that
            stores a value of type int8 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I1">OpCodes.Stind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I2"/>) that
            stores a value of type int16 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I2">OpCodes.Stind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I4"/>) that
            stores a value of type int32 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I4">OpCodes.Stind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I8"/>) that
            stores a value of type int64 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I8">OpCodes.Stind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R4"/>) that
            stores a value of type float32 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R4">OpCodes.Stind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R8"/>) that
            stores a value of type float64 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R8">OpCodes.Stind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stind_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_Ref"/>) that
            stores an object reference value at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_Ref">OpCodes.Stind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stind(System.Type)">
            <summary>
            Stores a value of the type at a supplied address.
            </summary>
            <param name="type">A Type.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index.
            </summary>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stloc(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, short) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index.
            </summary>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stloc_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_0"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 0.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_0">OpCodes.Stloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stloc_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_1"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 1.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_1">OpCodes.Stloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stloc_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_2"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 2.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_2">OpCodes.Stloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.stloc_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_3"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 3.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_3">OpCodes.Stloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stloc_s(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form).
            </summary>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stloc_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, byte) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form).
            </summary>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stobj"/>, type) that
            copies a value of a specified type from the evaluation stack into a supplied memory address.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stobj">OpCodes.Stobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.stsfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stsfld"/>, fieldInfo) that
            replaces the value of a static field with a value from the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stsfld">OpCodes.Stsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.sub">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub"/>) that
            subtracts one value from another and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub">OpCodes.Sub</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.sub_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf"/>) that
            subtracts one integer value from another, performs an overflow check,
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf">OpCodes.Sub_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.sub_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un"/>) that
            subtracts one unsigned integer value from another, performs an overflow check,
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">OpCodes.Sub_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.switch(System.Reflection.Emit.Label[])">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Switch"/>, label[]) that
            implements a jump table.
            </summary>
            <param name="labels">The array of label objects to which to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Switch">OpCodes.Switch</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.tailcall">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Tailcall"/>) that
            performs a postfixed method call instruction such that the current method's stack frame 
            is removed before the actual call instruction is executed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Tailcall">OpCodes.Tailcall</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.throw">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Throw"/>) that
            throws the exception object currently on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Throw">OpCodes.Throw</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.unaligned(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, label) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.unaligned(System.Int64)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, long) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="addr">An address is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.unbox(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox"/>, type) that
            converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox">OpCodes.Unbox</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.unbox_any(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox_Any"/>, type) that
            converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox_Any">OpCodes.Unbox_Any</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.unboxIfValueType(System.Type)">
            <summary>
            Calls <see cref="M:NLib.Reflection.Emit.EmitAssist.unbox_any(System.Type)"/> if given type is a value type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox_Any">OpCodes.Unbox</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.volatile">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Volatile"/>) that
            specifies that an address currently atop the evaluation stack might be volatile, 
            and the results of reading that location cannot be cached or that multiple stores 
            to that location cannot be suppressed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Volatile">OpCodes.Volatile</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.xor">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Xor"/>) that
            computes the bitwise XOR of the top two values on the evaluation stack, 
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Xor">OpCodes.Xor</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.end">
            <summary>
            Ends sequence of property calls.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.LoadInitValue(System.Type)">
            <summary>
            Loads default value of given type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.LoadWellKnownValue(System.Object)">
            <summary>
            Loads supplied object value (if possible) onto the evaluation stack.
            </summary>
            <param name="o">Any object instance or null reference.</param>
            <returns>True is a value was loaded, otherwise false.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.Init(System.Reflection.ParameterInfo,System.Int32)">
            <summary>
            Initialize parameter with some default value.
            </summary>
            <param name="parameterInfo">A method parameter.</param>
            <param name="index">The parameter index.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.InitOutParameters(System.Reflection.ParameterInfo[])">
            <summary>
            Initialize all output parameters with some default value.
            </summary>
            <param name="parameters">A method parameters array.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.Init(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initialize local variable with some default value.
            </summary>
            <param name="localBuilder">A method local variable.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.LoadType(System.Type)">
            <summary>
            Loads a type instance at runtime.
            </summary>
            <param name="type">A type</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.LoadField(System.Reflection.FieldInfo)">
            <summary>
            Loads a field instance at runtime.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.CastFromObject(System.Type)">
            <summary>
            Cast an object passed by reference to the specified type
            or unbox a boxed value type.
            </summary>
            <param name="type">A type</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.CastIfNecessary(System.Type,System.Type)">
            <summary>
            Cast an object passed by reference to the specified type
            or unbox a boxed value type unless <paramref name="expectedType"/>
            is a parent of <paramref name="actualType"/>.
            </summary>
            <param name="expectedType">A type required.</param>
            <param name="actualType">A type available.</param>
            <returns>Current instance of the <see cref="T:NLib.Reflection.Emit.EmitAssist"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.AddMaxStackSize(System.Int32)">
            <summary>
            Increase max stack size by specified delta.
            </summary>
            <param name="size">Number of bytes to enlarge max stack size.</param>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Custom Emit OpCode
            </summary>
            <param name="code">OpCode to emit</param>
            <returns>EmitAssist instance</returns>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.Method">
            <summary>
            Gets Method Assist instance (MethodAssist or ConstructorAssist).
            </summary>
        </member>
        <member name="P:NLib.Reflection.Emit.EmitAssist.ILGenerator">
            <summary>
            Gets MSIL generator.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Emit.EmitAssist.op_Implicit(NLib.Reflection.Emit.EmitAssist)~System.Reflection.Emit.ILGenerator">
            <summary>
            Converts the supplied <see cref="T:NLib.Reflection.Emit.EmitAssist"/> to a <see cref="P:NLib.Reflection.Emit.EmitAssist.ILGenerator"/>.
            </summary>
            <param name="emitAssist">The Emit Assist instance.</param>
            <returns>An ILGenerator.</returns>
        </member>
        <member name="T:NLib.Reflection.IPropertyAccess">
            <summary>
            The IPropertyAccess interface defines a property accessor.
            </summary>
        </member>
        <member name="M:NLib.Reflection.IPropertyAccess.Get(System.Object)">
            <summary>
            Gets the value stored in the property for the specified target.
            </summary>
            <param name="target">Object to retrieve the property from.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:NLib.Reflection.IPropertyAccess.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the property of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="T:NLib.Reflection.IObjectFactory">
            <summary>
            IObjectFactory
            </summary>
        </member>
        <member name="M:NLib.Reflection.IObjectFactory.Create">
            <summary>
            Create new object instance
            </summary>
            <returns>object instance</returns>
        </member>
        <member name="T:NLib.Reflection.PropertyAccessFactory">
            <summary>
            Property Access Factory
            </summary>
        </member>
        <member name="M:NLib.Reflection.PropertyAccessFactory.CreateAssemblyAssist(System.Type)">
            <summary>
            Create Assembly Assist
            </summary>
            <param name="type">specificed type to create</param>
            <returns>Assembly Assist instance</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccessFactory.EmitGetCode(NLib.Reflection.Emit.TypeAssist,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            EmitGetCode
            </summary>
            <param name="typeAssist">Type Assist instance</param>
            <param name="targetType">Target Type</param>
            <param name="propertyInfo">Target Property instance</param>
        </member>
        <member name="M:NLib.Reflection.PropertyAccessFactory.EmitSetCode(NLib.Reflection.Emit.TypeAssist,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            EmitSetCode
            </summary>
            <param name="typeAssist">Type Assist instance</param>
            <param name="targetType">Target Type</param>
            <param name="propertyInfo">Target Property instance</param>
        </member>
        <member name="M:NLib.Reflection.PropertyAccessFactory.EmitCreateCode(NLib.Reflection.Emit.TypeAssist,System.Type)">
            <summary>
            EmitCreateCode
            </summary>
            <param name="typeAssist">Type Assist instance</param>
            <param name="targetType">Target Type</param>
        </member>
        <member name="T:NLib.Reflection.__PropertyAccess">
            <summary>
            __PropertyAccess internal cache
            </summary>
        </member>
        <member name="P:NLib.Reflection.__PropertyAccess.Instance">
            <summary>
            Singelton Access
            </summary>
        </member>
        <member name="M:NLib.Reflection.__PropertyAccess.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Reflection.__PropertyAccess.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Reflection.__PropertyAccess.Item(System.Type)">
            <summary>
            Get Type Access via Type
            </summary>
        </member>
        <member name="T:NLib.Reflection.TypeAccess">
            <summary>
            Type Access
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeAccess.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">target type to create property access list</param>
        </member>
        <member name="M:NLib.Reflection.TypeAccess.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeAccess.Factory">
            <summary>
            Object Fattory Instance
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeAccess.TargetType">
            <summary>
            Get Target Type
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeAccess.Item(System.String)">
            <summary>
            Get PropertyAccess Via Indexer
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeAccess.Create(System.Type)">
            <summary>
            Create new Type Access
            </summary>
            <param name="type">Type to Create</param>
            <returns>new Type Access instance</returns>
        </member>
        <member name="M:NLib.Reflection.TypeAccess.CreateInstance(System.Type)">
            <summary>
            Create New Instance for specificed type
            </summary>
            <param name="type">specificed type</param>
            <returns>New Instance for specificed type</returns>
        </member>
        <member name="T:NLib.Reflection.PropertyAccess">
            <summary>
            Property Access
            </summary>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.#ctor(NLib.Reflection.TypeAccess,System.Reflection.PropertyInfo,NLib.Reflection.IPropertyAccess)">
            <summary>
            Constructor
            </summary>
            <param name="parentType">Parent Type Access instance</param>
            <param name="propertyInfo">PropertyInfo instance</param>
            <param name="propertyAccess">IPropertyAccess instance</param>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.Get(System.Object)">
            <summary>
            Get Property Value
            </summary>
            <param name="target">target object</param>
            <returns>value that stored in specificed property</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.Set(System.Object,System.Object)">
            <summary>
            Get Property Value
            </summary>
            <param name="target">target object</param>
            <param name="value">value to assigned</param>
        </member>
        <member name="P:NLib.Reflection.PropertyAccess.CanWrite">
            <summary>
            Whether or not the Property supports write access.
            </summary>
        </member>
        <member name="P:NLib.Reflection.PropertyAccess.CanRead">
            <summary>
            Whether or not the Property supports read access.
            </summary>
        </member>
        <member name="P:NLib.Reflection.PropertyAccess.TargetType">
            <summary>
            The Type of object this property accessor was created for.
            </summary>
        </member>
        <member name="P:NLib.Reflection.PropertyAccess.PropertyType">
            <summary>
            The Type of the Property being accessed.
            </summary>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.Create(NLib.Reflection.TypeAccess,System.Reflection.PropertyInfo,NLib.Reflection.IPropertyAccess)">
            <summary>
            Create new Property Access instance
            </summary>
            <param name="parentType">Parent Type Access instance</param>
            <param name="propertyInfo">PropertyInfo instance</param>
            <param name="propertyAccess">IPropertyAccess instance</param>
            <returns>new Property Access instance</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.GetTypeAccess(System.Type)">
            <summary>
            Get Type Access
            </summary>
            <param name="type">target type</param>
            <returns>Type Access Instance</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.GetProperty(System.Type,System.String)">
            <summary>
            Get Property Access
            </summary>
            <param name="type">Target Type</param>
            <param name="propertyName">Proeprty's Name</param>
            <returns>Property Access Instance</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.CanGet(System.Object,System.String)">
            <summary>
            Can Read or Get
            </summary>
            <param name="target">Target object</param>
            <param name="propertyName">Proeprty's Name</param>
            <returns>true if target property can read</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.CanSet(System.Object,System.String)">
            <summary>
            Can Write or Set
            </summary>
            <param name="target">Target object</param>
            <param name="propertyName">Proeprty's Name</param>
            <returns>true if target property can write</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.GetValue(System.Object,System.String)">
            <summary>
            Get Property Value
            </summary>
            <param name="target">Target object</param>
            <param name="propertyName">Proeprty's Name</param>
            <returns>value that stored in object</returns>
        </member>
        <member name="M:NLib.Reflection.PropertyAccess.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Set Property Value
            </summary> 
            <param name="target">Target object</param>
            <param name="propertyName">Proeprty's Name</param>
            <param name="value">value to set</param>
        </member>
        <member name="T:NLib.Reflection.TypeEx">
            <summary>
            TypeEx Class. A wrapper around the <see cref="P:NLib.Reflection.TypeEx.Type"/> class.
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeEx.#ctor(System.Type)">
            <summary>
            Constructor. Initializes a new instance of the <see cref="T:NLib.Reflection.TypeEx"/> class.
            </summary>
            <param name="type">The Type to wrap.</param>
        </member>
        <member name="M:NLib.Reflection.TypeEx.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes identified by <b>Type</b>.
            </summary>
            <param name="attributeType">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain
            to find the attributes.</param>
            <returns>An array of custom attributes defined on this reflected member,
            or an array with zero (0) elements if no attributes are defined.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes identified by <b>Type</b>
            including attribute's inheritance chain.
            </summary>
            <param name="attributeType">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</param>
            <returns>An array of custom attributes defined on this reflected member,
            or an array with zero (0) elements if no attributes are defined.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all of the custom attributes.
            </summary>
            <param name="inherit">Specifies whether to search this member's inheritance chain
            to find the attributes.</param>
            <returns>An array of custom attributes defined on this reflected member,
            or an array with zero (0) elements if no attributes are defined.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetCustomAttributes">
            <summary>
            Returns an array of all of the custom attributes including attributes' inheritance chain.
            </summary>
            <returns>An array of custom attributes defined on this reflected member,
            or an array with zero (0) elements if no attributes are defined.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetAttributes(System.Type)">
            <summary>
            Returns an array of all custom attributes identified by <b>Type</b> including type's
            inheritance chain.
            </summary>
            <param name="attributeType">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</param>
            <returns>An array of custom attributes defined on this reflected member,
            or an array with zero (0) elements if no attributes are defined.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetAttributes">
            <summary>
            Returns an array of all custom attributes including type's inheritance chain.
            </summary>
            <returns>An array of custom attributes defined on this reflected member,
            or an array with zero (0) elements if no attributes are defined.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetAttributes(System.Type,System.Type)">
            <summary>
            Returns an array of custom attributes applied to a type.
            </summary>
            <param name="type">A type instance.</param>
            <param name="attributeType">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</param>
            <returns>An array of custom attributes applied to this type,
            or an array with zero (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetFirstAttribute(System.Type,System.Type)">
            <summary>
            Retrieves a custom attribute applied to a type.
            </summary>
            <param name="type">A type instance.</param>
            <param name="attributeType">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</param>
            <returns>A reference to the first custom attribute of type <paramref name="attributeType"/>
            that is applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetFirstAttribute``1(System.Type)">
            <summary>
            Retrieves a custom attribute applied to a type.
            </summary>
            <typeparam name="T">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</typeparam>
            <param name="type">A type instance.</param>
            <returns>A reference to the first custom attribute of type attributeType
            that is applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethods">
            <summary>
            Returns all the methods of the current Type.
            </summary>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects representing all methods 
            defined for the current Type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicMethods">
            <summary>
            Returns all the public methods of the current Type.
            </summary>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects representing all the public methods 
            defined for the current Type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethods(System.Reflection.BindingFlags)">
            <summary>
            Searches for the methods defined for the current Type,
            using the specified binding constraints.
            </summary>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects representing all methods defined 
            for the current Type that match the specified binding constraints.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethods(System.Boolean)">
            <summary>
            Returns all the generic or non-generic methods of the current Type.
            </summary>
            <param name="generic">True to return all generic methods, false to return all non-generic.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects representing all methods 
            defined for the current Type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicMethods(System.Boolean)">
            <summary>
            Returns all the public and non-generic methods of the current Type.
            </summary>
            <param name="generic">True to return all generic methods, false to return all non-generic.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects representing all the public methods 
            defined for the current Type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethods(System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Searches for the generic methods defined for the current Type,
            using the specified binding constraints.
            </summary>
            <param name="generic">True to return all generic methods, false to return all non-generic.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects representing all methods defined 
            for the current Type that match the specified binding constraints.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.String)">
            <summary>
            Searches for the specified instance method (public or non-public), using the specified name.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicMethod(System.String)">
            <summary>
            Searches for the specified public instance method, using the specified name.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified method, using the specified name and binding flags.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicMethod(System.String,System.Type[])">
            <summary>
            Searches for the specified public instance method, using the specified name.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing
            the number, order, and type of the parameters for the method to get.-or-
            An empty array of the type <see cref="T:System.Type"/> (for example, <see cref="F:System.Type.EmptyTypes"/>)
            to get a method that takes no parameters.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.String,System.Type[])">
            <summary>
            Searches for the specified instance method (public or non-public),
            using the specified name and argument types.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing
            the number, order, and type of the parameters for the method to get.-or-
            An empty array of the type <see cref="T:System.Type"/> (for example, <see cref="F:System.Type.EmptyTypes"/>)
            to get a method that takes no parameters.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Searches for the specified method, using the specified name,
            binding flags and argument types.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing
            the number, order, and type of the parameters for the method to get.-or-
            An empty array of the type <see cref="T:System.Type"/> (for example, <see cref="F:System.Type.EmptyTypes"/>)
            to get a method that takes no parameters.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.Boolean,System.String)">
            <summary>
            Searches for the specified instance method (public or non-public), using the specified name.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="generic">True to search only for a generic method, or
            False to search only for non-generic method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicMethod(System.Boolean,System.String)">
            <summary>
            Searches for the specified public instance method, using the specified name.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="generic">True to search only for a generic method, or
            False to search only for non-generic method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.Boolean,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified method, using the specified name and binding flags.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="generic">True to search only for a generic method, or
            False to search only for non-generic method.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicMethod(System.Boolean,System.String,System.Type[])">
            <summary>
            Searches for the specified public instance method, using the specified name and argument types.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="generic">True to search only for a generic method, or
            False to search only for non-generic method.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing
            the number, order, and type of the parameters for the method to get.-or-
            An empty array of the type <see cref="T:System.Type"/> (for example, <see cref="F:System.Type.EmptyTypes"/>)
            to get a method that takes no parameters.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.Boolean,System.String,System.Type[])">
            <summary>
            Searches for the specified instance method (public or non-public),
            using the specified name and argument types.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="generic">True to search only for a generic method, or
            False to search only for non-generic method.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing
            the number, order, and type of the parameters for the method to get.-or-
            An empty array of the type <see cref="T:System.Type"/> (for example, <see cref="F:System.Type.EmptyTypes"/>)
            to get a method that takes no parameters.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.Boolean,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Searches for the specified method using the specified name, binding flags and argument types.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="generic">True to search only for a generic method, or
            False to search only for non-generic method.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing
            the number, order, and type of the parameters for the method to get.-or-
            An empty array of the type <see cref="T:System.Type"/> (for example, <see cref="F:System.Type.EmptyTypes"/>)
            to get a method that takes no parameters.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetFields">
            <summary>
            Returns all the public fields of the current Type.
            </summary>
            <returns>An array of <see cref="T:System.Reflection.FieldInfo"/> objects representing
            all the public fields defined for the current Type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetFields(System.Reflection.BindingFlags)">
            <summary>
            Searches for the fields of the current Type, using the specified binding constraints.
            </summary>
            <param name="bindingFlags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>An array of <see cref="T:System.Reflection.FieldInfo"/> objects representing
            all fields of the current Type
            that match the specified binding constraints.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetField(System.String)">
            <summary>
            Searches for the public field with the specified name.
            </summary>
            <param name="name">The String containing the name of the public field to get.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> object representing the public field with the specified name,
            if found; otherwise, a null reference.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetProperties">
            <summary>
            Returns all the public properties of the current Type.
            </summary>
            <returns>An array of <see cref="T:System.Reflection.PropertyInfo"/> objects representing
            all public properties of the current Type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetProperties(System.Reflection.BindingFlags)">
            <summary>
            Searches for the properties of the current Type, using the specified binding constraints.
            </summary>
            <param name="bindingFlags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>An array of <see cref="T:System.Reflection.PropertyInfo"/> objects representing
            all properties of the current Type
            that match the specified binding constraints.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetProperty(System.String)">
            <summary>
            Searches for the public property with the specified name.
            </summary>
            <param name="name">The String containing the name of the public property to get.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> object representing the public property with the specified name,
            if found; otherwise, a null reference.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetInterfaceMap(System.Type)">
            <summary>
            Returns an interface mapping for the current <see cref="P:NLib.Reflection.TypeEx.Type"/>.
            </summary>
            <param name="interfaceType">The <see cref="T:System.Type"/>
            of the interface of which to retrieve a mapping.</param>
            <returns>An <see cref="T:System.Reflection.InterfaceMapping"/> object representing the interface
            mapping for <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicConstructor(System.Type[])">
            <summary>
            Searches for a public instance constructor whose parameters match
            the types in the specified array.
            </summary>
            <param name="types">An array of Type objects representing the number,
            order, and type of the parameters for the constructor to get.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the
            public instance constructor whose parameters match the types in
            the parameter type array, if found; otherwise, a null reference.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetConstructor(System.Type)">
            <summary>
            Searches for an instance constructor (public or non-public) whose
            parameters match the types in the specified array.
            </summary>
            <param name="parameterType">Type object representing type of the
            parameter for the constructor to get.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor
             whose parameters match the types in the parameter type array, if found;
            otherwise, a null reference.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetConstructor(System.Type,System.Type[])">
            <summary>
            Searches for an instance constructor (public or non-public) whose
            parameters match the types in the specified array.
            </summary>
            <param name="type">An instance of <see cref="T:System.Type"/> to search constructor for.</param>
            <param name="types">An array of Type objects representing the number,
            order, and type of the parameters for the constructor to get.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor
             whose parameters match the types in the parameter type array, if found;
            otherwise, a null reference.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicDefaultConstructor">
            <summary>
            Searches for a public default constructor.
            </summary>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetDefaultConstructor">
            <summary>
            Searches for a default constructor.
            </summary>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetDefaultConstructor(System.Type)">
            <summary>
            Searches for a default constructor.
            </summary>
            <param name="type">An instance of <see cref="T:System.Type"/> to search constructor for.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPublicConstructors">
            <summary>
            Searches for a public constructors.
            </summary>
            <returns>An array of <see cref="T:System.Reflection.ConstructorInfo"/> objects
            representing all the type public constructors, if found; otherwise, an empty array.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetConstructors">
            <summary>
            Searches for all constructors (except type constructors).
            </summary>
            <returns>An array of <see cref="T:System.Reflection.ConstructorInfo"/> objects
            representing all the type constructors, if found; otherwise, an empty array.</returns>
        </member>
        <member name="P:NLib.Reflection.TypeEx.Type">
            <summary>
            Gets associated Type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.FullName">
            <summary>
            Gets the fully qualified name of the Type, including the namespace of the Type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.Name">
            <summary>
            Gets the name of the Type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.IsAbstract">
            <summary>
            Gets a value indicating whether the Type is abstract and must be overridden.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.IsArray">
            <summary>
            Gets a value indicating whether the System.Type is an array.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.IsValueType">
            <summary>
            Gets a value indicating whether the Type is a value type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.IsClass">
            <summary>
            Gets a value indicating whether the Type is a class; that is, not a value type or interface.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.IsInterface">
            <summary>
            Gets a value indicating whether the System.Type is an interface; that is, not a class or a value type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.TypeEx.IsSerializable">
            <summary>
            Indicates whether the Type is serializable.
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeEx.op_Implicit(System.Type)~NLib.Reflection.TypeEx">
            <summary>
            Converts the supplied <see cref="P:NLib.Reflection.TypeEx.Type"/> to a <see cref="T:NLib.Reflection.TypeEx"/>.
            </summary>
            <param name="type">The Type.</param>
            <returns>A TypeEx instance.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.op_Implicit(NLib.Reflection.TypeEx)~System.Type">
            <summary>
            Converts the supplied <see cref="T:NLib.Reflection.TypeEx"/> instance to a <see cref="P:NLib.Reflection.TypeEx.Type"/>.
            </summary>
            <param name="typeEx">The TypeEx instance.</param>
            <returns>A Type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsNullable(System.Type)">
            <summary>
            Gets a value indicating whether a type (or type's element type)
            instance can be null in the underlying data store.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns> True, if the type parameter is a closed generic nullable type; otherwise, False.</returns>
            <remarks>Arrays of Nullable types are treated as Nullable types.</remarks>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsNullableType(System.Type)">
            <summary>
            Check is the specificed type is Nullable type.
            </summary>
            <param name="type">The specificed type.</param>
            <returns>Return true if type is Nullable type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsNullableEnum(System.Type)">
            <summary>
            Check is the specificed type is Nullable Enum.
            </summary>
            <param name="type">The specificed type.</param>
            <returns>Return true if type is Nullable Enum.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsEnumOrNullableEnum(System.Type)">
            <summary>
            Check is the specificed type is Enum or Nullable Enum.
            </summary>
            <param name="type">The specificed type.</param>
            <returns>Return true if type is Enum or Nullable Enum.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type argument of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            <item>The underlying Type if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.UnwrapNullableType(System.Type)">
            <summary>
            Unwrap Nullable Type.
            </summary>
            <param name="type">The specificed type.</param>
            <returns></returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetDefiningTypes(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Get Defining Types.
            </summary>
            <param name="child"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsSameOrParent(System.Type,System.Type)">
            <summary>
            Determines whether the specified types are considered equal.
            </summary>
            <param name="parent">A <see cref="T:System.Type"/> instance. </param>
            <param name="child">A type possible derived from the <c>parent</c> type</param>
            <returns>True, when an object instance of the type <c>child</c>
            can be used as an object of the type <c>parent</c>; otherwise, false.</returns>
            <remarks>Note that nullable types does not have a parent-child relation to it's underlying type.
            For example, the 'int?' type (nullable int) and the 'int' type
            aren't a parent and it's child.</remarks>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetGenericType(System.Type,System.Type)">
            <summary>
            Get Generic Type.
            </summary>
            <param name="genericType">The target generic type. Should not be null.</param>
            <param name="type">The type instance. Should not be null.</param>
            <returns>Return type that convert to generic type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.Type,System.Boolean,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the method defined for a <see cref="T:System.Type"/>,
            using the specified name and binding flags.
            </summary>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="generic">True to search only for a generic method, or
            False to search only for non-generic method.</param>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethods(System.Type,System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Searches for the methods defined for a <see cref="T:System.Type"/>,
            using the specified name and binding flags.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <param name="generic">True to return all generic methods, false to return all non-generic.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects representing all methods defined 
            for the current Type that match the specified binding constraints.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Int32,System.Type[])">
            <summary>
            Searches for the method defined for a <see cref="T:System.Type"/>,
            using the specified name and binding flags.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <param name="methodName">The String containing the name of the method to get.</param>
            <param name="requiredParametersCount">Number of required (non optional)
            parameter types.</param>
            <param name="bindingFlags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="parameterTypes">An array of <see cref="T:System.Type"/> objects representing
            the number, order, and type of the parameters for the method to get.-or-
            An empty array of the type <see cref="T:System.Type"/> (for example, <see cref="F:System.Type.EmptyTypes"/>)
            to get a method that takes no parameters.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPropertyInfo(System.Type,System.String,System.Type,System.Type[])">
            <summary>
            Searches for the property defined for a <see cref="T:System.Type"/>,
            using the specified name and parameter types.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <param name="propertyName">The String containing the name of the method to get.</param>
            <param name="types">An array of Type objects representing the number,
            order, and type of the parameters for the constructor to get.</param>
            <param name="returnType">The property return <see cref="T:System.Type"/>. </param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method
            that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetListItemType(System.Object)">
            <summary>
             Gets the Type of a list item.
            </summary>
             <param name="list">A <see cref="T:System.Object"/> instance. </param>
            <returns>The Type instance that represents the exact runtime type of a list item.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetListItemType(System.Type)">
            <summary>
             Gets the Type of a list item.
            </summary>
             <param name="listType">A <see cref="T:System.Type"/> instance. </param>
            <returns>The Type instance that represents the exact runtime type of a list item.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetElementType(System.Type)">
            <summary>
            Get Element Type.
            </summary>
            <param name="type">The target type.</param>
            <returns>Return Element type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsScalar(System.Type)">
            <summary>
            Gets a value indicating whether a type can be used as a db primitive.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns> True, if the type parameter is a primitive type; otherwise, False.</returns>
            <remarks><see cref="T:System.String"/>. <see cref="T:System.IO.Stream"/>. 
            <see cref="T:System.Xml.XmlReader"/>. <see cref="T:System.Xml.XmlDocument"/>. are specially handled by the library
            and, therefore, can be treated as scalar types.</remarks>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetGenericArguments(System.Type,System.Type)">
            <summary>
             Returns an array of Type objects that represent the type arguments
             of a generic type or the type parameters of a generic type definition.
            </summary>
             <param name="type">A <see cref="T:System.Type"/> instance.</param>
            <param name="baseType">Non generic base type.</param>
            <returns>An array of Type objects that represent the type arguments
             of a generic type. Returns an empty array if the current type is not a generic type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.TranslateGenericParameters(System.Type,System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters
            of the current generic type definition and returns a Type object
            representing the resulting constructed type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance.</param>
            <param name="typeArguments">An array of types to be substituted for
            the type parameters of the current generic type.</param>
            <returns>A Type representing the constructed type formed by substituting
            the elements of <paramref name="typeArguments"/> for the type parameters
            of the current generic type.</returns>
            <seealso cref="M:System.Type.MakeGenericType(System.Type[])"/>
        </member>
        <member name="M:NLib.Reflection.TypeEx.CompareParameterTypes(System.Type,System.Type)">
            <summary>
            Compare Parameter Types.
            </summary>
            <param name="goal">The target type.</param>
            <param name="probe">The test type.</param>
            <returns>Return true if both type is same.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.CheckConstraints(System.Type,System.Type)">
            <summary>
            Check Constraints.
            </summary>
            <param name="goal">The target type. The type should be Generic type.</param>
            <param name="probe">The test type. The type should be Generic type.</param>
            <returns>Return true if both parameter constraints is same.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.CompareGenericTypes(System.Type,System.Type)">
            <summary>
            Compare Generic Types.
            </summary>
            <param name="goal">The target type. The type should be Generic type.</param>
            <param name="probe">The test type. The type should be Generic type.</param>
            <returns>Return true if both generic arguments is same.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetPropertyByMethod(System.Reflection.MethodInfo)">
            <summary>
            Get Property By Method. (get_ or set_)
            </summary>
            <param name="method">The method info instance.</param>
            <returns>Return property info instance.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Get Member Type.
            </summary>
            <param name="memberInfo">The method info instance.</param>
            <returns>Return member type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsFloatType(System.Type)">
            <summary>
            Check is float type. (Single/Double/Decimal).
            </summary>
            <param name="type">The test type.</param>
            <returns>Return true if is float type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsIntegerType(System.Type)">
            <summary>
            Check is integer type.
            </summary>
            <param name="type">The test type.</param>
            <returns>Return true if is integer type.</returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsNullableValueMember(System.Reflection.MemberInfo)">
            <summary>
            IsNullableValueMember
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.IsNullableHasValueMember(System.Reflection.MemberInfo)">
            <summary>
            IsNullableHasValueMember
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.Equals(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Equals
            </summary>
            <param name="member1"></param>
            <param name="member2"></param>
            <returns></returns>
        </member>
        <member name="M:NLib.Reflection.TypeEx.Equals(System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Equals
            </summary>
            <param name="member1"></param>
            <param name="member2"></param>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Reflection.TypeEx.IGetDefaultValueHelper">
            <summary>
            IGetDefaultValueHelper interface
            </summary>
        </member>
        <member name="T:NLib.Reflection.TypeEx.GetDefaultValueHelper`1">
            <summary>
            GetDefaultValueHelper Internal class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NLib.Reflection.TypeEx.GetDefaultValue(System.Type)">
            <summary>
            GetDefaultValue
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:NLib.Reflection.TypeUtils">
            <summary>
            Type utils is utility that used for implement abstract type (class) that required to reflection
            metadata about it's ansessor information and creation
            </summary>
        </member>
        <member name="T:NLib.Reflection.TypeUtils.TypeInformation">
            <summary>
            Type Information (used internal only)
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.TypeInformation.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="baseType">Base Type</param>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.TypeInformation.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.TypeInformation.GetInheritedTypeNames(System.String)">
            <summary>
            Get Inherited Type Reference's Names
            </summary>
            <param name="staticPropertyName">(static) Property's Name</param>
            <returns>Type's Name that inhreited from specificed type</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.TypeInformation.GetInheritedTypes">
            <summary>
            Get Inherited Types
            </summary>
            <returns>list of all inherited type in cache</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.TypeInformation.GetInheritedTypes(System.Boolean)">
            <summary>
            Get Inherited Types
            </summary>
            <param name="refresh">refresh cache</param>
            <returns>list of all inherited type</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.TypeInformation.Create(System.String,System.String,System.String)">
            <summary>
            Create New Instance by reference name
            </summary>
            <param name="staticPropertyName">(static) Property's Name</param>
            <param name="refName">reference's name</param>
            <param name="createInstanceMethodName">Method's name that used to create instance (this method should has no parameter</param>
            <returns>New Object Instance</returns>
        </member>
        <member name="P:NLib.Reflection.TypeUtils.Instance">
            <summary>
            Singelton Instance Access
            </summary>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.GetInheritedTypeNames(System.Type,System.String)">
            <summary>
            Get Inherited Type Reference's Names
            </summary>
            <param name="baseType">Base Type</param>
            <param name="staticPropertyName">(static) Property's Name</param>
            <returns>Type's Name that inhreited from specificed type</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.GetInheritedTypes(System.Type)">
            <summary>
            Get Inherited Types
            </summary>
            <param name="baseType">Base Type</param>
            <returns>list of all inherited type in cache</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.GetInheritedTypes(System.Type,System.Boolean)">
            <summary>
            Get Inherited Types
            </summary>
            <param name="baseType">Base Type</param>
            <param name="refresh">refresh cache</param>
            <returns>list of all inherited type</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.Create(System.Type,System.String,System.String,System.String)">
            <summary>
            Create New Instance by reference name
            </summary>
            <param name="baseType">Base Type</param>
            <param name="staticPropertyName">(static) Property's Name</param>
            <param name="refName">reference's name</param>
            <param name="createInstanceMethodName">Method's name that used to create instance (this method should has no parameter</param>
            <returns>New Object Instance</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.GetReferenceName(System.Object,System.String)">
            <summary>
            Get Reference Name
            </summary>
            <param name="instance">Instance to read information</param>
            <param name="staticPropertyName">(static) Property's Name to call</param>
            <returns>return Reference's Name</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.GetAttributes(System.Type,System.Type)">
            <summary>
            Get Attributes
            </summary>
            <param name="componentType">Type to find property attribute</param>
            <param name="attributeType">target attribute's type</param>
            <returns>Attribute instance that assigned to specificed type</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.GetAttribute(System.Type,System.Type)">
            <summary>
            Get Attribute
            </summary>
            <param name="componentType">Type to find property attribute</param>
            <param name="attributeType">target attribute's type</param>
            <returns>Attribute instance that assigned to specificed type</returns>
        </member>
        <member name="M:NLib.Reflection.TypeUtils.GetPropertytAttribute(System.Type,System.String,System.Type)">
            <summary>
            Get Propertyt Attribute
            </summary>
            <param name="componentType">Type to find property attribute</param>
            <param name="propertyName">Property's Name</param>
            <param name="attributeType">target attribute's type</param>
            <returns>Attribute instance that assigned to specificed type</returns>
        </member>
        <member name="T:NLib.Reflection.VarCache`1">
            <summary>
            The Var'Cache class. Internal used for dump variable name and value.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
        </member>
        <member name="F:NLib.Reflection.VarCache`1.Name">
            <summary>
            Gets Name.
            </summary>
        </member>
        <member name="F:NLib.Reflection.VarCache`1.properties">
            <summary>
            Gets Properties.
            </summary>
        </member>
        <member name="M:NLib.Reflection.VarCache`1.#cctor">
            <summary>
            Constructor (static).
            </summary>
        </member>
        <member name="T:NLib.Reflection.MetaDataInfo">
            <summary>
            The MetaDataInfo class. This class keep the object's type metadata.
            </summary>
        </member>
        <member name="M:NLib.Reflection.MetaDataInfo.GetMetaData(System.Type)">
            <summary>
            Gets MetaDataInfo in cache. This method is used internally by Variable Access and ObjectInfo.
            </summary>
            <param name="type">The target type.</param>
            <returns>Returns null if not found. Otherwise return MetaDataInfo that match type.</returns>
        </member>
        <member name="M:NLib.Reflection.MetaDataInfo.Register(System.Type,NLib.Reflection.MetaDataInfo,System.Boolean)">
            <summary>
            Register new meta data. This method is used internally by Variable Access and ObjectInfo.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The meta data instance.</param>
            <param name="autoReplace">True if need to replace exists type with new meta data.</param>
            <returns>Returns true if register success.</returns>
        </member>
        <member name="M:NLib.Reflection.MetaDataInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Reflection.MetaDataInfo.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:NLib.Reflection.MetaDataInfo.Type">
            <summary>
            Gets (or internal sets) instance data type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.MetaDataInfo.Properties">
            <summary>
            Gets all avaliable properties for specificed type.
            </summary>
        </member>
        <member name="P:NLib.Reflection.MetaDataInfo.Events">
            <summary>
            Gets all avaliable events for specificed type.
            </summary>
        </member>
        <member name="T:NLib.Reflection.ObjectInfo">
            <summary>
            The Object Info class. This class keep the object's instance metadata.
            </summary>
        </member>
        <member name="M:NLib.Reflection.ObjectInfo.GetValue``1(System.String)">
            <summary>
            Get Value.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">
            The property's name. If the variable is value type or string this value should be null or empty string.
            </param>
            <returns>Returns value of the variable.</returns>
        </member>
        <member name="M:NLib.Reflection.ObjectInfo.GetValue(System.String)">
            <summary>
            Get Value.
            </summary>
            <param name="propertyName">
            The property's name. If the variable is value type or string this value should be null or empty string.
            </param>
            <returns>Returns value of the variable.</returns>
        </member>
        <member name="M:NLib.Reflection.ObjectInfo.SetValue``1(System.String,``0)">
            <summary>
            Set Value.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property's name.</param>
            <param name="value">The property's value.</param>
        </member>
        <member name="M:NLib.Reflection.ObjectInfo.SetValue(System.String,System.Object)">
            <summary>
            Set Value.
            </summary>
            <param name="propertyName">The property's name.</param>
            <param name="value">The property's value.</param>
        </member>
        <member name="P:NLib.Reflection.ObjectInfo.MetaData">
            <summary>
            Gets (or internal sets) instance MetaData.
            </summary>
        </member>
        <member name="P:NLib.Reflection.ObjectInfo.Name">
            <summary>
            Gets (or internal sets) instance name.
            </summary>
        </member>
        <member name="P:NLib.Reflection.ObjectInfo.Instance">
            <summary>
            Gets (or internal sets) target instance.
            </summary>
        </member>
        <member name="T:NLib.Reflection.VariableAccess">
            <summary>
            Variable Access.
            </summary>
        </member>
        <member name="M:NLib.Reflection.VariableAccess.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NLib.Reflection.VariableAccess.CheckIfAnonymousType2(System.Type)">
            <summary>
            CheckIfAnonymousType.
            </summary>
            <param name="type">The type to test.</param>
            <returns>Retruns true if type is anonymous type.</returns>
        </member>
        <member name="M:NLib.Reflection.VariableAccess.CheckIfAnonymousType(System.Type)">
            <summary>
            CheckIfAnonymousType.
            </summary>
            <param name="type">The type to test.</param>
            <returns>Retruns true if type is anonymous type.</returns>
        </member>
        <member name="M:NLib.Reflection.VariableAccess.GetMetadata``1(``0)">
            <summary>
            Get Metadata. (This method required external classes to optimized for performance).
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="item">The anonymous type of actual type.</param>
            <returns>Returns instance of variable that match the item.</returns>
        </member>
        <member name="T:NLib.Xml.XmlExceptionEventHandler">
            <summary>
            Xml Exception Event Handler
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An Xml Exception Event Args.</param>
        </member>
        <member name="T:NLib.Xml.XmlExceptionEventArgs">
            <summary>
            Xml Exception Exception Args
            </summary>
        </member>
        <member name="M:NLib.Xml.XmlExceptionEventArgs.#ctor">
            <summary>
            Construcctor
            </summary>
        </member>
        <member name="M:NLib.Xml.XmlExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Construcctor
            </summary>
            <param name="ex">An Exception instance.</param>
        </member>
        <member name="M:NLib.Xml.XmlExceptionEventArgs.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NLib.Xml.XmlExceptionEventArgs.Exception">
            <summary>
            Get Exception instance.
            </summary>
        </member>
        <member name="T:NLib.Xml.XmlFile">
            <summary>
            XmlFile class. Wrapper class for handle XML Serialization for Custom Object
            </summary>
        </member>
        <member name="M:NLib.Xml.XmlFile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Xml.XmlFile.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NLib.Xml.XmlFile.SaveToFile``1(System.String,``0)">
            <summary>
            Save Object to XML File with specificed filename (auto backup when processing).
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="FileName">FileName to Save</param>
            <param name="value">The object instance to save</param>
            <returns>Return NResult with result is true if Save is completed</returns>
        </member>
        <member name="M:NLib.Xml.XmlFile.SaveToFile``1(System.IO.Stream,``0)">
            <summary>
            Save Object to File Stream.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="s">The Stream to Save.</param>
            <param name="value">The Object instance to Save.</param>
            <returns>Return NResult with result is true if Save is completed</returns>
        </member>
        <member name="M:NLib.Xml.XmlFile.SaveToFile(System.String,System.Type,System.Object)">
            <summary>
            Save Object to XML File with specificed filename (auto backup when processing).
            </summary>
            <param name="FileName">FileName to Save</param>
            <param name="objectType">The object instance to serialized.</param>
            <param name="value">The object instance to save</param>
            <returns>Return NResult with result is true if Save is completed</returns>
        </member>
        <member name="M:NLib.Xml.XmlFile.SaveToFile(System.IO.Stream,System.Type,System.Object)">
            <summary>
            Save Object to File Stream.
            </summary>
            <param name="s">The Stream to Save.</param>
            <param name="objectType">The target object type.</param>
            <param name="value">The object instance to serialized.</param>
            <returns>Return NResult with result is true if Save is completed</returns>
        </member>
        <member name="M:NLib.Xml.XmlFile.LoadFromFile``1(System.String)">
            <summary>
            Load Object Instance from Specificed FileName.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="FileName">The target file name to load.</param>
            <returns>Return NResult of T that loaded from file</returns>
        </member>
        <member name="M:NLib.Xml.XmlFile.LoadFromFile``1(System.IO.Stream)">
            <summary>
            Load Object From Stream.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="s">The Stream to load object.</param>
            <returns>Return NResult of T that loaded from stream.</returns>
        </member>
        <member name="M:NLib.Xml.XmlFile.LoadFromFile(System.String,System.Type)">
            <summary>
            Load Object Instance from Specificed FileName.
            </summary>
            <param name="FileName">The target file name to load.</param>
            <param name="objectType">The target object type.</param>
            <returns>Return NResult of object that loaded from file.</returns>
        </member>
        <member name="M:NLib.Xml.XmlFile.LoadFromFile(System.IO.Stream,System.Type)">
            <summary>
            Load Object From Stream.
            </summary>
            <param name="s">The Stream to load object.</param>
            <param name="objectType">The target object type.</param>
            <returns>Return NResult of object instance from stream.</returns>
        </member>
        <member name="P:NLib.Xml.XmlFile.ExtraTypes">
            <summary>
            Gets or sets Exrta Types used to serialize and deserizlize in collection.
            </summary>
        </member>
        <member name="P:NLib.Xml.XmlFile.DisableDebug">
            <summary>
            Gets or sets the option to disable to write exception to debug manager.
            </summary>
        </member>
        <member name="P:NLib.Xml.XmlFile.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="E:NLib.Xml.XmlFile.OpenFileError">
            <summary>
            The OpenFileError event. Occur when load operation is detected exception.
            </summary>
        </member>
        <member name="E:NLib.Xml.XmlFile.SaveFileError">
            <summary>
            The SaveFileError event. Occur when save operation is detected exception.
            </summary>
        </member>
        <member name="T:NLib.Xml.XmlManager">
            <summary>
            XmlManager class. Wrapper class for handle XML Serialization for Custom Object
            see XmlFile class for more information.
            </summary>
        </member>
        <member name="M:NLib.Xml.XmlManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NLib.Xml.XmlManager.SaveToFile``1(System.String,``0)">
            <summary>
            Save Object to XML File with specificed filename (auto backup when processing).
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="FileName">FileName to Save</param>
            <param name="value">The object instance to save</param>
            <returns>Return NResult with result is true if Save is completed</returns>
        </member>
        <member name="M:NLib.Xml.XmlManager.SaveToFile(System.String,System.Type,System.Object)">
            <summary>
            Save Object to XML File with specificed filename (auto backup when processing).
            </summary>
            <param name="FileName">FileName to Save</param>
            <param name="objectType">The target object type.</param>
            <param name="value">The object instance to save</param>
            <returns>Return NResult with result is true if Save is completed</returns>
        </member>
        <member name="M:NLib.Xml.XmlManager.LoadFromFile``1(System.String)">
            <summary>
            Load Object Instance from Specificed FileName.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="FileName">The target file name to load.</param>
            <returns>Return NResult of T that loaded from file</returns>
        </member>
        <member name="M:NLib.Xml.XmlManager.LoadFromFile(System.String,System.Type)">
            <summary>
            Load Object Instance from Specificed FileName.
            </summary>
            <param name="FileName">The target file name to load.</param>
            <param name="objectType">The target object type.</param>
            <returns>Return NResult of object that loaded from file</returns>
        </member>
        <member name="P:NLib.Xml.XmlManager.ExtraTypes">
            <summary>
            Gets or sets Exrta Types used to serialize and deserizlize in collection
            </summary>
        </member>
        <member name="P:NLib.Xml.XmlManager.DisableDebug">
            <summary>
            Gets or sets the option to disable to write exception to Debug manager.
            </summary>
        </member>
        <member name="P:NLib.Xml.XmlManager.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="E:NLib.Xml.XmlManager.OpenFileError">
            <summary>
            The OpenFileError event. Occur when load operation is detected exception.
            </summary>
        </member>
        <member name="E:NLib.Xml.XmlManager.SaveFileError">
            <summary>
            The SaveFileError event. Occur when save operation is detected exception.
            </summary>
        </member>
        <member name="T:NLib.ApplicationManagerExtensions">
            <summary>
            The Extenstion methods for Application manager.
            </summary>
        </member>
        <member name="M:NLib.ApplicationManagerExtensions.Sleep``1(``0,System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="millisecondsTimeout">
            The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate 
            that this thread should be suspended to allow other waiting threads to execute. 
            Specify Infinite to block the thread indefinitely. 
            </param>
        </member>
        <member name="M:NLib.ApplicationManagerExtensions.Wait``1(``0,System.Int32)">
            <summary>
            Wait.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait. 
            </param>
        </member>
        <member name="M:NLib.ApplicationManagerExtensions.FreeGC``1(``0)">
            <summary>
            Force Free Garbage Collector.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The object instance.</param>
        </member>
        <member name="M:NLib.ApplicationManagerExtensions.FreeGC``1(``0,System.Object)">
            <summary>
            Force Free Garbage Collector.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="obj">object reference to release memory.</param>
        </member>
        <member name="T:NLib.DateTimeExtensionMethods">
            <summary>
            The Extension methods for DateTime and Timespan.
            </summary>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.January(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for January at specificed year.
            Example : DateTime d = 11.January(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.February(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for February at specificed year.
            Example : DateTime d = 11.February(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.March(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for March at specificed year.
            Example : DateTime d = 11.March(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.April(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for April at specificed year.
            Example : DateTime d = 11.April(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.May(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for May at specificed year.
            Example : DateTime d = 11.May(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.June(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for June at specificed year.
            Example : DateTime d = 11.June(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.July(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for July at specificed year.
            Example : DateTime d = 11.July(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.August(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for August at specificed year.
            Example : DateTime d = 11.August(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.September(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for September at specificed year.
            Example : DateTime d = 11.September(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.October(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for October at specificed year.
            Example : DateTime d = 11.October(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.November(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for November at specificed year.
            Example : DateTime d = 11.November(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.December(System.Int32,System.Int32)">
            <summary>
            Build DateTime from specificed day of month for December at specificed year.
            Example : DateTime d = 11.December(2008);
            </summary>
            <param name="i">The day of month.</param>
            <param name="year">The year.</param>
            <returns>
            Returns DateTime for specificed The day of month.
            If specificed day of month is less than zero the first day of month will returns
            If specificed day of month is over than max day in month the last day of month will returns
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.Days(System.Int32)">
            <summary>
            Gets the TimeSpan instance for specificed days.
            Usage : TimeSpan ts = 20.Days();
            </summary>
            <param name="i">The number of days</param>
            <returns>Returns TimeSpan instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.Hours(System.Int32)">
            <summary>
            Gets the TimeSpan instance for specificed hours.
            Usage : TimeSpan ts = 20.Hours();
            </summary>
            <param name="i">The number of hours</param>
            <returns>Returns TimeSpan instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.Minutes(System.Int32)">
            <summary>
            Gets the TimeSpan instance for specificed minutes.
            Usage : TimeSpan ts = 20.Minutes();
            </summary>
            <param name="i">The number of minutes</param>
            <returns>Returns TimeSpan instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.Seconds(System.Int32)">
            <summary>
            Gets the TimeSpan instance for specificed seconds.
            Usage : TimeSpan ts = 20.Seconds();
            </summary>
            <param name="i">The number of seconds</param>
            <returns>Returns TimeSpan instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.Ago(System.TimeSpan)">
            <summary>
            Gets the DateTime by specificed time criteria.
            For Example when need to get DateTime from 20 minutes ago we can write something 
            like : 20.Minutes().Ago();
            </summary>
            <param name="ts">The TimeSpan interval that used for substract from DateTime.Now.</param>
            <returns>Returns DateTime instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.AgoSince(System.TimeSpan,System.DateTime)">
            <summary>
            Gets the DateTime by specificed time criteria.
            For Example when need to find 15 days before 1 january 2009 
            we can write something like : 15.Days().AgoSince(1.January(2009));
            </summary>
            <param name="ts">The TimeSpan interval that used for substract from the 'dt' parameter.</param>
            <param name="dt">The Starting DateTime.</param>
            <returns>Returns DateTime instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.FromNow(System.TimeSpan)">
            <summary>
            Gets the DateTime by specificed time criteria.
            For Example when need to gets the Date that is 8 hour from now we can write something
            like : 8.Hours().FromNow();
            </summary>
            <param name="ts">The TimeSpan interval that used for add to DateTime.Now.</param>
            <returns>Returns DateTime instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.From(System.TimeSpan,System.DateTime)">
            <summary>
            Gets the DateTime by specificed time criteria.
            For Example when need to find 3 days after 5 december 2008 we can write something
            like : 3.Days().From(5.December(2008));
            </summary>
            <param name="ts">The TimeSpan interval that used for add to the 'dt' parameter.</param>
            <param name="dt">The Starting DateTime.</param>
            <returns>Returns DateTime instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.ElapseTime(System.DateTime)">
            <summary>
            Find Elapse time,
            </summary>
            <param name="dt">The starting datetime.</param>
            <returns>Returns TimeSpan instance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.To(System.DateTime,System.DateTime)">
            <summary>
            Gets All DateTime from start date to end date.
            i.e. From First of year to ToDay we can write something 
            like : 1.January(2008).To(DateTime.Now);
            </summary>
            <param name="from">The Starting Range.</param>
            <param name="to">The Ending Range.</param>
            <returns>Returns IEnumerable of DateTime insance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.DownTo(System.DateTime,System.DateTime)">
            <summary>
            Gets All DateTime from start date to end date.
            i.e. From End of year to Next 7 days we can write something 
            like : 31.December(2008).DownTo(7.Days().FromNow());
            </summary>
            <param name="from">The Starting Range.</param>
            <param name="to">The Ending Range.</param>
            <returns>Returns IEnumerable of DateTime insance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.StepTo(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Gets All DateTime from start date to end date.
            i.e. From Start of year to end of year every 3 days we can write something 
            like : 1.January(2008).StepTo(31.December(2008), 3.Days());
            </summary>
            <param name="from">The Starting Range.</param>
            <param name="to">The Ending Range.</param>
            <param name="step">The step.</param>
            <returns>Returns IEnumerable of DateTime insance.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.ToDateTimeString(System.DateTime,System.String)">
            <summary>
            To DateTime String Invariant.
            </summary>
            <param name="value">The DateTime instance.</param>
            <param name="format">
            The custom date format.
            Default format is yyyy.MM.dd.HH.mm.ss.ffff
            </param>
            <returns>
            Returns string that represnets the DateTime that render in specificed format.
            </returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.ToDateString(System.DateTime,System.String,System.String)">
            <summary>
            To Date String Invariant. The output seperator always be '/'.
            </summary>
            <param name="dateValue">The DateTime instance.</param>
            <param name="timeValue">Optional time value. Default is 00:00:00.</param>
            <param name="dateformat">Optional date format. Default is yyyy/MM/dd.</param>
            <returns>Returns string that format the to match specificed format.</returns>
        </member>
        <member name="M:NLib.DateTimeExtensionMethods.ToDateTime(System.String,System.String,System.String)">
            <summary>
            Convert string to datetime in specificed culture code.
            </summary>
            <param name="dateTimeString">The string to convert.</param>
            <param name="format">Optional format.</param>
            <param name="cultureCode">Optional culture code.</param>
            <returns>Returns datetime instance.</returns>
        </member>
        <member name="T:NLib.DebugExtensionMethods">
            <summary>
            The Extension methods for Debug framework.
            </summary>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Info``1(``0,System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            Write Info to log.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="message">The info message.</param>
            <param name="args">The optional args for info message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Info(System.String,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Write Info to log.
            </summary>
            <param name="message">The info message.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="args">The optional args for info message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Info(System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            Write Info to log.
            </summary>
            <param name="callingMethod">The calling method.</param>
            <param name="message">The info message.</param>
            <param name="args">The optional args for info message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err``1(``0,System.Reflection.MethodBase,System.Exception)">
            <summary>
            Write Error to all debugger.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="ex">The Exception instance.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err``1(``0,System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            Write Error to all debugger.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="errorMessage">The Error message.</param>
            <param name="args">The optional args for error message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err``1(``0,System.Reflection.MethodBase,System.Exception,System.String,System.Object[])">
            <summary>
            Write Error to all debugger.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="ex">The Exception instance.</param>
            <param name="errorMessage">The Error message.</param>
            <param name="args">The optional args for error message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err(System.Reflection.MethodBase,System.Exception)">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="callingMethod">The calling method.</param>
            <param name="ex">The source exception.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err(System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="callingMethod">The calling method.</param>
            <param name="errorMessage">The Error message.</param>
            <param name="args">The optional args for error message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err(System.Reflection.MethodBase,System.Exception,System.String,System.Object[])">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="callingMethod">The calling method.</param>
            <param name="ex">The source exception.</param>
            <param name="errorMessage">The Error message.</param>
            <param name="args">The optional args for error message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err(System.Exception,System.Reflection.MethodBase)">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="ex">The source exception.</param>
            <param name="callingMethod">The calling method.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err(System.String,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="errorMessage">The Error message.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="args">The optional args for error message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Err(System.Exception,System.Reflection.MethodBase,System.String,System.Object[])">
            <summary>
            Write Error to all debugger.
            </summary>
            <param name="ex">The source exception.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="errorMessage">The Error message.</param>
            <param name="args">The optional args for error message.</param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Dump``2(``0,System.Reflection.MethodBase,``1,System.String)">
            <summary>
            Dump using Reflecion and caching. This is the faster version.
            Usage. new Dump().(MethodBase.GetCurrentMethod(), new { var1 }).
            </summary>
            <typeparam name="I">The instance type. Can be any object.</typeparam>
            <typeparam name="T">The target type.</typeparam>
            <param name="inst">The dump instance.</param>
            <param name="callingMethod">The calling method.</param>
            <param name="item">The instance of item.</param>
            <param name="propertyName">
            The instance of property to read. Do not required if property's value can read properlys.
            </param>
        </member>
        <member name="M:NLib.DebugExtensionMethods.Dump``1(System.Reflection.MethodBase,``0,System.String)">
            <summary>
            Dump using Reflecion and caching. This is the faster version.
            Usage. MethodBase.GetCurrentMethod().Dump().(new { var1 }).
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="callingMethod">The calling method.</param>
            <param name="item">The instance of item.</param>
            <param name="propertyName">
            The instance of property to read. Do not required if property's value can read properlys.
            </param>
        </member>
        <member name="T:NLib.Resource.Dde.DDE">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.AdviseFailedMessage">
            <summary>
              Looks up a localized string similar to The server failed to advise &quot;${service}|${topic}!${item}&quot;..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.AlreadyBeingAdvisedMessage">
            <summary>
              Looks up a localized string similar to An advise loop for &quot;${service}|${topic}!${item}&quot; already exists..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.AlreadyConnectedMessage">
            <summary>
              Looks up a localized string similar to The client is already connected..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.AlreadyInitializedMessage">
            <summary>
              Looks up a localized string similar to The context is already intialized..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.AlreadyPausedMessage">
            <summary>
              Looks up a localized string similar to The specified conversation is already paused..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.AlreadyRegisteredMessage">
            <summary>
              Looks up a localized string similar to The service is already registered..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.AsyncResultParameterInvalidMessage">
            <summary>
              Looks up a localized string similar to The IAsyncResult must have been returned by a call to ${method}..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ClientPauseFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to pause the conversation..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ClientResumeFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to resume the conversation..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ConnectFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to connect to &quot;${service}|${topic}&quot;.  Make sure the server application is running and that it supports the specified service name and topic name pair..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ExecuteFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to execute &quot;${command}&quot;..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.FilterAlreadyAddedMessage">
            <summary>
              Looks up a localized string similar to The transaction filter has already been added..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.FilterNotAddedMessage">
            <summary>
              Looks up a localized string similar to The transaction filter has not been added..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.InitializeFailedMessage">
            <summary>
              Looks up a localized string similar to The context failed to initialize..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.MarshalTimeoutMessage">
            <summary>
              Looks up a localized string similar to The context timed out attempting to marshal the operation..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.NoMessageLoopMessage">
            <summary>
              Looks up a localized string similar to The context is not hosted on a thread with a message loop..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.NotBeingAdvisedMessage">
            <summary>
              Looks up a localized string similar to An advise loop for &quot;${service}|${topic}!${item}&quot; does not exist..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.NotConnectedMessage">
            <summary>
              Looks up a localized string similar to The client is not connected..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.NotInitializedMessage">
            <summary>
              Looks up a localized string similar to The context is not initialized..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.NotPausedMessage">
            <summary>
              Looks up a localized string similar to The specified conversation is not paused..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.NotRegisteredMessage">
            <summary>
              Looks up a localized string similar to The service is not registered..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.PokeFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to poke &quot;${service}|${topic}!${item}&quot;..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.RegisterFailedMessage">
            <summary>
              Looks up a localized string similar to The server failed to register &quot;${service}&quot;..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.RequestFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to request &quot;${service}|${topic}!${item}&quot;..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ServerPauseAllFailedMessage">
            <summary>
              Looks up a localized string similar to The server failed to pause all conversations..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ServerPauseFailedMessage">
            <summary>
              Looks up a localized string similar to The server failed to pause the specified conversation..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ServerResumeAllFailedMessage">
            <summary>
              Looks up a localized string similar to The server failed to resume all conversations..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.ServerResumeFailedMessage">
            <summary>
              Looks up a localized string similar to The server failed to resume the specified conversation..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.StartAdviseFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to initiate an advise loop for &quot;${service}|${topic}!${item}&quot;..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.StopAdviseFailedMessage">
            <summary>
              Looks up a localized string similar to The client failed to terminate the advise loop for &quot;${service}|${topic}!${item}&quot;..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.StringParameterInvalidMessage">
            <summary>
              Looks up a localized string similar to The parameter must be &lt;= 255 characters..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.TimeoutParameterInvalidMessage">
            <summary>
              Looks up a localized string similar to The parameter must be &gt; 0..
            </summary>
        </member>
        <member name="P:NLib.Resource.Dde.DDE.UnknownErrorMessage">
            <summary>
              Looks up a localized string similar to An unknown error occurred..
            </summary>
        </member>
        <member name="T:NLib.Resource.SevenZipConsts">
            <summary>
            Seven Zip Consts.
            </summary>
        </member>
        <member name="F:NLib.Resource.SevenZipConsts.SevenZip">
            <summary>
            7Zip full resurce name
            </summary>
        </member>
        <member name="T:NLib.Resource.MSOfficeConsts">
            <summary>
            MSOffice Consts
            </summary>
        </member>
        <member name="F:NLib.Resource.MSOfficeConsts.Access2K">
            <summary>
            Access2K full resurce name
            </summary>
        </member>
        <member name="F:NLib.Resource.MSOfficeConsts.Access2003">
            <summary>
            Access2003 full resurce name
            </summary>
        </member>
        <member name="F:NLib.Resource.MSOfficeConsts.Excel97">
            <summary>
            Excel97 full resurce name
            </summary>
        </member>
        <member name="F:NLib.Resource.MSOfficeConsts.Excel2003">
            <summary>
            Excel2003 full resurce name
            </summary>
        </member>
        <member name="F:NLib.Resource.MSOfficeConsts.WordXP">
            <summary>
            WordXP full resurce name
            </summary>
        </member>
        <member name="F:NLib.Resource.MSOfficeConsts.Word2003">
            <summary>
            Word2003 full resurce name
            </summary>
        </member>
        <member name="T:NLib.Resource.CPMConsts">
            <summary>
            Application Closing Process Monitor Consts.
            </summary>
        </member>
        <member name="F:NLib.Resource.CPMConsts.CloseProcessMonitor">
            <summary>
            Close Process Monitor
            </summary>
        </member>
        <member name="T:NLib.DelegateExtensionMethods">
            <summary>
            The Extension methods for Delegate.
            </summary>
        </member>
        <member name="M:NLib.DelegateExtensionMethods.DoEvents``1(``0)">
            <summary>
            Application DoEvents.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">An object variable.</param>
        </member>
        <member name="M:NLib.DelegateExtensionMethods.Invoke``1(``0,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the 
            UI object's underlying window handle, with the specified list of arguments.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The object instance.</param>
            <param name="del">
            A delegate to a method that takes parameters of the same number and type that 
            are contained in the args parameter.
            </param>
            <param name="args">
            An array of objects to pass as arguments to the specified method. 
            This parameter can be null if the method takes no arguments. 
            </param>
            <returns>
            An Object that contains the return value from the delegate being invoked, 
            or null if the delegate has no return value.
            </returns>
        </member>
        <member name="M:NLib.DelegateExtensionMethods.Call(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the 
            UI object's underlying window handle, with the specified list of arguments.
            </summary>
            <param name="del">
            A delegate to a method that takes parameters of the same number and type that 
            are contained in the args parameter.
            </param>
            <param name="args">
            An array of objects to pass as arguments to the specified method. 
            This parameter can be null if the method takes no arguments. 
            </param>
            <returns>
            An Object that contains the return value from the delegate being invoked, 
            or null if the delegate has no return value.
            </returns>
        </member>
        <member name="M:NLib.DelegateExtensionMethods.Call``1(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the 
            UI object's underlying window handle, with the specified list of arguments.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="del">
            A delegate to a method that takes parameters of the same number and type that 
            are contained in the args parameter.
            </param>
            <param name="args">
            An array of objects to pass as arguments to the specified method. 
            This parameter can be null if the method takes no arguments. 
            </param>
            <returns>
            An Object that contains the return value from the delegate being invoked, 
            or null if the delegate has no return value.
            </returns>
        </member>
        <member name="T:NLib.INotifyPropertyChangedExtensionMethods">
            <summary>
            The INotifyPropertyChanged Extension Methods.
            </summary>
        </member>
        <member name="M:NLib.INotifyPropertyChangedExtensionMethods.Raise``2(System.ComponentModel.PropertyChangedEventHandler,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Raise PropertyChanged event.
            Note. When used INotifyPropertyChanged in real time environment or in environment that
            properties is highly changed. This would cause performance penalty that when bind with UI
            the UI control(s) will slow down for sure.
            </summary>
            <typeparam name="TSender">The sender type.</typeparam>
            <typeparam name="TPropertyValue">The property value type.</typeparam>
            <param name="handler">The PropertyChanged delegate.</param>
            <param name="sender">The sender or owner of PropertyChanged delegate.</param>
            <param name="property">The Property instance expression.</param>
        </member>
        <member name="M:NLib.INotifyPropertyChangedExtensionMethods.Raise``1(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raise PropertyChanged event.
            Note. When used INotifyPropertyChanged in real time environment or in environment that
            properties is highly changed. This would cause performance penalty that when bind with UI
            the UI control(s) will slow down for sure.
            </summary>
            <typeparam name="TPropertyValue">The property value type.</typeparam>
            <param name="handler">The PropertyChanged delegate.</param>
            <param name="sender">The sender or owner of PropertyChanged delegate.</param>
            <param name="property">The Property instance expression.</param>
        </member>
        <member name="T:NLib.CollectionExtensionMethods">
            <summary>
            The Extension methods for Collection and List.
            </summary>
        </member>
        <member name="M:NLib.CollectionExtensionMethods.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Checks is specificed ICollection instance is null or empty list.
            </summary>
            <param name="value">An object variable.</param>
            <returns>Returns if the current ICollection instance is null or is empty.</returns>
        </member>
        <member name="T:NLib.ObjectExtensionMethods">
            <summary>
            The Extension methods for Object.
            </summary>
        </member>
        <member name="M:NLib.ObjectExtensionMethods.IsNull``1(``0)">
            <summary>
            Checks is object is null.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">An object variable.</param>
            <returns>Returns if the object is null.</returns>
        </member>
        <member name="M:NLib.ObjectExtensionMethods.GetValueOrDefault``2(``0,``1)">
            <summary>
            Get the value. If value is null new instance will automatically create and returns otherwise
            the value itself will returns. The Value need to be class and supports only class that has 
            default constructor only. Note. This method will lock the inst variable for make it thread 
            safe.
            </summary>
            <typeparam name="I">The target instance.</typeparam>
            <typeparam name="T">The value type.</typeparam>
            <param name="inst">The instance.</param>
            <param name="value">The value to ckecks normally is local variable.</param>
            <returns>
            Returns value if the value is not null or return new instance of T if value is null.
            </returns>
        </member>
        <member name="T:NLib.WindowExplorerShellExtensions">
            <summary>
            Window Explorer Shell Extension Methods.
            </summary>
        </member>
        <member name="M:NLib.WindowExplorerShellExtensions.OpenFolder(System.String)">
            <summary>
            Open Folder in Window Explorer.
            </summary>
            <param name="folderName">The Folder Name.</param>
        </member>
        <member name="M:NLib.WindowExplorerShellExtensions.OpenFileInDefaultProgram(System.String)">
            <summary>
            Open File with default program.
            </summary>
            <param name="fileName">The Folder Name.</param>
        </member>
        <member name="T:NLib.StringExtensionMethods">
            <summary>
            The Extension methods for String.
            </summary>
        </member>
        <member name="M:NLib.StringExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specificed string is null or empty or only contains of 
            white space characters.
            </summary>
            <param name="value">The target string.</param>
            <returns>
            Returns true if specificed string is null or empty or contains only white space characters.
            </returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.args(System.String,System.Object[])">
            <summary>
            Replace arguments in format string.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The argument list.</param>
            <returns>
            Returns formated string that replace with assigned arguments.
            </returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.eq(System.String,System.String,System.Boolean)">
            <summary>
            Checks is string is same.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <param name="ignoreCase">True for ignore case sensitive. Default is true.</param>
            <returns>Returns true if string is same.</returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.IsNumber(System.String)">
            <summary>
            Checks string is Number.
            </summary>
            <param name="value">Value to check.</param>
            <returns>true if value can convert to number.</returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.IsNumber(System.String,System.Globalization.NumberStyles)">
            <summary>
            Checks string is Number.
            </summary>
            <param name="value">Value to check.</param>
            <param name="style">specificed numeric style.</param>
            <returns>true if value can convert to number.</returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.IsInteger(System.String)">
            <summary>
            Checks string is Integer.
            </summary>
            <param name="value">Value to check.</param>
            <returns>true if value can convert to Integer.</returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.IsInteger(System.String,System.Globalization.NumberStyles)">
            <summary>
            Checks string is Integer.
            </summary>
            <param name="value">Value to check.</param>
            <param name="style">specificed numeric style.</param>
            <returns>true if value can convert to Integer.</returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.IsBool(System.String)">
            <summary>
            Checks string is boolean.
            </summary>
            <param name="value">Value to check.</param>
            <returns>true if value can convert to Boolean.</returns>
        </member>
        <member name="M:NLib.StringExtensionMethods.IsBool(System.String,System.String[],System.String[])">
            <summary>
            Checks string is boolean.
            </summary>
            <param name="value">Value to check.</param>
            <param name="trueValues">value array for true value checking.</param>
            <param name="falseValues">value array for false value checking.</param>
            <returns>true if value can convert to Boolean.</returns>
        </member>
        <member name="T:NLib.DataTypes">
            <summary>
            The Data Types Enum.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.Byte">
            <summary>
            Unsigned Byte.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.SByte">
            <summary>
            Signed Byte.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.UShort">
            <summary>
            Unsigned Integer 16 bits or Word.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.Short">
            <summary>
            Signed Integer 16 bits or Word.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.UInt">
            <summary>
            Unsigned Integer 32 bits or Double Word.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.Int">
            <summary>
            Signed Integer 32 bits or Double Word.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.Long">
            <summary>
            Unsigned Integer 64 bits or Quad Word.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.ULong">
            <summary>
            Unsigned Integer 64 bits or Quad Word.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.Single">
            <summary>
            Single Precision (or float) 32 bites or 4 bytes.
            </summary>
        </member>
        <member name="F:NLib.DataTypes.Double">
            <summary>
            Double Precision (or double) 64 bites or 8 bytes.
            </summary>
        </member>
        <member name="T:NLib.InputTypes">
            <summary>
            The Input Types Enum.
            </summary>
        </member>
        <member name="F:NLib.InputTypes.Decimal">
            <summary>
            Display As Decimal.
            </summary>
        </member>
        <member name="F:NLib.InputTypes.Hex">
            <summary>
            Display as Hex.
            </summary>
        </member>
        <member name="T:NLib.ValueTypeExtensionMethods">
            <summary>
            The Value Type Extension Methods.
            </summary>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.#cctor">
            <summary>
            Static Constructor.
            </summary>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetSize(NLib.DataTypes)">
            <summary>
            Gets number of byte used for specificed data type.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>Returns size of byte required to keep data for specificed data type.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetSize(System.ValueType)">
            <summary>
            Gets number of byte used for specificed Value Type (byte, short, int, etc.).
            </summary>
            <param name="valueType">The value to find size.</param>
            <returns>Returns size of byte required to keep data for specificed value type.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets proper bytes. Used for convert from source bytes to target bytes with auto fill or
            remove mis-size of data type.
            </summary>
            <param name="targetSize">The target data size.</param>
            <param name="dataSize">The value (or source) data size.</param>
            <param name="values">The value byte array.</param>
            <returns>Returns data that match target size.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(NLib.DataTypes)">
            <summary>
            Gets Empty bytes Or Zero bytes from DataTypes.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>Returns bytes with fill all with zero.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToByte(System.String)">
            <summary>
            Convert Decimal string to Byte.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToSByte(System.String)">
            <summary>
            Convert Decimal string to Signed Byte.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToInt16(System.String)">
            <summary>
            Convert Decimal string to Int16.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToUInt16(System.String)">
            <summary>
            Convert Decimal string to UInt16.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToInt32(System.String)">
            <summary>
            Convert Decimal string to Int32.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToUInt32(System.String)">
            <summary>
            Convert Decimal string to UInt32.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToInt64(System.String)">
            <summary>
            Convert Decimal string to Int64.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToUInt64(System.String)">
            <summary>
            Convert Decimal string to UInt64.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToSingle(System.String)">
            <summary>
            Convert Decimal string to single.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.DecimalToDouble(System.String)">
            <summary>
            Convert Decimal string to double.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexStringToByteArray(System.String)">
            <summary>
            Convert Hex string to byte array.
            </summary>
            <param name="hex">The hex string.</param>
            <returns>Returns byte arrays of source string.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToByte(System.String)">
            <summary>
            Convert Hex string to Byte.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToSByte(System.String)">
            <summary>
            Convert Hex string to SByte.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToInt16(System.String)">
            <summary>
            Convert Hex string to Int16.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToUInt16(System.String)">
            <summary>
            Convert Hex string to UInt16.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToInt32(System.String)">
            <summary>
            Convert Hex string to Int32.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToUInt32(System.String)">
            <summary>
            Convert Hex string to UInt32.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToInt64(System.String)">
            <summary>
            Convert Hex string to Int64.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToUInt64(System.String)">
            <summary>
            Convert Hex string to UInt64.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToSingle(System.String)">
            <summary>
            Convert Hex string to Single.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.HexToDouble(System.String)">
            <summary>
            Convert Hex string to Double.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.SByte,NLib.DataTypes)">
            <summary>
            Convert Signed Byte to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Byte,NLib.DataTypes)">
            <summary>
            Convert Byte to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Int16,NLib.DataTypes)">
            <summary>
            Convert Int16 to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.UInt16,NLib.DataTypes)">
            <summary>
            Convert UInt16 to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Int32,NLib.DataTypes)">
            <summary>
            Convert Int32 to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.UInt32,NLib.DataTypes)">
            <summary>
            Convert UInt32 to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Int64,NLib.DataTypes)">
            <summary>
            Convert Int64 to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.UInt64,NLib.DataTypes)">
            <summary>
            Convert UInt64 to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Single,NLib.DataTypes)">
            <summary>
            Convert Single to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Double,NLib.DataTypes)">
            <summary>
            Convert Double to Target Type and returns output in byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">The target data type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.String,NLib.DataTypes,NLib.InputTypes)">
            <summary>
            Convert string to Data Type and returns output in byte array.
            </summary>
            <param name="value">The string to convert and get result byte array.</param>
            <param name="dataType">The data type.</param>
            <param name="inputType">The input type.</param>
            <returns>Returns the result byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.GetBytes(System.Collections.Generic.IList{System.String},NLib.DataTypes,NLib.InputTypes)">
            <summary>
            Convert Multiple lines value to list of byte array.
            </summary>
            <param name="values">The string values to get bytes.</param>
            <param name="dataType">The data type.</param>
            <param name="inputType">The input type.</param>
            <returns>Returns the result list of byte array.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToByte(System.String,NLib.InputTypes)">
            <summary>
            Convert string to Byte.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToSByte(System.String,NLib.InputTypes)">
            <summary>
            Convert string to Signed Byte.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToInt16(System.String,NLib.InputTypes)">
            <summary>
            Convert string to Int16.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToUInt16(System.String,NLib.InputTypes)">
            <summary>
            Convert string to UInt16.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToInt32(System.String,NLib.InputTypes)">
            <summary>
            Convert string to Int32.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToUInt32(System.String,NLib.InputTypes)">
            <summary>
            Convert string to UInt32.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToInt64(System.String,NLib.InputTypes)">
            <summary>
            Convert string to Int64.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToUInt64(System.String,NLib.InputTypes)">
            <summary>
            Convert string to UInt64.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToSingle(System.String,NLib.InputTypes)">
            <summary>
            Convert string to single.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToDouble(System.String,NLib.InputTypes)">
            <summary>
            Convert string to double.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="inputType">The Input Type.</param>
            <returns>Returns convert value if error zero returns.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToHex(System.Collections.Generic.IList{System.Byte},System.Boolean)">
            <summary>
            Gets Hex String from bytes.
            </summary>
            <param name="values">The list of bytes.</param>
            <param name="addSpace">True for add space every byte.</param>
            <returns>Returns hex string.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.IsHex(System.String)">
            <summary>
            Checks is string is hex string.
            </summary>
            <param name="value">The string to checks.</param>
            <returns>Returns true if string is hex string.</returns>
        </member>
        <member name="M:NLib.ValueTypeExtensionMethods.ToDec(System.Collections.Generic.IList{System.Byte},NLib.DataTypes)">
            <summary>
            Gets Decimal String from bytes.
            </summary>
            <param name="values">The list of bytes.</param>
            <param name="dataType">The target decimal data type.</param>
            <returns>Returns decimal string.</returns>
        </member>
    </members>
</doc>
